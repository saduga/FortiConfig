define("ng/firewall/policy/templates",function(){"use strict";return function(providers){if(providers.$injector){var $templateCache=providers.$injector.get("$templateCache");$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/compare_qtip.html","<table class=\"table key-value\"><tbody><tr ng-if=\"data.supportedKeys.bytes && data.entry.bytes != null\"><td>{{::'Bytes' | lang}}/{{::'Packets' | lang}}</td><td>{{data.entry.bytes | bytes}}</td><td>{{data.entry.packets || 0 | number}}</td></tr><tr class=\"child\" ng-if=\"data.supportedKeys.software_bytes && data.entry.software_bytes != null &&\n                   data.entry['auto-asic-offload'] === 'enable'\"><td>{{::'Software' | lang}}</td><td>{{data.entry.software_bytes | bytes}}</td><td>{{data.entry.software_packets | number}}</td><td>{{data.entry.software_usage}}</td></tr><tr class=\"child\" ng-if=\"data.supportedKeys.asic_bytes && data.entry.asic_bytes != null &&\n                   data.entry['auto-asic-offload'] === 'enable'\"><td>{{::'SPU' | lang}}</td><td>{{data.entry.asic_bytes | bytes}}</td><td>{{data.entry.asic_packets | number}}</td><td>{{data.entry.asic_usage}}</td></tr><tr class=\"child\" ng-if=\"data.supportedKeys.nturbo_bytes && data.entry.nturbo_bytes != null &&\n                   data.entry['auto-asic-offload'] === 'enable'\"><td>{{::'nTurbo' | lang}}</td><td>{{data.entry.nturbo_bytes | bytes}}</td><td>{{data.entry.nturbo_packets | number}}</td><td>{{data.entry.nturbo_usage}}</td></tr><tr ng-if=\"data.entry['auto-asic-offload'] === 'disable'\"><td>{{::'SPU' | lang}}</td><td colspan=\"3\">{{::'disabled' | lang}}</td></tr><tr ng-if=\"data.supportedKeys.hit_count\"><td>{{::'hit_count' | lang}}</td><td colspan=\"3\">{{data.entry.hit_count || 0 | number}}</td></tr><tr ng-if=\"data.supportedKeys.first_used && data.entry.first_used\"><td>{{::'first_used' | lang}}</td><td colspan=\"3\">{{data.entry.first_used * 1000 | date: 'dd/MM/yyyy h:mm a'}}</td></tr><tr ng-if=\"data.supportedKeys.active_sessions && data.entry.policyid\"><td>{{::'active_sessions' | lang}}</td><td colspan=\"3\">{{data.entry.active_sessions || 0 | number}}</td></tr><tr ng-if=\"data.supportedKeys.last_used && data.entry.last_used\"><td>{{::'last_used' | lang}}</td><td colspan=\"3\">{{data.entry.last_used * 1000 | date: 'dd/MM/yyyy h:mm a'}}</td></tr><tr ng-if=\"data.supportedKeys.packets_dropped && data.entry.packets_dropped != null\"><td>{{::'Packets Dropped' | lang}}</td><td colspan=\"3\">{{data.entry.packets_dropped || 0 | number}}</td></tr></tbody></table>"),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/firewall_policy_warnings.html",'<div><span ng-show="(data.entry.policyid || data.entry.id) != 0">{{ \'Policy ID\' | lang}} {{ (data.entry.policyid || data.entry.id) }} </span><span ng-show="(data.entry.policyid || data.entry.id) == 0">{{ \'implicit\' | lang}} {{ data.entry.action | lang }} </span><span ng-show="data.entry.status === \'disable\'">({{\'disabled\' | lang }})</span><div ng-if="data.warnings.length > 0"><span f-lang="policy_issues"></span><ul><li ng-repeat="warning in data.warnings"><span>{{ (\'policy_\' + warning) | lang }}</span></li></ul></div></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items.html",'<div ng-controller="PolicyListMenuItems"><div ng-if="menu.popUpMenu && !$root.ADMIN_RO && !menu.$categoryRow && !menu.$sectionRow"><div ng-include="\'partials/menu_items_object.html\' | cache_path" class="mini-hide"></div><div ng-include="\'partials/menu_items_status.html\' | cache_path"></div><div ng-show="menu.columnSelector === \'action\' &&\n                      !containTargetPolicy(targetConfigs.learningPolicy)" ng-include="\'partials/menu_items_action.html\' | cache_path"></div><div ng-show="menu.columnSelector === \'poolname\' || menu.columnSelector === \'snat\'" f-with="({poolname: \'nat\', snat: \'snat\'}[menu.columnSelector]) as selector" ng-include="\'partials/menu_items_nat.html\' | cache_path"></div><div ng-show="menu.columnSelector === \'logtraffic\' && !containTargetPolicy(targetConfigs.learningPolicy)" ng-include="\'partials/menu_items_logtraffic.html\' | cache_path"></div><div ng-show="policyStatsSupported && policyStats.KEYS.indexOf(menu.columnSelector) >= 0" ng-include="\'partials/menu_items_stats.html\' | cache_path"></div><div ng-include="\'partials/menu_items_seq.html\' | cache_path"></div></div><div ng-if="menu.popUpMenu && !(menu.$categoryRow || menu.$sectionRow)"><div f-menu-item-button click="showMatchingLogs()" ng-if="policyType !== \'acl\' && policyType !== \'acl6\'" enabled="menu.entries.length === 1" class="mini-hide"><f-icon class="ftnt-eventlog"></f-icon>{{\'view_log\' | lang}}</div><div f-menu-item-button click="showInFortiview()" ng-if="policyType === \'policy\'" enabled="menu.entries.length === 1 && !implicitPolicySelected" class="mini-hide"><f-icon class="fa-area-chart"></f-icon>{{\'Show in FortiView\' | lang}}</div></div><div class="left-menu-items" ng-show="menu.menuBar || (!menu.$categoryRow && !menu.$sectionRow)"><div f-menu-item-create create-fn="create"></div><div f-menu-item-edit edit-fn="edit"></div><div f-menu-item-edit-cli></div><div f-menu-item-delete delete-entries-fn="deleteEntries" label-key="{{::menu.popUpMenu ? \'delete_policy\' : \'\'}}" entries-label-key="policies"></div><div f-menu-item-button click="policyLookup()" class="mini-hide" ng-show="menu.menuBar && policyLookupSupported"><f-icon class="fa-search"></f-icon><span f-lang="Policy Lookup"></span></div></div><div class="center-menu-items" ng-if="menu.menuBar"><div f-menu-item-qlist-search before-search="prepareSearchData"></div></div><div class="right-menu-items mini-hide" ng-if="menu.menuBar"><div class="menu-item menu-item-padded" ng-show="policyType === \'policy64\' && nat64Settings.status"><label for="nat64-forwarding-toggle">{{\'nat64_status\' | lang}}</label><input id="nat64-forwarding-toggle" type="checkbox" class="toggle-switch" ng-true-value="\'enable\'" ng-false-value="\'disable\'" ng-model="nat64Settings.status" ng-change="saveCMDBEntry(nat64Settings)"><label for="nat64-forwarding-toggle"></label></div><div f-menu-item-submenu="$parent.virtualWireMenu" ng-if="isVirtualWirePolicy" title="{{\'virtual_wire_pair\' | lang}}"><f-icon class="ftnt-virtual-wire-pair"></f-icon><span>{{vwp.current}}</span></div><div f-pop-up-menu="$parent.virtualWireMenu" ng-if="isVirtualWirePolicy"><div ng-repeat="name in vwp.all" f-menu-item-button click="vwp.setCurrent(name)" selected="name === vwp.current"><f-icon class="ftnt-virtual-wire-pair"></f-icon><span>{{name}}</span></div></div><div class="radio-buttons" ng-if="viewType.supported"><div class="menu-item" ng-if="!viewType.supportInterfacePairView"><button class="disabled" type="button" f-tip-target>{{\'Interface Pair View\' | lang}}<div f-tip>{{\'disable_interface_view\' | lang}}<ul><li f-lang="disable_reason1"></li><li f-lang="disable_reason2"></li></ul></div></button></div><div f-menu-item-button ng-if="viewType.supportInterfacePairView" selected="viewType.value === viewType.VIEW_TYPE.INTERFACE_PAIR" click="viewType.set(viewType.VIEW_TYPE.INTERFACE_PAIR)" enabled="viewType.supportInterfacePairView">{{\'Interface Pair View\' | lang}}</div><div f-menu-item-button selected="viewType.value === viewType.VIEW_TYPE.SEQUENTIAL" click="viewType.set(viewType.VIEW_TYPE.SEQUENTIAL)">{{\'By Sequence\' | lang}}</div></div></div></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_action.html","<div f-menu-item-submenu=\"actionSubmenu\">{{::'action' | lang}}</div><div f-pop-up-menu=\"actionSubmenu\"><div f-menu-item-button click=\"setSimpleValue('action', 'accept')\" enabled=\"simpleValueSetterEnabled('action', 'accept')\" ng-if=\"policyType !== 'central-snat-map' || !isNgfwPolicyMode\"><f-icon class=\"fa-accepted\"></f-icon>{{::'accept' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('action', 'permit')\" enabled=\"simpleValueSetterEnabled('action', 'permit')\" ng-if=\"policyType === 'central-snat-map' && isNgfwPolicyMode\"><f-icon class=\"fa-accepted\"></f-icon>{{::'permit' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('action', 'deny')\" enabled=\"simpleValueSetterEnabled('action', 'deny')\"><f-icon class=\"fa-denied\"></f-icon>{{::'deny' | lang}}</div></div>"),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_logtraffic.html","<div f-menu-item-submenu=\"logSubmenu\" ng-show=\"showLogSubmenu()\">{{'field_logtraffic' | lang}}</div><div f-pop-up-menu=\"logSubmenu\"><div ng-show=\"implicitPolicySelected\"><div f-menu-item-button click=\"setImplicitLog('enable')\"><f-icon class=\"fa-enabled\"></f-icon>{{'enable' | lang}}</div><div f-menu-item-button click=\"setImplicitLog('disable')\"><f-icon class=\"fa-disabled\"></f-icon>{{'disable' | lang}}</div></div><div f-with=\"['policy', 'policy6', 'proxy-policy'].indexOf(policyType) >= 0 as utmPolicy\" ng-hide=\"implicitPolicySelected\"><div f-menu-item-button click=\"setSimpleValue('logtraffic', 'all')\" enabled=\"simpleValueSetterEnabled('logtraffic', 'all')\" ng-show=\"utmPolicy\"><f-icon class=\"fa-enabled\"></f-icon>{{'all' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('logtraffic', 'utm', {action: ['accept', 'ipsec']})\" enabled=\"simpleValueSetterEnabled('logtraffic', 'utm', {action: ['accept', 'ipsec']})\" ng-show=\"utmPolicy\"><f-icon class=\"fa-shield\"></f-icon>{{'UTM' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('logtraffic', 'enable')\" enabled=\"simpleValueSetterEnabled('logtraffic', 'enable')\" ng-hide=\"utmPolicy\"><f-icon class=\"fa-enabled\"></f-icon>{{'enable' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('logtraffic', 'disable')\" enabled=\"simpleValueSetterEnabled('logtraffic', 'disable')\"><f-icon class=\"fa-disabled\"></f-icon>{{'disable' | lang}}</div></div></div>"),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_nat.html","<div f-menu-item-submenu=\"natSubmenu\" ng-show=\"policyType != 'policy64' && policyType != 'policy46'\">{{'field_' + selector | lang}}</div><div f-pop-up-menu=\"natSubmenu\"><div f-menu-item-button click=\"setSimpleValue(selector, 'enable', {action: 'accept'})\" enabled=\"simpleValueSetterEnabled(selector, 'enable', {action: 'accept'})\" ng-if=\"!isNgfwPolicyMode && policyType !== 'central-snat-map'\"><f-icon class=\"fa-enabled\"></f-icon>{{:: 'enable' | lang}}</div><div f-menu-item-button click=\"setSimpleValue(selector, 'disable')\" enabled=\"simpleValueSetterEnabled(selector, 'disable', {action: 'accept'})\" ng-if=\"!isNgfwPolicyMode && policyType !== 'central-snat-map'\"><f-icon class=\"fa-disabled\"></f-icon>{{:: 'disable' | lang}}</div><div f-menu-item-button click=\"setSimpleValue(selector, 'enable')\" enabled=\"simpleValueSetterEnabled(selector, 'enable')\" ng-if=\"isNgfwPolicyMode && policyType !== 'policy'\"><f-icon class=\"fa-enabled\"></f-icon>{{:: 'enable' | lang}}</div><div f-menu-item-button click=\"setSimpleValue(selector, 'disable')\" enabled=\"simpleValueSetterEnabled(selector, 'disable')\" ng-if=\"isNgfwPolicyMode && policyType !== 'policy'\"><f-icon class=\"fa-disabled\"></f-icon>{{:: 'disable' | lang}}</div><div f-menu-item-button click=\"editCentralSNAT()\" ng-if=\"isNgfwPolicyMode && policyType === 'policy'\"><f-icon class=\"fa-pencil\"></f-icon>{{:: 'Edit in Central SNAT' | lang}}</div></div>"),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_object.html",'<div f-menu-item-button click="selectObjects($event)" ng-if="selectEntriesEnabled"><f-icon class="fa-list"></f-icon><span>{{::\'Select Entries\' | lang}}</span></div><div class="heading" ng-show="menu.firewallObject">{{getObjectLangKey() | lang}}</div><div f-menu-item-button click="editObject()" ng-show="editObjectEnabled"><f-icon class="fa-pencil"></f-icon><span>{{::\'edit\' | lang}}</span></div><div f-menu-item-button click="showReferences()" ng-show="menu.firewallObject && !exemptFromShowReference()"><f-icon class="ftnt-view"></f-icon><span>{{::\'usage\' | lang}}</span></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_seq.html",'<div class="heading">{{::\'Policy\' | lang}}</div><div><div f-menu-item-button click="copyPolicy()" enabled="!menu.lastSelectedEntry.implicit && menu.entries.length === 1"><f-icon class="fa-files-o"></f-icon><span>{{::\'copy\' | lang}}</span></div><div f-menu-item-submenu="pasteSubmenu" enabled="policyBuffer && menu.entries.length === 1"><f-icon class="fa-clipboard"></f-icon><span>{{::\'paste\' | lang}}</span></div><div f-pop-up-menu="pasteSubmenu"><div f-menu-item-button click="pastePolicy(true)"><f-icon class="fa-angle-up"></f-icon><span>{{::\'above\' | lang}}</span></div><div f-menu-item-button click="pastePolicy(false)" enabled="!implicitPolicySelected"><f-icon class="fa-angle-down"></f-icon><span>{{::\'below\' | lang}}</span></div></div><div f-menu-item-submenu="insertSubmenu" enabled="menu.entries.length === 1" ng-show="insertEnabled[policyType]"><f-icon class="fa-plus"></f-icon><span>{{::\'Insert Empty Policy\' | lang}}</span></div><div f-pop-up-menu="insertSubmenu"><div f-menu-item-button click="insertPolicy(true)"><f-icon class="fa-angle-up"></f-icon><span>{{::\'above\' | lang}}</span></div><div f-menu-item-button click="insertPolicy(false)" enabled="!implicitPolicySelected"><f-icon class="fa-angle-down"></f-icon><span>{{::\'below\' | lang}}</span></div></div><div f-menu-item-button click="cloneReverse()" enabled="cloneReverseEnabled()" ng-show="policyType !== \'policy46\'"><f-icon class="ftnt-clone"></f-icon><span>{{::\'Clone Reverse\' | lang}}</span></div><div f-menu-item-button click="renamePolicy()" enabled="!implicitPolicySelected && menu.entries.length === 1" ng-show="[\'policy\', \'policy6\'].indexOf(policyType) >= 0"><f-icon class="fa-font"></f-icon><span>{{::\'Rename Policy\' | lang}}</span></div><f-mutable-insert-sequence-grouping></f-mutable-insert-sequence-grouping></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_stats.html",'<div f-menu-item-button click="policyStats.update(qlistSource)"><f-icon class="fa-refresh"></f-icon>{{\'Update Statistics\' | lang}}</div><div f-menu-item-button click="policyStats.clearCounters(menu.entries, qlistSource)" ng-show="menu.columnSelector != \'active_sessions\'"><f-icon class="ftnt-purge"></f-icon>{{\'clear_counters\' | lang}}</div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/menu_items_status.html","<div f-menu-item-submenu=\"statusSubmenu\">{{::'Policy Status' | lang}}</div><div f-pop-up-menu=\"statusSubmenu\"><div f-menu-item-button click=\"setSimpleValue('status', 'enable')\" enabled=\"simpleValueSetterEnabled('status', 'enable')\"><f-icon class=\"fa-enabled\"></f-icon>{{::'enable' | lang}}</div><div f-menu-item-button click=\"setSimpleValue('status', 'disable')\" enabled=\"simpleValueSetterEnabled('status', 'disable')\"><f-icon class=\"fa-disabled\"></f-icon>{{::'disable' | lang}}</div></div>"),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/partials/name-dialog.html",'<div class="dialog"><ng-form name="dialogForm"><section><div class="field"><label for="policy-name">{{ \'Policy Name\' | lang }}</label><div><input id="policy-name" type="text" ng-model="model.name" ng-required="namedPolicyRequired" f-max-length="maxNameLength" f-is-unique="[{path: \'firewall\', name: \'policy\'}, {path: \'firewall\', name: \'policy6\'},\n                                         \'$value === model.originalName\', \'$value === \\\'\\\'\']" f-validation-message></div></div></section></ng-form></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/advanced.html",'<div class="section-title"><h2>{{:: \'advanced\' | lang }}</h2></div><section><div class="field"><label><span class="toggle-label"><span>{{:: \'Block Notification\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-block-notification" ng-model="policyDialog.policy[\'block-notification\']" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-block-notification"></label></span></label></div><div class="field"><label><span class="toggle-label"><span>{{:: \'wccp\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-wccp" ng-model="policyDialog.policy.wccp" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-wccp"></label></span></label></div><div class="field"><label><span class="toggle-label"><span>{{:: \'Exempt from Captive Portal\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-captive-portal-exempt" ng-model="policyDialog.policy[\'captive-portal-exempt\']" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-captive-portal-exempt"></label></span></label></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/authentication.html",""),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/identity-based-policy-menu.html",""),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/identity-based-policy-modal.html",""),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/identity-based-policy.html",""),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/log-options.html",'<div class="section-title" ng-if="!ctrl.policy.isNatPolicy &&\n            !ctrl.policy.isMulticastPolicy &&\n            !ctrl.policy.implicit &&\n            ctrl.policy.action !== \'deny\'"><h2>{{:: \'log_options\' | lang }}</h2></div><label class="section-title" ng-if="ctrl.policy.isNatPolicy ||\n              ctrl.policy.isMulticastPolicy ||\n              (ctrl.policy.implicit &&\n               ctrl.policy.isProxyPolicy) ||\n              ctrl.policy.action === \'deny\'"><input type="checkbox" class="toggle-switch" id="chk-log-enabled-{{ ctrl.modalDialog }}" ng-model="ctrl.policy.logTrafficConfig.enabled" ng-disabled="ctrl.policy.logTrafficConfig.isOverriddenByCSF"><label for="chk-log-enabled-{{ ctrl.modalDialog }}"></label><h2 ng-if="(ctrl.policy.isNatPolicy ||\n                ctrl.policy.isMulticastPolicy ||\n                (ctrl.policy.implicit &&\n                 ctrl.policy.isProxyPolicy)) &&\n               ctrl.policy.action !== \'deny\'">{{:: \'log_allow\' | lang }}</h2><h2 ng-if="ctrl.policy.action === \'deny\'">{{:: \'log_deny\' | lang }}</h2><span f-tip-target ng-if="ctrl.policy.logTrafficConfig.isOverriddenByCSF"><f-icon class="fa-help-info"></f-icon><div f-tip>{{:: \'Security Fabric is enabled so logging will exempt traffic from downstream FortiGates.\' | lang }}</div></span></label><section><div ng-if="!ctrl.policy.isNatPolicy &&\n                !ctrl.policy.isMulticastPolicy &&\n                !ctrl.policy.implicit &&\n                ctrl.policy.action !== \'deny\'" class="field"><label><span class="toggle-label"><span>{{:: \'log_allow\' | lang }} <span f-tip-target ng-if="ctrl.policy.logTrafficConfig.isOverriddenByCSF"><f-icon class="fa-help-info"></f-icon><div f-tip>{{:: \'Security Fabric is enabled so logging will exempt traffic from downstream FortiGates.\' | lang }}</div></span></span><input type="checkbox" class="toggle-switch" id="chk-log-enabled-{{ ctrl.modalDialog }}" ng-model="ctrl.policy.logTrafficConfig.enabled" ng-disabled="ctrl.policy.logTrafficConfig.isOverriddenByCSF"><label for="chk-log-enabled-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.policy.logTrafficConfig.enabled"><div class="radio-group"><input type="radio" ng-repeat-start="opt in [\'utm\', \'all\']" value="{{ opt }}" id="radio-logtraffic-{{ opt }}-{{ ctrl.modalDialog }}" ng-model="ctrl.policy.logtraffic" ng-disabled="ctrl.policy.logTrafficConfig.isOverriddenByCSF"><label ng-repeat-end for="radio-logtraffic-{{ opt }}-{{ ctrl.modalDialog }}">{{:: \'log_\' + opt + \'_events\' | lang }}</label></div></div></div><div ng-if="ctrl.policy.logTrafficConfig.supportLogtrafficStart &&\n                !ctrl.policy.logTrafficConfig.isOverriddenByCSF" ng-show="(ctrl.policy.logTrafficConfig.enabled ||\n                  ctrl.policy[\'logtraffic-start\'] === \'enable\') &&\n                  ctrl.policy.action !== \'deny\'" class="field"><label><span class="toggle-label"><span>{{:: \'on_session_start\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-logtraffic-start-{{ ctrl.modalDialog }}" ng-model="ctrl.policy[\'logtraffic-start\']" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-logtraffic-start-{{ ctrl.modalDialog }}"></label></span></label></div><div ng-if="ctrl.policy.logTrafficConfig.supportPacketCapture &&\n                !ctrl.policy.logTrafficConfig.isOverriddenByCSF" ng-show="ctrl.policy.logTrafficConfig.enabled &&\n                  ctrl.policy.action !== \'deny\' &&\n                  !ctrl.policy.isSSLVPNInterface()" class="field"><label><span class="toggle-label"><span>{{:: \'capture_packets\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-capture-packet-{{ ctrl.modalDialog }}" ng-model="ctrl.policy[\'capture-packet\']" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-capture-packet-{{ ctrl.modalDialog }}"></label></span></label></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/multicast.html",'<section><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode" ng-show="policyDialog.policy.action == \'accept\'"><label><span class="toggle-label"><span>{{:: \'snatenable\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-enable-snat" ng-model="policyDialog.policy.snat" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-enable-snat"></label></span></label></div><div class="field"><label>{{:: \'protocol\' | lang }}</label><div class="wrappable"><select ng-model="policyDialog.policy.protocol" ng-options="protocol.id as protocol.name for protocol in policyDialog.select.protocol.options"></select><input type="number" min="{{policyDialog.policy.$schema.children.protocol[\'min-value\']}}" max="{{policyDialog.policy.$schema.children.protocol[\'max-value\']}}" ng-model="policyDialog.policy.otherProtocol" ng-show="policyDialog.policy.protocol === -1" f-validation-message></div></div><div class="field" ng-show="policyDialog.policy.tcpOrUdpProtocol()"><label>{{:: \'Port Range\' | lang }}</label><div><input type="number" ng-model="policyDialog.policy[\'start-port\']" min="{{policyDialog.policy.$schema.children[\'start-port\'][\'min-value\']}}" max="{{policyDialog.policy.$schema.children[\'start-port\'][\'max-value\']}}" f-validation-message> <span>-</span> <input type="number" ng-model="policyDialog.policy[\'end-port\']" min="{{policyDialog.policy[\'start-port\']}}" max="{{policyDialog.policy.$schema.children[\'end-port\'][\'max-value\']}}" f-validation-message></div></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/nat_options.html",'<div class="section-title" ng-show="[\'accept\', \'learn\'].indexOf(policyDialog.policy.action) >= 0" ng-if="!policyDialog.guiVisibility.isTransparentMode ||\n             policyDialog.guiVisibility.wanOptEnabled ||\n             policyDialog.policy.policyType === \'policy\' &&\n             state.carrier_mode"><h2>{{:: \'fw_options\' | lang }}</h2></div><section ng-if="state.isNgfwPolicyMode() &&\n    (policyDialog.policy.policyType === \'policy\')"><f-ngfw-nat-options></f-ngfw-nat-options></section><section ng-if="!state.isNgfwPolicyMode() ||\n    (policyDialog.policy.policyType !== \'policy\')"><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode" ng-show="[\'accept\', \'learn\'].indexOf(policyDialog.policy.action) >= 0"><label><span class="toggle-label"><span>{{:: \'natenable\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-enable-nat" ng-model="policyDialog.policy.nat" ng-true-value="\'enable\'" ng-false-value="\'disable\'" ng-disabled="policyDialog.policy.isNatPolicy"><label for="chk-enable-nat"></label></span></label></div><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode &&\n                policyDialog.guiVisibility.showNatPool" ng-show="policyDialog.policy.actionValidForIPPool() &&\n                  policyDialog.policy.nat === \'enable\'"><label>{{:: \'IP Pool Configuration\' | lang }}</label><div><div class="radio-group"><input type="radio" id="radio-dstintf-addr" value="disable" ng-model="policyDialog.policy.ippool"><label for="radio-dstintf-addr">{{:: \'natdstintf\' | lang }}</label><input type="radio" id="radio-nat-pool" value="enable" ng-model="policyDialog.policy.ippool"><label for="radio-nat-pool">{{:: \'natpool\' | lang }}</label></div></div></div><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode &&\n                policyDialog.guiVisibility.showNatPool" ng-show="policyDialog.policy.actionValidForIPPool() &&\n                  policyDialog.policy.nat === \'enable\' &&\n                  policyDialog.policy.ippool === \'enable\'"><label></label><div f-omniselect="policyDialog.select.poolname" ng-model="policyDialog.policy.poolname" f-validation-message ng-required="policyDialog.policy.ippool === \'enable\'"></div></div><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode &&\n                policyDialog.guiVisibility.showFixedPort" ng-show="policyDialog.policy.actionValidForIPPool() &&\n                  policyDialog.policy.nat === \'enable\' &&\n                  (policyDialog.policy.ippool === \'enable\' ||\n                   policyDialog.policy.fixedport === \'enable\')"><label><span class="toggle-label"><span>{{:: \'Preserve Source Port\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-enable-fixedport" ng-model="policyDialog.policy.fixedport" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-enable-fixedport"></label></span></label></div><div class="field" ng-if="!policyDialog.guiVisibility.isTransparentMode &&\n                policyDialog.guiVisibility.showUseDstIntfAddrOnly" ng-show="policyDialog.policy.actionValidForIPPool() &&\n                  policyDialog.policy.nat === \'enable\'"><label><span class="toggle-label"><span>{{:: \'natdstintf\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-dstintf-addr" ng-model="policyDialog.policy.ippool" ng-true-value="\'disable\'" ng-false-value="\'enable\'" disabled="disabled"><label for="chk-dstintf-addr"></label></span></label></div><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled" ng-show="policyDialog.policy.action === \'accept\'"><label><span class="toggle-label"><span>{{:: \'webcache\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-enable-webcache" ng-model="policyDialog.policy.webcache" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-enable-webcache"></label></span></label></div><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled &&\n                policyDialog.dependencies.wanopt.read" ng-show="policyDialog.policy.action === \'accept\'"><label><span class="toggle-label"><span><span>{{:: \'enable_wan_optimization\' | lang }}</span> <span f-tip-target ng-show="policyDialog.policy.$$original.wanopt === \'enable\' &&\n                                   !policyDialog.guiVisibility.wanOpt.peerConfigured"><f-icon class="fa-warning"></f-icon><div f-tip>{{:: \'wanopt_missing_peer_authgroup_config_warning\' | lang }}</div></span></span><input type="checkbox" class="toggle-switch" id="chk-enable-wanopt" ng-model="policyDialog.policy.wanopt" ng-true-value="\'enable\'" ng-false-value="\'disable\'" ng-disabled="policyDialog.policy.$$original.wanopt !== \'enable\' &&\n                                 !policyDialog.guiVisibility.wanOpt.peerConfigured"><label for="chk-enable-wanopt"></label></span></label><div ng-show="policyDialog.policy.wanopt === \'enable\'"><div class="radio-group"><input type="radio" id="radio-wanopt-active" value="active" ng-model="policyDialog.policy[\'wanopt-detection\']"><label for="radio-wanopt-active">{{:: \'active\' | lang }}</label><input type="radio" id="radio-wanopt-passive" value="passive" ng-model="policyDialog.policy[\'wanopt-detection\']"><label for="radio-wanopt-passive">{{:: \'pasv\' | lang }}</label><input type="radio" id="radio-wanopt-manual" value="off" ng-model="policyDialog.policy[\'wanopt-detection\']"><label for="radio-wanopt-manual">{{:: \'wanopt_manual\' | lang }}</label></div></div></div><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled &&\n                policyDialog.dependencies.wanopt.read" ng-show="policyDialog.policy.wanopt === \'enable\' &&\n                  policyDialog.policy[\'wanopt-detection\'] !== \'passive\' &&\n                  policyDialog.policy.action === \'accept\'"><label>{{:: \'wanopt_profile\' | lang }}</label><div f-omniselect="policyDialog.select[\'wanopt-profile\']" ng-model="policyDialog.policy[\'wanopt-profile\']" f-validation-message ng-required="policyDialog.policy.wanopt === \'enable\' &&\n                         policyDialog.policy[\'wanopt-detection\'] !== \'passive\' &&\n                         policyDialog.policy.action === \'accept\'"></div></div><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled" ng-show="policyDialog.policy.wanopt === \'enable\' &&\n                  policyDialog.policy[\'wanopt-detection\'] === \'off\' &&\n                  policyDialog.policy.action === \'accept\'"><label>{{:: \'wanopt_peer\' | lang }}</label><div f-omniselect="policyDialog.select[\'wanopt-peer\']" ng-model="policyDialog.policy[\'wanopt-peer\']" f-validation-message ng-required="policyDialog.policy.wanopt === \'enable\' &&\n                         policyDialog.policy[\'wanopt-detection\'] === \'off\' &&\n                         policyDialog.policy.action === \'accept\'"></div></div><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled &&\n                policyDialog.dependencies.wanopt.read" ng-show="policyDialog.policy.wanopt === \'enable\' &&\n                  policyDialog.policy[\'wanopt-detection\'] === \'passive\' &&\n                  policyDialog.policy.action === \'accept\'"><label>{{:: \'wanopt_passive_opt\' | lang }}</label><div><div class="radio-group"><input type="radio" id="radio-wanoptpassive-default" value="default" ng-model="policyDialog.policy[\'wanopt-passive-opt\']"><label for="radio-wanoptpassive-default">{{:: \'default\' | lang }}</label><input type="radio" id="radio-wanoptpassive-non-transparent" value="non-transparent" ng-model="policyDialog.policy[\'wanopt-passive-opt\']"><label for="radio-wanoptpassive-non-transparent">{{:: \'Non-transparent\' | lang }}</label><input type="radio" id="radio-wanoptpassive-transparent" value="transparent" ng-model="policyDialog.policy[\'wanopt-passive-opt\']"><label for="radio-wanoptpassive-transparent">{{:: \'transparent\' | lang }}</label></div></div></div><div class="field" ng-if="policyDialog.policy.policyType === \'policy\' &&\n                state.carrier_mode" ng-show="[\'deny\', \'learn\'].indexOf(policyDialog.policy.action) < 0"><label><span class="toggle-label"><span>{{:: \'gtp_profile\' | lang}}</span> <input type="checkbox" class="toggle-switch" id="chk-gtp-profile" ng-model="policyDialog.guiVisibility[\'gtp-profile\']"><label for="chk-gtp-profile"></label></span></label><div f-omniselect="policyDialog.select.gtp" ng-model="policyDialog.policy[\'gtp-profile\']" f-validation-message ng-required="policyDialog.guiVisibility[\'gtp-profile\']" ng-show="policyDialog.guiVisibility[\'gtp-profile\']"></div></div></section>'),
$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/ngfw-nat-options.html",'<div class="info-message"><f-icon class="fa-help-info"></f-icon><div class="message-content"><p ng-bind-html="$ctrl.ngfwNatMsg"></p></div></div>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/policy-dialog.html",'<f-dialog dialog-title="policyDialog.dialogTitle | lang" form="policyDialog.form" submit="policyDialog.submit()" loading="policyDialog.loading" read-only="policyDialog.readOnly"><div ng-if="!policyDialog.loading"><section><div class="warning-message" ng-if="policyDialog.policy.isProxyPolicy &&\n                    !policyDialog.guiVisibility.proxyEnabled.web &&\n                    !policyDialog.guiVisibility.proxyEnabled.ftp"><f-icon class="fa-warning"></f-icon><label class="message-content"><a href="/ng/network/explicit-proxy">{{:: \'ProxyPolicy::proxyConfig.disabled\' | lang }}</a></label></div></section><section><div ng-if="state.featureEnabled(\'gui-advanced-policy\') &&\n                    !policyDialog.policy.implicit &&\n                    !policyDialog.policy.isMulticastPolicy &&\n                    !policyDialog.policy.isProxyPolicy" class="field"><label>{{:: \'ID\' | lang }}</label><div f-with="policyDialog.policy.$schema.children.policyid as policyIdSchema"><span ng-if="!policyDialog.policy.isNew">{{:: policyDialog.policy.policyid }} </span><input ng-if="policyDialog.policy.isNew" type="number" min="{{ policyIdSchema[\'min-value\'] }}" max="{{ policyIdSchema[\'max-value\'] }}" ng-model="policyDialog.policy.policyid" name="policyid" f-validation-message f-is-unique="policyDialog.uniquePolicyidParams" required></div></div><div class="field" ng-if="!policyDialog.policy.implicit &&\n                    !policyDialog.policy.isNatPolicy &&\n                    !policyDialog.policy.isMulticastPolicy &&\n                    !policyDialog.policy.isProxyPolicy"><label><span>{{:: \'name\' | lang }}</span><f-icon class="fa-help-info" f-tip><span>{{:: \'firewall_policy_name_description\' | lang }}</span></f-icon></label><div><input type="text" f-max-length="35" ng-required="!state.featureEnabled(\'gui-allow-unnamed-policy\')" ng-model="policyDialog.policy.name" f-is-unique="[{path: \'firewall\', name: \'policy\'}, {path: \'firewall\', name: \'policy6\'},\n                                  \'$value === policyDialog.policy.$original.name\', \'$value === \\\'\\\'\']" f-validation-message></div></div><div class="field" ng-if="policyDialog.policy.isProxyPolicy &&\n                    !policyDialog.policy.implicit"><label><span>{{:: \'Proxy Type\' | lang }}</span> <span f-tip-target ng-show="policyDialog.policy.proxy === \'transparent-web\'"><f-icon class="fa-help-info"></f-icon><div f-tip>{{:: \'proxy_policy_transparent_web_info\' | lang }}</div></span></label><div><div class="radio-group"><input type="radio" ng-repeat-start="type in policyDialog.proxyTypes" value="{{ type.name }}" id="radio-type-{{ type.name }}" ng-model="policyDialog.policy.proxy" ng-change="policyDialog.broadcastEvent(\'proxyTypeChanged\')" ng-disabled="type.disabled" required><label ng-repeat-end for="radio-type-{{ type.name }}">{{:: type.text | lang }}</label></div></div></div><div class="field" ng-if="policyDialog.policy.isProxyPolicy &&\n                    !policyDialog.policy.implicit &&\n                    (policyDialog.policy.proxy === \'explicit-web\' ||\n                     policyDialog.policy.proxy === \'ftp\')"><label><span>{{:: \'enabled_on\' | lang }}</span> <span f-tip-target><f-icon class="fa-help-info"></f-icon><div f-tip ng-if="policyDialog.policy.proxy === \'explicit-web\'">{{:: \'err_proxy_intf\' | lang }}</div><div f-tip ng-if="policyDialog.policy.proxy === \'ftp\'">{{:: \'ftp_proxy_err_intf\' | lang }}</div></span></label><div><span ng-repeat="intf in policyDialog.policy.listenOnInterfaces[policyDialog.policy.proxy]" ng-show="policyDialog.policy.listenOnInterfaces[policyDialog.policy.proxy].length"><f-icon class="{{ intf.icon }}"></f-icon><span>{{ intf.name }}</span> </span><span ng-show="!policyDialog.policy.listenOnInterfaces[policyDialog.policy.proxy].length">{{:: \'None\' | lang }}</span></div></div><div class="field" ng-if="!policyDialog.policy.isVirtualWire &&\n                    (!policyDialog.policy.isProxyPolicy ||\n                     policyDialog.policy.proxy === \'transparent-web\')"><label><span>{{:: \'in-interface\' | lang }}</span><span f-tip-target ng-show="policyDialog.dialogContext.sslvpn_using_default_server_crt &&\n                                 policyDialog.policy.isSSLVPNInterface()"><f-icon class="fa-warning"></f-icon><div f-tip>{{:: \'sslvpn_default_certificate_warning\' | lang }}</div></span></label><div f-omniselect="policyDialog.select.srcintf" ng-model="policyDialog.policy.srcintf" required change-event="srcintfChanged" re-process-on="\'actionChanged\'" disabled="policyDialog.policy.implicit" f-validation-message></div></div><div class="field" ng-if="!policyDialog.policy.isVirtualWire"><label>{{:: \'out-interface\' | lang }}</label><div f-omniselect="policyDialog.select.dstintf" ng-model="policyDialog.policy.dstintf" required change-event="dstintfChanged" re-process-on="[\'srcintfChanged\', \'actionChanged\']" disabled="policyDialog.policy.implicit" f-validation-message></div></div><div class="field" ng-if="policyDialog.policy.isVirtualWire"><label>{{:: \'virtual_wire_pair\' | lang }}</label><div><span>{{::policyDialog.vwp.currentInterfaces[0]}}</span><div class="radio-group vertical" title="{{:: \'Switch direction\' | lang }}"><input type="radio" name="vwp-direction" id="vwp-direction-right" ng-value="policyDialog.directions.FORWARD" ng-model="policyDialog.policy.virtualWireDirection"><label for="vwp-direction-right">&nbsp;<f-icon class="fa-long-arrow-right"></f-icon>&nbsp;</label><input type="radio" name="vwp-direction" id="vwp-direction-left" ng-value="policyDialog.directions.BACKWARD" ng-model="policyDialog.policy.virtualWireDirection"><label for="vwp-direction-left"><f-icon class="fa-long-arrow-left"></f-icon></label><input type="radio" name="vwp-direction" id="vwp-direction-bidirection" ng-value="policyDialog.directions.BIDIRECTION" ng-model="policyDialog.policy.virtualWireDirection"><label for="vwp-direction-bidirection"><f-icon class="fa-exchange"></f-icon></label></div><span>{{::policyDialog.vwp.currentInterfaces[1]}}</span></div></div><div class="field" ng-if="!policyDialog.policy.isNatPolicy &&\n                    !policyDialog.policy.isMulticastPolicy"><label><span>{{:: \'source\' | lang }}</span> <span f-tip-target ng-show="policyDialog.policy[\'srcaddr-negate\'] == \'enable\'"><f-icon class="fa-negate"></f-icon><div f-tip>{{:: \'{SELECTION} is negated\' | lang :[policyDialog.lang(\'src_addr\')] }}</div></span></label><div f-omniselect="policyDialog.select.source" name="source" ng-model="policyDialog.policy.source" ng-if="!policyDialog.policy.isProxyPolicy" required re-process-on="[\'srcintfChanged\', \'actionChanged\']" disabled="policyDialog.policy.implicit" f-require-address f-require-user-groups="policyDialog.policy.isSSLVPNInterface()" f-validation-message></div><div f-omniselect="policyDialog.select[\'proxy-source\']" ng-model="policyDialog.policy[\'proxy-source\']" ng-if="policyDialog.policy.isProxyPolicy" disabled="policyDialog.policy.implicit" re-process-on="\'proxyTypeChanged\'" required f-require-address f-validation-message></div><label class="error" ng-show="policyDialog.form.source.$error.fRequireAddress">{{:: \'One address or address group is required\' | lang }}</label><label class="error" ng-show="policyDialog.form.source.$error.fRequireUserGroups">{{:: \'One user or group is required\' | lang }}</label></div><div class="field" ng-if="policyDialog.policy.isNatPolicy ||\n                    policyDialog.policy.isMulticastPolicy"><label><span>{{:: \'src_addr\' | lang }}</span> <span f-tip-target ng-show="policyDialog.policy[\'srcaddr-negate\'] == \'enable\'"><f-icon class="fa-negate"></f-icon><div f-tip>{{:: \'{SELECTION} is negated\' | lang :[policyDialog.lang(\'src_addr\')] }}</div></span></label><div f-omniselect="policyDialog.select.srcaddr" ng-model="policyDialog.policy.srcaddr" required re-process-on="\'srcintfChanged\'" f-validation-message ng-if="policyDialog.policy.isNatPolicy ||\n                       policyDialog.policy.isMulticastPolicy"></div></div><div class="field"><label><span ng-if="policyDialog.policy.policyType === \'policy\' ||\n                             policyDialog.policy.policyType === \'proxy-policy\'">{{:: \'Destination\' | lang }} </span><span ng-if="policyDialog.policy.policyType !== \'policy\' &&\n                             policyDialog.policy.policyType !== \'proxy-policy\'">{{:: \'dstaddr\' | lang }} </span><span f-tip-target ng-show="(policyDialog.policy[\'internet-service\'] !== \'enable\' &&\n                                policyDialog.policy[\'dstaddr-negate\'] == \'enable\') ||\n                               (policyDialog.policy[\'internet-service\'] === \'enable\' &&\n                                policyDialog.policy[\'internet-service-negate\'] == \'enable\')"><f-icon class="fa-negate"></f-icon><div f-tip><div ng-show="(policyDialog.policy[\'internet-service\'] !== \'enable\' &&\n                                       policyDialog.policy[\'dstaddr-negate\'] == \'enable\')">{{:: \'{SELECTION} is negated\' | lang :[policyDialog.lang(\'dstaddr\')] }}</div><div ng-show="(policyDialog.policy[\'internet-service\'] === \'enable\' &&\n                                       policyDialog.policy[\'internet-service-negate\'] == \'enable\')">{{:: \'{SELECTION} is negated\' | lang :[policyDialog.lang(\'Internet Service\')] }}</div></div></span></label><div f-omniselect="policyDialog.select.dstaddr" ng-model="policyDialog.policy.dstaddr" required name="dstaddr" re-process-on="[\'srcintfChanged\', \'dstintfChanged\']" f-single-address-type="policyDialog.policy.natType === \'64\'" restrict-types="{{ policyDialog.addressRestrictTypes }}" policy-type="{{ policyDialog.policy.policyType }}" disabled="policyDialog.policy.implicit" f-validation-message ng-if="!policyDialog.policy.isProxyPolicy && policyDialog.policy.policyType !== \'policy\'"></div><div f-omniselect="policyDialog.select.destination" ng-model="policyDialog.policy.destination" required name="destination" re-process-on="[\'srcintfChanged\', \'dstintfChanged\']" f-single-address-type="policyDialog.policy.policyType === \'policy\'" restrict-types="{{ policyDialog.addressRestrictTypes }}" policy-type="{{ policyDialog.policy.policyType }}" disabled="policyDialog.policy.implicit" f-validation-message f-validate-and-toggle-internet-service ng-if="!policyDialog.policy.isProxyPolicy && policyDialog.policy.policyType === \'policy\'"></div><div f-omniselect="policyDialog.select[\'proxy-destination\']" ng-model="policyDialog.policy[\'proxy-destination\']" ng-if="policyDialog.policy.isProxyPolicy" name="destination" f-single-address-type restrict-types="{{ policyDialog.addressRestrictTypes }}" policy-type="{{ policyDialog.policy.policyType }}" re-process-on="[\'dstintfChanged\', \'proxyTypeChanged\']" disabled="policyDialog.policy.implicit" required f-validation-message f-validate-and-toggle-internet-service></div><label class="error" ng-show="policyDialog.form.dstaddr.$error.fSingleAddressType ||\n                            policyDialog.form.destination.$error.fSingleAddressType">{{:: \'Addresses/groups cannot be mixed with Virtual IPs\' | lang }}</label><label class="error" ng-show="policyDialog.form.destination.$error.fValidateInternetService">{{:: \'Addresses/groups cannot be mixed with Internet services\' | lang }}</label></div><div class="field" ng-if="!policyDialog.policy.implicit &&\n                    !policyDialog.policy.isMulticastPolicy"><label>{{:: \'schedule\' | lang }}</label><div f-omniselect="policyDialog.select.schedule" ng-model="policyDialog.policy.schedule" required f-validation-message></div></div><div class="field" ng-if="!policyDialog.policy.implicit &&\n                    !policyDialog.policy.isMulticastPolicy &&\n                    (!policyDialog.policy.isProxyPolicy ||\n                     (policyDialog.policy.proxy === \'explicit-web\' ||\n                      policyDialog.policy.proxy === \'transparent-web\') &&\n                     policyDialog.guiVisibility.service) &&\n                    policyDialog.policy[\'internet-service\'] !== \'enable\'"><label><span>{{:: \'Service\' | lang }}</span> <span f-tip-target ng-show="policyDialog.policy[\'service-negate\'] == \'enable\'"><f-icon class="fa-negate"></f-icon><div f-tip>{{:: \'{SELECTION} is negated\' | lang :[policyDialog.lang(\'Service\')] }}</div></span></label><div f-omniselect="policyDialog.select.service" ng-model="policyDialog.policy.service" required f-validation-message></div></div><div class="field" ng-if="(policyDialog.policy.policyType === \'policy\' ||\n                     policyDialog.policy.policyType === \'policy6\') &&\n                    !policyDialog.policy.implicit &&\n                    policyDialog.policy.action !== \'learn\' &&\n                    state.isNgfwPolicyMode()"><label><span>{{:: \'Application\' | lang }}</span></label><div f-omniselect="policyDialog.select.applications" re-process-on="\'urlCategoryChanged\'" ng-model="policyDialog.policy.applications"></div></div><div class="field" ng-if="(policyDialog.policy.policyType === \'policy\' ||\n                     policyDialog.policy.policyType === \'policy6\') &&\n                    !policyDialog.policy.implicit &&\n                    policyDialog.policy.action !== \'learn\' &&\n                    state.isNgfwPolicyMode()"><label><span>{{:: \'URL Category\' | lang }}</span></label><div f-omniselect="policyDialog.select[\'url-category\']" change-event="urlCategoryChanged" ng-model="policyDialog.policy[\'url-category\']"></div></div><div class="field"><label>{{:: \'action\' | lang }}</label><div><div class="radio-group" ng-if="!policyDialog.policy.multipleAction"><input type="radio" ng-repeat-start="action in policyDialog.actions" value="{{ action.name }}" id="radio-action-{{ action.name }}" ng-disabled="policyDialog.policy.implicit" ng-model="policyDialog.policy.action" ng-change="policyDialog.broadcastEvent(\'actionChanged\')" required><label ng-repeat-end for="radio-action-{{ action.name }}"><f-icon class="{{action.iconClass}}"></f-icon><span>{{:: \'Firewall::policyAction.\' + action.name | lang }}</span></label></div><div ng-if="policyDialog.policy.multipleAction"><div ng-repeat="action in policyDialog.policy.actions"><span>{{:: action.title | lang }}:</span><f-icon class="{{action.value.iconClass}}"></f-icon><span>{{:: \'Firewall::policyAction.\' + action.value.name | lang }}</span></div></div></div></div></section><ng-include src="\'dialog/partials/nat_options.html\' | cache_path" ng-if="!policyDialog.policy.isVirtualWire &&\n               !policyDialog.policy.implicit &&\n               !policyDialog.policy.isMulticastPolicy &&\n               !policyDialog.policy.isProxyPolicy"></ng-include><ng-include src="\'dialog/partials/multicast.html\' | cache_path" ng-if="policyDialog.policy.isMulticastPolicy"></ng-include><ng-include src="\'dialog/partials/vpn_tunnel.html\' | cache_path" ng-if="policyDialog.policy.action === \'ipsec\'"></ng-include><f-proxy-disclaimer policy="policyDialog.policy" modal-dialog="policyDialog.modalDialog" select="policyDialog.select" gui-visibility="policyDialog.guiVisibility" ng-if="policyDialog.policy.isProxyPolicy"></f-proxy-disclaimer><f-utm-profiles policy="policyDialog.policy" modal-dialog="policyDialog.modalDialog" select="policyDialog.select" gui-visibility="policyDialog.guiVisibility" ng-if="(policyDialog.policy.action === \'accept\' ||\n                policyDialog.policy.action === \'ipsec\') &&\n               !policyDialog.policy.implicit &&\n               !policyDialog.policy.isNatPolicy &&\n               !policyDialog.policy.isMulticastPolicy"></f-utm-profiles><ng-include src="\'dialog/partials/proxy_policy_fw_options.html\' | cache_path" ng-if="policyDialog.policy.isProxyPolicy"></ng-include><ng-include src="\'dialog/partials/traffic_shaper.html\' | cache_path" ng-if="policyDialog.guiVisibility.showTrafficShaping &&\n               policyDialog.policy.action !== \'learn\'"></ng-include><f-log-options policy="policyDialog.policy" modal-dialog="policyDialog.modalDialog" select="policyDialog.select" gui-visibility="policyDialog.guiVisibility" ng-if="policyDialog.policy.logTrafficConfig.show &&\n               policyDialog.policy.action !== \'learn\'"></f-log-options><ng-include src="\'dialog/partials/advanced.html\' | cache_path" ng-if="policyDialog.policy.policyType === \'policy\' &&\n               state.featureEnabled(\'gui-advanced-policy\') &&\n               !policyDialog.policy.implicit"></ng-include><section ng-if="!policyDialog.policy.implicit &&\n                    !policyDialog.policy.isMulticastPolicy"><div class="field"><label>{{:: \'comment\' | lang }}</label><div><textarea rows="1" cols="58" class="comment" ng-model="policyDialog.policy.comments" ng-attr-placeholder="{{ \'comment_empty\' | lang}}" f-validation-message f-max-length="policyDialog.policy.$schema.children.comments.size" f-textarea>\n                </textarea></div></div></section><section ng-if="!policyDialog.policy.implicit"><div class="field"><label><span class="toggle-label"><span>{{:: \'enable_policy\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-policy-status" ng-model="policyDialog.policy.status" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-policy-status"></label></span></label></div><f-duplicate-check class="full-width-field" ng-if="!policyDialog.policy.isMulticastPolicy && !policyDialog.policy.isExplicitProxyPolicy" target="policyDialog.policy" id-key="policyid" datasource="firewall.{{policyDialog.policy.policyType}}" match-keys="{srcintf: true,\n                         dstintf: true,\n                         schedule: true,\n                         service: true,\n                         srcaddr: policyDialog.policySourceKeyFn,\n                         dstaddr: policyDialog.policy.policyType === \'policy6\' || policyDialog.policyDestinationKeyFn}" warning-label="{{:: \'This policy may be a duplicate of these existing policies:\' | lang }}"></f-duplicate-check></section></div></f-dialog>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/proxy-disclaimer.html",'<div class="section-title" ng-show="ctrl.policy.action === \'accept\' &&\n              (ctrl.policy.proxy === \'explicit-web\' ||\n               ctrl.policy.proxy === \'transparent-web\')"><h2>{{:: \'Disclaimer Options\' | lang }}</h2></div><section ng-show="ctrl.policy.action === \'accept\' &&\n                  (ctrl.policy.proxy === \'explicit-web\' ||\n                   ctrl.policy.proxy === \'transparent-web\')"><div class="field"><label>{{:: \'Display Disclaimer\' | lang}}</label><div><div class="radio-group"><input type="radio" ng-repeat-start="disclaimer in ctrl.policy.$schema.children.disclaimer.options" value="{{ disclaimer.name }}" id="radio-disclaimer-{{ disclaimer.name }}-{{ ctrl.modalDialog }}" ng-model="ctrl.policy.disclaimer" required><label ng-repeat-end for="radio-disclaimer-{{ disclaimer.name }}-{{ ctrl.modalDialog }}">{{:: \'disclaimer_\' + disclaimer.name | lang }}</label></div></div></div><div class="field" ng-show="ctrl.policy.disclaimer !== \'disable\'"><label><span class="toggle-label"><span>{{:: \'rep_authmsg\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-policy-repmsg-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility[\'replacemsg-override-group\']"><label for="chk-policy-repmsg-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility[\'replacemsg-override-group\']"><button type="button" ng-click="ctrl.editDisclaimer()"><f-icon class="fa-pencil"></f-icon><span>{{:: \'Edit Disclaimer Message\' | lang }}</span></button></div></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/proxy_policy_fw_options.html",'<div class="section-title" ng-show="policyDialog.policy.action !== \'deny\' &&\n              (policyDialog.policy.proxy === \'explicit-web\' ||\n               policyDialog.policy.proxy === \'transparent-web\')" ng-if="policyDialog.guiVisibility.wanOptEnabled"><h2>{{:: \'fw_options\' | lang }}</h2></div><section ng-show="policyDialog.policy.action !== \'deny\' &&\n                  (policyDialog.policy.proxy === \'explicit-web\' ||\n                   policyDialog.policy.proxy === \'transparent-web\')"><div class="field" ng-if="policyDialog.guiVisibility.wanOptEnabled"><label><span class="toggle-label"><span>{{:: \'Local web cache\' | lang }}</span><f-icon f-tip-target class="fa-help-info"><span f-tip>{{:: \'Cache on FortiGate disk\' | lang }}</span></f-icon><input type="checkbox" class="toggle-switch" id="chk-enable-webcache" ng-model="policyDialog.policy.webcache" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-enable-webcache"></label></span></label></div><div class="field" ng-if="policyDialog.policy.proxy !== \'transparent-web\'"><label><span class="toggle-label"><span>{{:: \'webproxy_server\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-webproxy-server" ng-model="policyDialog.guiVisibility[\'webproxy-forward-server\']"><label for="chk-webproxy-server"></label></span></label><div ng-show="policyDialog.guiVisibility[\'webproxy-forward-server\']" f-omniselect="policyDialog.select[\'webproxy-forward-server\']" ng-model="policyDialog.policy[\'webproxy-forward-server\']" ng-required="policyDialog.guiVisibility[\'webproxy-forward-server\'] &&\n                         policyDialog.policy.action !== \'deny\' &&\n                         policyDialog.policy.proxy === \'explicit-web\'" f-validation-message></div></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/traffic_shaper.html",'<div class="section-title" ng-show="policyDialog.policy.action !== \'deny\'"><h2>{{:: \'traffic\' | lang }}</h2></div><section ng-show="policyDialog.policy.action !== \'deny\'"><div ng-if="policyDialog.guiVisibility.trafficShapers.showTrafficShaper" class="field"><label><span class="toggle-label"><span>{{:: \'traffic_fwd\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-traffic-shaper" ng-model="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper\']"><label for="chk-traffic-shaper"></label></span></label><div f-omniselect="policyDialog.select[\'traffic-shaper\']" ng-model="policyDialog.policy[\'traffic-shaper\']" f-validation-message ng-show="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper\']" ng-required="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper\']"></div></div><div ng-if="policyDialog.guiVisibility.trafficShapers.showTrafficShaperReverse" class="field"><label><span class="toggle-label"><span>{{:: \'traffic_rev\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-traffic-shaper-reverse" ng-model="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper-reverse\']"><label for="chk-traffic-shaper-reverse"></label></span></label><div f-omniselect="policyDialog.select[\'traffic-shaper\']" ng-model="policyDialog.policy[\'traffic-shaper-reverse\']" f-validation-message ng-show="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper-reverse\']" ng-required="policyDialog.guiVisibility.trafficShapers[\'traffic-shaper-reverse\']"></div></div><div ng-if="policyDialog.guiVisibility.trafficShapers.showPerIPShaper" class="field"><label><span class="toggle-label"><span>{{:: \'traffic_perIP\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-per-ip-shaper" ng-model="policyDialog.guiVisibility.trafficShapers[\'per-ip-shaper\']"><label for="chk-per-ip-shaper"></label></span></label><div f-omniselect="policyDialog.select[\'per-ip-shaper\']" ng-model="policyDialog.policy[\'per-ip-shaper\']" f-validation-message ng-show="policyDialog.guiVisibility.trafficShapers[\'per-ip-shaper\']" ng-required="policyDialog.guiVisibility.trafficShapers[\'per-ip-shaper\']"></div></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/utm-profiles.html",'<div class="section-title"><h2>{{:: \'utm\' | lang }}</h2></div><section><div class="field" ng-if="ctrl.state.featureEnabled(\'gui-dynamic-profile-display\') ||\n                ctrl.policy[\'profile-type\'] === \'group\'"><label><span class="toggle-label"><span>{{:: \'utm_type_group\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-profile-group-{{ ctrl.modalDialog }}" ng-model="ctrl.policy[\'profile-type\']" ng-true-value="\'group\'" ng-false-value="\'single\'"><label for="chk-utm-profile-group-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.policy[\'profile-type\'] === \'group\'" f-omniselect="ctrl.select[\'profile-group\']" ng-model="ctrl.policy[\'profile-group\']" ng-required="ctrl.guiVisibility.utmProfiles.profileGroup &&\n                         ctrl.policy[\'profile-type\'] === \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-antivirus\')" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_av\' | lang}}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-av-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'av-profile\']"><label for="chk-utm-av-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'av-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'av-profile\']" ng-model="ctrl.policy[\'av-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'av-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-webfilter\') &&\n                !ctrl.state.isNgfwPolicyMode()" ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy" class="field"><label><span class="toggle-label"><span>{{:: \'utm_wf\' | lang}}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-wf-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'webfilter-profile\']"><label for="chk-utm-wf-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'webfilter-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'webfilter-profile\']" ng-model="ctrl.policy[\'webfilter-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'webfilter-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-dnsfilter\') &&\n                ctrl.policy.policyType === \'policy\' &&\n                !ctrl.policy.isProxyPolicy" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_dnsfilter\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-df-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'dnsfilter-profile\']"><label for="chk-utm-df-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'dnsfilter-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'dnsfilter-profile\']" ng-model="ctrl.policy[\'dnsfilter-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'dnsfilter-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" v-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-application-control\') &&\n                !ctrl.state.isNgfwPolicyMode()" ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy" class="field"><label><span class="toggle-label"><span>{{:: \'utm_app\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-app-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'application-list\']"><label for="chk-utm-app-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'application-list\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'application-list\']" ng-model="ctrl.policy[\'application-list\']" ng-required="ctrl.guiVisibility.utmProfiles[\'application-list\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-ips\')" ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy" class="field"><label><span class="toggle-label"><span>{{:: \'utm_ips\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-ips-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'ips-sensor\']"><label for="chk-utm-ips-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'ips-sensor\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'ips-sensor\']" ng-model="ctrl.policy[\'ips-sensor\']" ng-required="ctrl.guiVisibility.utmProfiles[\'ips-sensor\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-spamfilter\') &&\n                ctrl.guiVisibility.isProxyVdom &&\n                !ctrl.policy.isProxyPolicy" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_as\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-as-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'spamfilter-profile\']"><label for="chk-utm-as-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'spamfilter-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'spamfilter-profile\']" ng-model="ctrl.policy[\'spamfilter-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'spamfilter-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-dlp\') &&\n                ctrl.guiVisibility.isProxyVdom" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_dlp\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-dlp-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'dlp-sensor\']"><label for="chk-utm-dlp-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'dlp-sensor\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'dlp-sensor\']" ng-model="ctrl.policy[\'dlp-sensor\']" ng-required="ctrl.guiVisibility.utmProfiles[\'dlp-sensor\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-voip-profile\') &&\n                ctrl.guiVisibility.isProxyVdom &&\n                !ctrl.policy.isProxyPolicy" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_voip\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-voip-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'voip-profile\']"><label for="chk-utm-voip-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'voip-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'voip-profile\']" ng-model="ctrl.policy[\'voip-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'voip-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-icap\') &&\n                ctrl.guiVisibility.isProxyVdom" ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy" class="field"><label><span class="toggle-label"><span>{{:: \'utm_icap\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-icap-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'icap-profile\']"><label for="chk-utm-icap-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'icap-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'icap-profile\']" ng-model="ctrl.policy[\'icap-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'icap-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.featureEnabled(\'gui-waf-profile\') &&\n                ctrl.guiVisibility.isProxyVdom &&\n                (ctrl.policy.policyType === \'policy\' ||\n                 ctrl.policy.isProxyPolicy &&\n                 !ctrl.guiVisibility.ftpProxy)" ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy" class="field"><label><span class="toggle-label"><span>{{:: \'utm_waf\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-waf-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'waf-profile\']"><label for="chk-utm-waf-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'waf-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'waf-profile\']" ng-model="ctrl.policy[\'waf-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'waf-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-if="ctrl.state.carrier_mode &&\n                !ctrl.policy.isProxyPolicy" ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_mms\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-mms-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'mms-profile\']"><label for="chk-utm-mms-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'mms-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" f-omniselect="ctrl.select[\'mms-profile\']" ng-model="ctrl.policy[\'mms-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'mms-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-show="ctrl.policy[\'profile-type\'] !== \'group\'" class="field"><label><span class="toggle-label"><span>{{:: \'utm_proto\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-utm-protocol-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'profile-protocol-options\']" ng-disabled="ctrl.guiVisibility.proxyProfileSelected"><label for="chk-utm-protocol-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'profile-protocol-options\']" f-omniselect="ctrl.select[\'profile-protocol-options\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" ng-model="ctrl.policy[\'profile-protocol-options\']" ng-required="ctrl.guiVisibility.utmProfiles[\'profile-protocol-options\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\'" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy &&\n                  !ctrl.state.isNgfwPolicyMode()" class="field"><label><span class="toggle-label"><span><span ng-if="ctrl.BUILD.PLATFORM.HAVE_SSH_PROXY">{{:: \'ssl_ssh_inspection\' | lang }} </span><span ng-if="!ctrl.BUILD.PLATFORM.HAVE_SSH_PROXY">{{:: \'ssl_inspection\' | lang }} </span><span f-tip-target ng-show="ctrl.policy.hasDeepInspectionProfile()"><f-icon class="fa-warning"></f-icon><div f-tip>{{:: \'default_ca_warn\' | lang }}</div></span></span><input type="checkbox" class="toggle-switch" id="chk-ssl-ssh-profile-{{ ctrl.modalDialog }}" ng-model="ctrl.guiVisibility.utmProfiles[\'ssl-ssh-profile\']" ng-disabled="ctrl.guiVisibility.sslSshProfileRequired"><label for="chk-ssl-ssh-profile-{{ ctrl.modalDialog }}"></label></span></label><div ng-show="ctrl.guiVisibility.utmProfiles[\'ssl-ssh-profile\']" f-omniselect="ctrl.select[\'ssl-ssh-profile\']" disabled="!ctrl.state.featureEnabled(\'gui-multiple-utm-profiles\')" ng-model="ctrl.policy[\'ssl-ssh-profile\']" ng-required="ctrl.guiVisibility.utmProfiles[\'ssl-ssh-profile\'] &&\n                         ctrl.policy[\'profile-type\'] !== \'group\' &&\n                         !ctrl.guiVisibility.ftpProxy &&\n                         !ctrl.state.isNgfwPolicyMode()" inline-edit-shortcut="::true" f-validation-message></div></div><div ng-show="ctrl.policy[\'profile-type\'] !== \'group\' &&\n                  !ctrl.guiVisibility.ftpProxy && ctrl.guiVisibility.ngfwSslSshProfile &&\n                  ctrl.state.isNgfwPolicyMode()" class="field"><label><span class="toggle-label"><span><span ng-if="ctrl.BUILD.PLATFORM.HAVE_SSH_PROXY">{{:: \'ssl_ssh_inspection\' | lang }} </span><span ng-if="!ctrl.BUILD.PLATFORM.HAVE_SSH_PROXY">{{:: \'ssl_inspection\' | lang }} </span><span f-tip-target ng-show="ctrl.policy.hasDeepInspectionProfile()"><f-icon class="fa-warning"></f-icon><div f-tip>{{:: \'default_ca_warn\' | lang }}</div></span></span></span></label><div f-omniselect="ctrl.select.ngfwSslSshProfile" disabled="true" ng-model="ctrl.policy.ngfwSslSshProfile" inline-edit-shortcut="::true"></div></div></section>'),
$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/vpn_tunnel.html",'<div class="section-title"><h2>{{:: \'vpn_tunnel\' | lang }}</h2></div><section><div class="field"><label>{{:: \'vpn_tunnel\' | lang }}</label><div f-omniselect="policyDialog.select.vpntunnel" ng-model="policyDialog.policy.vpntunnel" re-process-on="\'dstintfChanged\'" required f-validation-message></div></div><div class="field"><label><span class="toggle-label"><span>{{:: \'inbound\' | lang }}</span> <input type="checkbox" class="toggle-switch" id="chk-vpn-inbound" ng-model="policyDialog.policy.inbound" ng-true-value="\'enable\'" ng-false-value="\'disable\'"><label for="chk-vpn-inbound"></label></span></label></div></section>'),$templateCache.put("/30cf633bfb2210af603f817d96aeaf32/ng/firewall/policy/dialog/partials/warning-pane.html",'<div class="warning-message" ng-repeat="warn in ctrl.warns"><f-icon class="fa-warning"></f-icon><div class="message-content" ng-if="!warn.relatedItems">{{:: warn.warnKey | lang }}</div><div class="message-content" ng-if="warn.relatedItems"><p>{{:: warn.warnKey | lang }}</p><p><ul><li ng-repeat="item in warn.relatedItems">{{ item }}</li></ul></p></div></div><div class="error-message" ng-repeat="error in ctrl.errors"><f-icon class="fa-error"></f-icon><div class="message-content">{{:: error | lang }}</div></div>')}}}),define("ng/firewall/policy/controllers",["angular","jquery","fweb","module_js/firewall/policy_route_lookup","ng/system/csf/models"],function(angular,$,fweb,policyRouteLookup,csfModels){"use strict";function PolicyListController($scope,$routeParams,$q,CMDB,state,lang,policyStats,policyListQlistConfig,policyListViewType,policyOmniselectConfig,processFirewallInterface,processPolicy,policyInit,policyVWP){CMDB.model(csfModels);var showImplicitPolicy,systemSettings,promises,params="proxy-policy"===$routeParams.type?{skip:1}:{};$scope.policyCMDB=new CMDB("firewall",$routeParams.type,Object.assign({datasource:1},params));var logSettingsCMDB=new CMDB("log","setting"),webProxyCMDB=new CMDB("web-proxy","explicit"),ftpProxyCMDB=new CMDB("ftp-proxy","explicit"),systemSettingsCMDB=new CMDB("system","settings"),nat64CMDB=new CMDB("system","nat64"),systemGlobalCMDB=new CMDB("system","global"),systemCsfCMDB=new CMDB("system","csf"),vwpFilterName=$routeParams.vwpname;BASE_POLICY=policyInit.BASE_POLICY,BASE_POLICY_ADDRESSES=policyInit.BASE_POLICY_ADDRESSES,IMPLICIT_POLICY=policyInit.IMPLICIT_POLICY;var successOrFailure=function(promise,logName){return promise.then(angular.noop,function(){logName&&fweb.log("Failed to retrieve "+logName)})},generateQlistConfig=function(){var defaultColumnsOverride=systemSettings&&(systemSettings["gui-default-policy-columns"]||[]).map(function(entry){return entry.name});$scope.qlistOptions=policyListQlistConfig.create($routeParams.type,$routeParams.subType,$scope,defaultColumnsOverride)};$scope.processPolicies=function(){var processed=processPolicy.processPolicies($scope.policies);processed.policies.forEach(function(policy){policy.implicit||(policy.$systemCsf=$scope.systemCsf)}),$scope.policiesMeta=processed.meta,policyListViewType.update(),$scope.qlistSource=processed.policies,$scope.qlistOptions&&($scope.qlistOptions.locate_row=newPolicyMkey,newPolicyMkey=null)},$scope.setPoliciesLoading=function(){$scope.qlistSource=null},$scope.prepareSearchData=function(){var sources=Object.keys(processPolicy.meta.configuredDatasourceTypes).forEach(function(source){try{return Omniselect.getSourceData(source)}catch(e){return fweb.log.error(e),null}});return successOrFailure($q.all(sources))},$scope.menuItemsTemplate="partials/menu_items.html",$scope.policies=$scope.policyCMDB.fetch(),$scope.systemGlobal=systemGlobalCMDB.fetch(),$scope.systemCsf=systemCsfCMDB.fetch(),promises=[$scope.policies.$promise,processFirewallInterface.init(!0),successOrFailure($scope.systemGlobal.$promise,"system global"),policyOmniselectConfig.init(),successOrFailure($scope.systemCsf.$promise,"system csf")],showImplicitPolicy=state.featureEnabled("gui-implicit-policy")&&IMPLICIT_POLICY[$routeParams.type],showImplicitPolicy&&(logSettings=logSettingsCMDB.fetch(),promises.push(successOrFailure(logSettings.$promise,"log settings")),"proxy-policy"===$routeParams.type&&(webProxy=webProxyCMDB.fetch(),promises.push(successOrFailure(webProxy.$promise,"web-proxy explicit")),ftpProxy=ftpProxyCMDB.fetch(),promises.push(successOrFailure(ftpProxy.$promise,"ftp-proxy explicit")))),USE_CMDB_DEFAULT_COLUMNS[$routeParams.type]&&(systemSettings=systemSettingsCMDB.fetch(),promises.push(successOrFailure(systemSettings.$promise,"system settings"))),policyStats.SUPPORTED[$routeParams.type]&&promises.push(policyStats.load($routeParams.type)),$scope.isVirtualWirePolicy=policyVWP.isVirtualWirePolicy(),$scope.isVirtualWirePolicy&&promises.push(policyVWP.init()),"policy64"===$routeParams.type&&($scope.nat64Settings=nat64CMDB.fetch(),promises.push(successOrFailure($scope.nat64Settings.$promise,"nat64 settings"))),"policy"!==$routeParams.type&&"proxy-policy"!==$routeParams.type||promises.push(Omniselect.getSourceData("firewall.internet-service")),"policy"!==$routeParams.type&&"policy6"!==$routeParams.type||(promises.push(Omniselect.getSourceData("application.name")),promises.push(Omniselect.getSourceData("application.custom")),promises.push(Omniselect.getSourceData("application.category")),promises.push(Omniselect.getSourceData("webfilter.ftgd-cat")),promises.push(Omniselect.getSourceData("webfilter.ftgd-local-cat"))),promises.push(Omniselect.getSourceData("firewall.ippool")),promises.push(Omniselect.getSourceData("firewall.address")),["policy6","policy64","proxy-policy"].includes($routeParams.type)&&promises.push(Omniselect.getSourceData("firewall.address6")),$scope.addImplicitPolicy=function(){var implicitPolicy;showImplicitPolicy&&(implicitPolicy=policyInit.implicitPolicy($routeParams.type),implicitPolicy.name=lang("implicit_deny").toString(),implicitPolicy.category=lang("implicit").toString(),implicitPolicy.logtraffic=logSettings[policyInit.IMPLICIT_POLICY_LOG_PROPERTY[$routeParams.type]]||"unknown","proxy-policy"===$routeParams.type&&(implicitPolicy.action=webProxy["sec-default-action"]===ftpProxy["sec-default-action"]?webProxy["sec-default-action"]:[{title:PROXY_POLICY_PROTOCOL_KEY+"web",value:webProxy["sec-default-action"]},{title:PROXY_POLICY_PROTOCOL_KEY+"ftp",value:ftpProxy["sec-default-action"]}]),$scope.policies.push(implicitPolicy))},$scope.refreshPolicies=function(){return $scope.policies=$scope.policyCMDB.fetch(),$scope.policies.$promise.then(function(){$scope.addImplicitPolicy(),$scope.processPolicies()})},$q.all(promises).then(function(){$scope.isVirtualWirePolicy&&(vwpFilterName&&policyVWP.setCurrent(vwpFilterName),$scope.$watch(function(){return policyVWP.current},function(value,previous){value!==previous&&$scope.refreshPolicies()})),$scope.addImplicitPolicy(),$scope.processPolicies(),generateQlistConfig(),$scope.$watch(function(){return policyListViewType.value},function(value,previous){value!==previous&&($scope.refreshPolicies(),generateQlistConfig())})}),fweb.util.avatars.loadStyleSheet()}function PolicyListMenuItemsController($scope,$location,$routeParams,$q,$http,$window,lang,structure,policyListViewType,processPolicy,$route,policyListQlistConfig,policyStats,state,policyVWP,dialog,loader,objectUsage,policyInit,csfTopology){function validateDialog(model,scope){return scope.$broadcast("validation-msg_show"),scope.dialogForm.$valid?$q.when(!0):$q.reject()}function getMkey(o){return o.q_origin_key||o.name}var dialogURI=IFRAME_DIALOG_URI[$routeParams.type]?structure.ngURI(IFRAME_DIALOG_URI[$routeParams.type]):$location.path()+"/edit/",cmdbURI="/api/v2/cmdb/firewall/"+$routeParams.type+"/",replaceMsgCmdbURI="/api/v2/cmdb/system/replacemsg-group/",postChangeSuccess=processPolicy.postChangeSuccess.bind(processPolicy),postChangeFailure=processPolicy.postChangeFailure.bind(processPolicy),meetsDependencies=function(entry,dependenciesMap){return!dependenciesMap||Object.keys(dependenciesMap).every(function(key){return Array.isArray(dependenciesMap[key])?dependenciesMap[key].indexOf(entry[key])>=0:entry[key]===dependenciesMap[key]})};$scope.policyType=$routeParams.type,$scope.subType=$routeParams.subType,$scope.viewType=policyListViewType,$scope.vwp=policyVWP,$scope.policyStatsSupported=policyStats.SUPPORTED[$routeParams.type],$scope.policyStats=policyStats,$scope.policyLookupSupported=POLICY_LOOKUP[$routeParams.type]&&"standard"===$routeParams.subType&&state.getOperationMode()!==state.OPERATION_MODE.TRANSPARENT,$scope.isNgfwPolicyMode=state.isNgfwPolicyMode(),$scope.create=function(){$location.url(dialogURI)},$scope.edit=function(){var entry=$scope.menu.lastSelectedEntry,mkey=getPolicyMkey(entry);entry.implicit?$location.url(dialogURI+"implicit/"):$location.url(dialogURI+mkey+"/")},$scope.deleteEntries=function(entries){var promises=[],deleteConfig={};return $scope.setPoliciesLoading(),entries.forEach(function(policy){var mkey=getPolicyMkey(policy);deleteConfig[mkey]={sourceIndex:policy.source_index,policy:policy}}),Object.keys(deleteConfig).forEach(function(key){var promise,mkey=Number(key),config=deleteConfig[Number(key)];promise=$http.delete(cmdbURI+mkey);var grp=config.policy["replacemsg-override-group"];"proxy-policy"===$routeParams.type&&grp&&(promise=promise.then(function(){return $http.delete(replaceMsgCmdbURI+(grp&&grp.name||grp))})),promises.push(promise)}),$q.all(promises).then(postChangeSuccess,postChangeFailure).finally(function(){$scope.refreshPolicies()})},$scope.policyLookup=function(){$q.when(policyRouteLookup.lookup_policy("policy6"===$routeParams.type)).then(function(policyid){$scope.menu.$qlist.qlist("find",{policyid:policyid})})},$scope.showLogSubmenu=function(){return $scope.menu.entries.every(function(policy){return!policy.$systemCsf||!policy.$systemCsf.isDefaultLoggingMode()})},$scope.simpleValueSetterEnabled=function(key,value,dependenciesMap){var allKeyValue=!0,oneMeetsDependencies=!1,enabled=!0,entries=$scope.menu.entries,isImplicit=$scope.menu.entries.some(function(policy){return policy.implicit});return!isImplicit&&(1===entries.length?enabled=!entries[0].implicit&&entries[0][key]!==value&&meetsDependencies(entries[0],dependenciesMap):(entries.forEach(function(entry){entry[key]!==value&&(allKeyValue=!1),meetsDependencies(entry,dependenciesMap)&&(oneMeetsDependencies=!0)}),!allKeyValue&&oneMeetsDependencies||(enabled=!1)),enabled)};var setExtraValues=function(entry,key,value){"action"===key&&entry.hasOwnProperty("utm-status")&&("deny"===value?entry["utm-status"]="disable":"enable"===entry["utm-status"]&&"proxy-policy"===entry.q_name&&(entry["profile-protocol-options"]=entry["profile-protocol-options"]||"default",entry["ssl-ssh-profile"]=entry["ssl-ssh-profile"]||"certificate-inspection"))};$scope.setSimpleValue=function(key,value,dependenciesMap){var rows=$scope.menu.rowInstances,selectedEntries=$scope.menu.entries,policiesMap={};selectedEntries.forEach(function(entry,index){var mkey,row;!entry.implicit&&entry[key]!==value&&meetsDependencies(entry,dependenciesMap)&&(mkey=getPolicyMkey(entry),row=rows[index],entry[key]=value,setExtraValues(entry,key,value),policiesMap[mkey]||(policiesMap[mkey]={policy:entry,row:row}))}),processPolicy.savePolicyValues(policiesMap).then(postChangeSuccess,postChangeFailure).finally(function(){Object.keys(policiesMap).forEach(function(key){var policy=policiesMap[key].policy;policyListQlistConfig.reProcessOmniselects(policy)}),angular.element($window).trigger("resize")})},$scope.setImplicitLog=function(value){var policy=$scope.menu.lastSelectedEntry,implicitLogSetting=policyInit.IMPLICIT_POLICY_LOG_PROPERTY[$routeParams.type],originalValue=logSettings[implicitLogSetting];policy.logtraffic=logSettings[implicitLogSetting]=value,logSettings.$save().$promise.then(function(){return $scope.refreshPolicies(),postChangeSuccess()},function(){return policy.logtraffic=logSettings[implicitLogSetting]=originalValue,postChangeFailure()})},$scope.saveCMDBEntry=function(entry){entry.$save().$promise.then(postChangeSuccess,postChangeFailure)},$scope.showMatchingLogs=function(){var logUuidOpt=["policy-only","extended"],uuid=$scope.menu.lastSelectedEntry.uuid,mkey=getPolicyMkey($scope.menu.lastSelectedEntry).toString(),uuidEnabled=logUuidOpt.includes($scope.systemGlobal["log-uuid"])&&uuid,briefTrafficFormat=logSettings&&"enable"===logSettings["brief-traffic-format"],filter=uuidEnabled&&!briefTrafficFormat?[{id:"poluuid",logic:{},value:[uuid]}]:[{id:"policyid",logic:{},value:[$scope.policyType+":"+mkey]}],filterQuery=encodeURIComponent(JSON.stringify(filter));$location.url(structure.ngURI("/ng/log/view/"+(LOG_TYPES.types[$scope.policyType]||LOG_TYPES.default)+"/?filter="+filterQuery))},$scope.showInFortiview=function(){var lastEntry=$scope.menu.lastSelectedEntry,id=getPolicyMkey(lastEntry),fortigateFilter=csfTopology.csfEnabled?":"+state.serial:"";$location.url("/fortiview/policy/all/"+lastEntry.q_name+":"+id+fortigateFilter)},$scope.copyPolicy=function(prefix){prefix=prefix||"Clone of ";var policy=angular.copy($scope.menu.lastSelectedEntry);0===policy.policyid&&policy.implicit||(policy.comments=prefix+(policy.name||getPolicyMkey(policy)),["id","policyid","name","label","global-label"].forEach(function(key){delete policy[key]}),policy.status="disable",$scope.policyBuffer=policy)},$scope.pastePolicy=function(above){function pastePolicyFailure(){return $scope.refreshPolicies(),postChangeFailure()}var policy=$scope.menu.lastSelectedEntry,selectedPolicy=getPolicyMkey(policy);$scope.setPoliciesLoading();var pastedPolicy=$scope.policyCMDB.append($scope.policyBuffer);pastedPolicy.$promise.then(function(result){if(delete $scope.policyBuffer,newPolicyMkey={$mkey:result.mkey},!policy.implicit)return $scope.policyCMDB.move(result.mkey,selectedPolicy,above).$promise}).then(function(){if(!policy.implicit&&above)return policy.$save().$promise}).then(function(){postChangeSuccess(),$scope.refreshPolicies()}).catch(pastePolicyFailure)},$scope.insertEnabled={policy:!0,policy6:!0,policy64:!0,"multicast-policy":!0,"proxy-policy":!0},$scope.insertPolicy=function(above){var originalPolicyBuffer=$scope.policyBuffer;$scope.policyBuffer=angular.extend({},BASE_POLICY,BASE_POLICY_ADDRESSES[$routeParams.type],{srcintf:$scope.menu.lastSelectedEntry.srcintf,dstintf:$scope.menu.lastSelectedEntry.dstintf}),"proxy-policy"===$routeParams.type&&($scope.policyBuffer.proxy=$scope.menu.lastSelectedEntry.proxy,$scope.policyBuffer.service="webproxy"),$scope.policyBuffer.status="disable",$scope.policyBuffer.action="accept",$scope.pastePolicy(above),$scope.policyBuffer=originalPolicyBuffer},$scope.cloneReverseEnabled=function(){var entry=$scope.menu.lastSelectedEntry,isAny=function(obj){return"any"===obj.name},isVIP=function(addr){return addr.datasource.indexOf("firewall.vip")!==-1};if(null!=entry){var cloneEnabled=!("disable"!==entry.nat||"ipsec"===entry.action||entry.srcintf.some(isAny)||entry.dstintf.some(isAny)||entry.dstaddr&&entry.dstaddr.some(isVIP)||"enable"===entry["learning-mode"]);return cloneEnabled&&!entry.implicit&&1===$scope.menu.entries.length}},$scope.cloneReverse=function(){var EMPTY_FIELDS=["users","groups","devices"],originalPolicyBuffer=$scope.policyBuffer;$scope.copyPolicy("Reverse of ");var temp=$scope.policyBuffer.dstaddr;$scope.policyBuffer.dstaddr=$scope.policyBuffer.srcaddr,$scope.policyBuffer.srcaddr=temp,temp=$scope.policyBuffer.dstintf,$scope.policyBuffer.dstintf=$scope.policyBuffer.srcintf,$scope.policyBuffer.srcintf=temp,EMPTY_FIELDS.forEach(function(key){$scope.policyBuffer[key]=null}),$scope.pastePolicy(!1),$scope.policyBuffer=originalPolicyBuffer},$scope.renamePolicy=function(){var policy=$scope.menu.lastSelectedEntry,row=$scope.menu.rowInstances[0];dialog.open("name-dialog",{title:lang("Rename Policy").toString(),scope:{maxNameLength:policy.$schema.children.name.size,namedPolicyRequired:!state.featureEnabled("gui-allow-unnamed-policy")},model:{name:policy.name,originalName:policy.name},template:loader.base_path(PARTIALS+"name-dialog.html"),submit_handler:validateDialog}).then(function(model){return policy.name=model.name,processPolicy.savePolicy(policy,row)})},$scope.$watch("menu.$target",function($target){var $object,obj,entries=$scope.menu.entries||[],policy=$scope.menu.lastSelectedEntry;$scope.implicitPolicySelected=1===entries.length&&policy.implicit;var $td=$scope.menu.$td;if($scope.selectEntriesEnabled=$td&&!!$td.data("selectEntries"),$target&&($object=$target.closest("."+policyListQlistConfig.OBJECT_CLASS),obj=$scope.menu.firewallObject=$object.data(policyListQlistConfig.OBJECT_DATA)),obj){var urlPromise=state.getExactEditUrl(obj.datasource,null,getMkey(obj));urlPromise.then(function(url){$scope.objectEditUrl=url,$scope.editObjectEnabled=obj.editable!==!1&&$scope.objectEditUrl})}else $scope.editObjectEnabled=$scope.objectEditUrl=!1}),$scope.selectObjects=function($event){var selectFn=$scope.menu.$td.data("selectEntries");selectFn($event)},$scope.editObject=function(){$location.url(structure.ngURI($scope.objectEditUrl))},$scope.showReferences=function(){var object=$scope.menu.firewallObject,type=state.getTypeByPath(object.datasource),nameOverride="";"firewall.internet-service"===object.datasource&&(nameOverride=object.name),objectUsage.open(type,getMkey(object),state.current_vdom,nameOverride)},$scope.exemptFromShowReference=function(){var object=$scope.menu.firewallObject,EXEMPT_SOURCES=new Set(["application.name","application.category","webfilter.ftgd-cat","webfilter.ftgd-local-cat"]),datasource=object.datasource||[object.q_path,object.q_name].join(".");return EXEMPT_SOURCES.has(datasource)},$scope.getObjectLangKey=function(){var object=$scope.menu.firewallObject;if(object){var datasource=object.datasource||[object.q_path,object.q_name].join(".");return object._typeLabelOverride||"datasource_"+datasource}},$scope.targetConfigs={learningPolicy:{key:"learning-mode",value:"enable"}},$scope.containTargetPolicy=function(target){return($scope.menu.entries||[]).some(function(policy){return policy[target.key]===target.value})},$scope.editCentralSNAT=function(){$location.url(structure.ngURI(NG_LIST_URI["central-snat-map"]))}}var BASE_POLICY,BASE_POLICY_ADDRESSES,IMPLICIT_POLICY,logSettings,webProxy,ftpProxy,PARTIALS="/ng/firewall/policy/partials/",IFRAME_DIALOG_URI={"DoS-policy":"/p/firewall/policy/firewall/DoS/","DoS-policy6":"/p/firewall/policy/6/firewall/DoS/",acl:"/p/firewall/policy/firewall/acl/",acl6:"/p/firewall/policy/6/firewall/acl/","central-snat-map":"/p/firewall/policy/explicit_nat/edit/"},NG_LIST_URI={"central-snat-map":"/ng/firewall/policy/central-snat-map/standard"},USE_CMDB_DEFAULT_COLUMNS={policy:!0,policy6:!0},POLICY_LOOKUP={policy:!0,policy6:!0},LOG_TYPES={types:{"multicast-policy":"multicast_traffic","multicast-policy6":"multicast_traffic","DoS-policy":"anomaly","DoS-policy6":"anomaly"},default:"forward_traffic"},PROXY_POLICY_PROTOCOL_KEY="ProxyPolicy::protocol.",newPolicyMkey=null,getPolicyMkey=function(policy){return policy.policyid||policy.id||0};return function(providers,loader){return providers.$controller.register("PolicyList",PolicyListController),providers.$controller.register("PolicyListMenuItems",PolicyListMenuItemsController),loader.initModules(["services/policy_init","services/policy_stats","services/process_policy","services/select_config","services/qlist_config","services/view_type","services/virtual_wire_pair","/ng/services/process_interface","services/select_object_info","templates"])}}),define("ng/firewall/policy/services/policy_init",["angular"],function(angular){"use strict";function PolicyInitService(){}var BASE_POLICY_ADDRESSES={policy:{srcaddr:[{name:"all",datasource:"firewall.address","css-class":"ftnt-address",q_origin_key:"all"}],dstaddr:[{name:"all",datasource:"firewall.address","css-class":"ftnt-address",q_origin_key:"all"}]},policy6:{srcaddr:[{name:"all",datasource:"firewall.address6","css-class":"ftnt-address-ipv6",q_origin_key:"all"}],dstaddr:[{name:"all",datasource:"firewall.address6","css-class":"ftnt-address-ipv6",q_origin_key:"all"}]},"proxy-policy":{srcaddr:[{name:"all",datasource:"firewall.address","css-class":"ftnt-address",q_origin_key:"all"}],dstaddr:[{name:"all",datasource:"firewall.address","css-class":"ftnt-address",q_origin_key:"all"}],dstintf:[{name:"any",datasource:"system.interface","css-class":"fa-square-o",q_origin_key:"any"}]}},PROXY_PROFILES={"av-profile":{source:{path:"antivirus",name:"profile"}},"webfilter-profile":{source:{path:"webfilter",name:"profile"}},"dnsfilter-profile":{source:{path:"dnsfilter",name:"profile"}},"spamfilter-profile":{source:{path:"spamfilter",name:"profile"}},"dlp-sensor":{source:{path:"dlp",name:"sensor"}},"icap-profile":{source:{path:"icap",name:"profile"}},"waf-profile":{source:{path:"waf",name:"profile"}}},OTHER_PROFILES={"application-list":{source:{path:"application",name:"list"}},"ips-sensor":{source:{path:"ips",name:"sensor"}},"voip-profile":{source:{path:"voip",name:"profile"}},"mms-profile":{source:{path:"mms",name:"profile"}},"profile-protocol-options":{source:{path:"firewall",name:"profile-protocol-options"}},"ssl-ssh-profile":{source:{path:"firewall",name:"ssl-ssh-profile"}}},UTM_PROFILES=angular.extend({},PROXY_PROFILES,OTHER_PROFILES);return BASE_POLICY_ADDRESSES.policy64=BASE_POLICY_ADDRESSES.policy,BASE_POLICY_ADDRESSES["multicast-policy"]=BASE_POLICY_ADDRESSES.policy,BASE_POLICY_ADDRESSES["proxy-policy"]=BASE_POLICY_ADDRESSES["proxy-policy"],PolicyInitService.prototype.BASE_POLICY={srcintf:[{name:"any",datasource:"system.interface",q_origin_key:"any"}],dstintf:[{name:"any",datasource:"system.interface",q_origin_key:"any"}],schedule:{name:"always",datasource:"firewall.schedule.recurring","css-class":"ftnt-schedule-recurring",q_origin_key:"always"},service:[{name:"ALL",datasource:"firewall.service.custom","css-class":"ftnt-service",q_origin_key:"ALL"}]},PolicyInitService.prototype.BASE_POLICY_ADDRESSES=BASE_POLICY_ADDRESSES,PolicyInitService.prototype.BASE_IMPLICIT_POLICY={policyid:0,implicit:!0,can_delete:!1,action:"deny"},PolicyInitService.prototype.IMPLICIT_POLICY={policy:BASE_POLICY_ADDRESSES.policy,policy6:BASE_POLICY_ADDRESSES.policy6,"proxy-policy":BASE_POLICY_ADDRESSES["proxy-policy"]},PolicyInitService.prototype.IMPLICIT_POLICY_LOG_PROPERTY={policy:"fwpolicy-implicit-log",policy6:"fwpolicy6-implicit-log","proxy-policy":"expolicy-implicit-log"},PolicyInitService.prototype.implicitPolicy=function(type){return angular.extend({},this.BASE_POLICY,this.BASE_IMPLICIT_POLICY,this.IMPLICIT_POLICY[type])},PolicyInitService.prototype.PROXY_PROFILES=PROXY_PROFILES,PolicyInitService.prototype.OTHER_PROFILES=OTHER_PROFILES,PolicyInitService.prototype.UTM_PROFILES=UTM_PROFILES,function(providers){providers.$provide.service("policyInit",PolicyInitService)}}),define("ng/firewall/policy/services/policy_shared",[],function(){"use strict";function PolicySharedService(){}return PolicySharedService.prototype.WARNING_PANE_ID="policy_dialog_warning_pane",PolicySharedService.prototype.DIRECTION={FORWARD:"forward",BACKWARD:"backward",BIDIRECTION:"bi-direction"},function(providers){providers.$provide.service("policyShared",PolicySharedService)}}),define("ng/firewall/policy/services/policy_stats",[],function(){"use strict";function PolicyStats($http,lang){this._$http=$http,this._lang=lang,this._toNotify=null,this._listeners={},this.map={}}function getStatsUrl(type){return MONITOR_API_URI+"firewall/"+(MONITOR_API_PATH_MAP[type]||type)}var formatters=fweb.util.formatters,MONITOR_API_URI="/api/v2/monitor/",MONITOR_API_PATH_MAP={acl:"acl",acl6:"acl6"};return PolicyStats.prototype.SUPPORTED={policy:!0,policy6:!0,"proxy-policy":!0,acl:!0,acl6:!0},PolicyStats.prototype.COMPARE_KEYS=["bytes","packets","active_sessions","hit_count","packets_dropped","software_bytes","software_packets","asic_bytes","asic_packets","nturbo_bytes","nturbo_packets"],PolicyStats.prototype.VALUE_KEYS=["first_used","last_used","oversize"],PolicyStats.prototype.USAGE_KEYS=["software_usage","asic_usage","nturbo_usage"],PolicyStats.prototype.KEYS=PolicyStats.prototype.COMPARE_KEYS.concat(PolicyStats.prototype.VALUE_KEYS,PolicyStats.prototype.USAGE_KEYS),PolicyStats.prototype.USAGE_KEY_MAPPING={software_usage:{value:"software_bytes",max:"bytes"},asic_usage:{value:"asic_bytes",max:"bytes"},nturbo_usage:{value:"nturbo_bytes",max:"bytes"}},PolicyStats.prototype.load=function(type,allPolicies){return this.type=type||this.type,this._$http.get(getStatsUrl(this.type),{params:{stats_only:1}}).then(function(response){var meta={};this.COMPARE_KEYS.forEach(function(key){meta["max_"+key]=0}),response.data.results.forEach(function(policy){this.map[policy.policyid]=policy,this.COMPARE_KEYS.forEach(function(key){policy[key]>meta["max_"+key]&&(meta["max_"+key]=policy[key])}),this.USAGE_KEYS.forEach(function(key){var keys=this.USAGE_KEY_MAPPING[key];policy[key]=formatters.percentage(policy[keys.value],policy[keys.max])}.bind(this))}.bind(this)),this.meta=meta,allPolicies&&allPolicies.forEach(function(policy){var stats=this.map[policy.policyid]||{};this.KEYS.forEach(function(key){policy[key]=stats[key]})}.bind(this)),this.notifyListeners()}.bind(this))},PolicyStats.prototype.getMax=function(selector){return this.meta["max_"+selector]},PolicyStats.prototype.addListener=function(policyID,listenerFn){this._listeners[policyID]=listenerFn},PolicyStats.prototype.clearListeners=function(){this._listeners={}},PolicyStats.prototype.notifyListeners=function(){Object.keys(this._listeners).forEach(function(policyID){var listenerFn;policyID=Number(policyID),this._toNotify&&!this._toNotify.has(policyID)||(listenerFn=this._listeners[policyID])()}.bind(this))},PolicyStats.prototype.update=function(allPolicies){this._toNotify=null,this.load(null,allPolicies)},PolicyStats.prototype.clearCounters=function(entries,allPolicies){this._toNotify=new Set(entries.map(function(entry){return entry.policyid})),this._$http.post(getStatsUrl(this.type)+"/clear_counters",{policy:entries.map(function(entry){return entry.policyid})}).then(function(){this.load(null,allPolicies)}.bind(this))},function(providers){providers.$provide.service("policyStats",PolicyStats)}}),define("ng/firewall/policy/services/process_policy",["angular","fweb","notify"],function(angular,fweb,notify){"use strict";function ProcessPolicyService(policyStats,processFirewallInterface,selectObjectInfo,lang,policyVWP,$injector,$http,$routeParams,$q,$window,$rootScope,state,policyInit,CMDB){this.$q=$q,this.$http=$http,this.policyStats=policyStats,this.$routeParams=$routeParams,this.selectObjectInfo=selectObjectInfo,this.policyVWP=policyVWP,this.lang=lang,this.processFirewallInterface=processFirewallInterface,this.$injector=$injector,this.$window=$window,this.$rootScope=$rootScope,this.state=state,this.policyInit=policyInit,this.CMDB=CMDB}var POLICY_INTF_KEYS=["srcintf","dstintf","destination","interface"],POLICY_POOL_KEYS=["poolname","nat-ipool","snat"],index=0,sourceIndex=0,getPolicyMkey=function(policy){return policy.policyid||policy.id};return ProcessPolicyService.prototype.savePolicy=function(policy,row){var map={};return map[policy.$mkey]={row:row,policy:policy},this.savePolicyValues(map).then(this.postChangeSuccess.bind(this),this.postChangeFailure.bind(this))},ProcessPolicyService.prototype.savePolicyValues=function(policiesMap){var that=this,cmdbURI="/api/v2/cmdb/firewall/"+this.$routeParams.type+"/",promises=[];return Object.keys(policiesMap).forEach(function(key){var mapping=policiesMap[key],policy=mapping.policy,uri=cmdbURI+key,policyCMDB=new this.CMDB("firewall",this.$routeParams.type,{datasource:1}),updatePromise=policyCMDB.edit(key,policy).$promise.then(function(){return that.$http.get(uri,{params:{datasource:1}}).then(function(response){return response.data.results[0]})});promises.push(mapping.row.updateEntry(updatePromise).then(function(){that.processPolicy(mapping.row.entry)}))}.bind(this)),this.$q.all(promises)},ProcessPolicyService.prototype.collectConfiguredDatasourceTypes=function(policy){var ALIASES={"system.interface":"firewallInterfaces","system.virtual-wan-link":"firewallInterfaces","system.zone":"firewallInterfaces"},checkAdd=function(key,value){if(0!==key.indexOf("$")&&value.datasource){var datasource=ALIASES[value.datasource]||value.datasource;return this.meta.configuredDatasourceTypes[datasource]=!0,!0}return!1}.bind(this);Object.keys(policy).forEach(function(key){var i,value=policy[key];if(Array.isArray(value)&&value.length)for(i=0;i<value.length&&checkAdd(key,value[i]);i++);else angular.isObject(value)&&checkAdd(key,value)})},ProcessPolicyService.prototype.processPolicy=function(policy){var stats,srcSectionable,destSectionable,skipPolicy,address6SourceMeta,dynamic6Info,subType=this.$routeParams.subType,policyType=this.$routeParams.type,that=this,addressSourceMeta=Omniselect.getSourceMetaDataSync("firewall.address"),fqdnInfo=addressSourceMeta&&addressSourceMeta.resolvedFqdn,dynamicInfo=addressSourceMeta&&addressSourceMeta.resolvedDynamic;["policy6","policy64","proxy-policy"].includes(policyType)&&(address6SourceMeta=Omniselect.getSourceMetaDataSync("firewall.address6"),dynamic6Info=addressSourceMeta&&address6SourceMeta.resolvedDynamic);var isInvalidFqdn=function(addr){if(addr["css-class"].indexOf("address-fqdn")!==-1){var addrs=fqdnInfo[addr.name]&&fqdnInfo[addr.name].addrs;return null==addrs||!Array.isArray(addrs)||addrs.length<1}return!1},isInvalidDynamic=function(addr){var addrs,key,resolved="firewall.address6"===addr.datasource?dynamic6Info:dynamicInfo;return!!addr["css-class"].includes("address-dynamic")&&(key=addr.name,addrs=resolved[key]&&resolved[key].addrs,!Array.isArray(addrs)||addrs.length<1)},isVirtualServer=function(addr){return"firewall.vip"===addr.datasource&&addr["css-class"].indexOf("load-balance")>=0},processAddresses=function(addresses){return addresses.forEach(function(address){isInvalidFqdn(address)&&(address["css-class"]=address["css-class"].replace("ftnt-address-fqdn","ftnt-address-invalid-fqdn"),addresses.hasInvalidFqdn=!0),isInvalidDynamic(address)&&(address["css-class"]=address["css-class"].replace("ftnt-address-dynamic","ftnt-address-invalid-dynamic"),addresses.hasInvalidDynamic=!0),isVirtualServer(address)&&(address._typeLabelOverride="vserver")}),addresses},hasScheduleExpired=function(schedule){return schedule&&schedule["css-class"]&&schedule["css-class"].indexOf("expired")>0},interfacesSectionable=function(interfaces){var sectionable=!0;return interfaces&&(Array.isArray(interfaces)||(interfaces=[interfaces]),sectionable=1===interfaces.length&&"any"!==interfaces[0].name),sectionable},interfaceDown=function(intf){return"down"===intf.link},interfaceEmtpy=function(intf){return Array.isArray(intf.members)&&!intf.members.length},processInterfaces=function(interfaces){var process=function(intf){return angular.isObject(intf)||(intf={name:intf,datasource:"system.interface"}),that.processFirewallInterface.process(intf),skipPolicy||(skipPolicy="virtual-wire"===subType?!that.policyVWP.currentInterfacesMap[intf.name]:intf.is_virtual_wire_pair_member&&["policy","policy6"].indexOf(policyType)>-1),intf._overrideDatasource="firewallInterfaces",intf};return interfaces&&(interfaces=Array.isArray(interfaces)?interfaces.map(process):process(interfaces)),interfaces},processPools=function(pools){var poolMeta=Omniselect.getSourceMetaDataSync("firewall.ippool");Array.isArray(pools)&&pools.forEach(function(pool){pool.icon="ftnt-ip-pool";var poolStats=poolMeta&&poolMeta.poolStats[pool.name];poolStats&&poolStats.available<10&&(pool.icon="ftnt-ip-pool-exhausted")})},processDevice=function(device){"user.device-category"===device.datasource&&(device.editable=!1)},processInternetServices=function(){var internetServices=policy["internet-service-id"]||[],map=this.selectObjectInfo.getMap("firewall.internet-service");internetServices.forEach(function(internetService){internetService.datasource="firewall.internet-service",internetService["css-class"]="fa-cloud";
var info=map[internetService.id];info&&(internetService.name=info.name)}.bind(this)),policy["internet-service-id-negate"]=policy["internet-service-negate"],policy["internet-service-custom-negate"]=policy["internet-service-negate"]}.bind(this),processApplications=function(){var applications=policy.application||[],categories=policy["app-category"]||[],appMap=this.selectObjectInfo.getMap("application.name"),customAppMap=this.selectObjectInfo.getMap("application.custom"),categoryMap=this.selectObjectInfo.getMap("application.category");applications.forEach(function(entry){var key=entry.q_origin_key,mappedApp=appMap[key]||customAppMap[key]||{};angular.extend(entry,mappedApp)}),categories.forEach(function(entry){angular.extend(entry,categoryMap[entry.q_origin_key]||{})})}.bind(this),processURLCategories=function(){var urlCategories=policy["url-category"]||[],ftgdCatMapping=this.selectObjectInfo.getMap("webfilter.ftgd-cat"),localftgdCatMapping=this.selectObjectInfo.getMap("webfilter.ftgd-local-cat");urlCategories.forEach(function(cat){var key=cat.id,ftgdCat=ftgdCatMapping[key],localFtgdCat=localftgdCatMapping[key],entry=ftgdCat||localFtgdCat;entry&&(cat.name=entry.name,cat.datasource=entry.datasource)})}.bind(this),processNgfwSslSshProfile=function(){var utmProfileKeys=Object.keys(that.policyInit.UTM_PROFILES),ngfwSslSshProfile=that.state.getVdomSslSshProfile(),hasNgfwOrUtmInspection=utmProfileKeys.some(function(key){return"ssl-ssh-profile"!==key&&policy[key]});hasNgfwOrUtmInspection=hasNgfwOrUtmInspection||["application","app-category","url-category"].some(function(key){return Array.isArray(policy[key])&&policy[key].length}),hasNgfwOrUtmInspection&&ngfwSslSshProfile?policy.ngfwSslSshProfile={"css-class":"ftnt-profile-ssl-ssh-inspection",datasource:"firewall.ssl-ssh-profile",name:ngfwSslSshProfile,q_origin_key:ngfwSslSshProfile}:delete policy.ngfwSslSshProfile};if(POLICY_INTF_KEYS.forEach(function(key){policy[key]=processInterfaces(policy[key])}),POLICY_POOL_KEYS.forEach(function(key){processPools(policy[key])}),"policy"!==policyType&&"proxy-policy"!==policyType||processInternetServices(),"policy"!==policyType&&"policy6"!==policyType||(processApplications(),processURLCategories(),this.state.isNgfwPolicyMode()&&processNgfwSslSshProfile()),"wanopt"===policy.proxy&&(skipPolicy=!0),skipPolicy)return!1;srcSectionable=interfacesSectionable(policy.srcintf),destSectionable=interfacesSectionable(policy.dstintf),policy.implicit||srcSectionable&&destSectionable||(this.meta.interfacesSectionable=!1),policy.index=null==policy.index?index++:policy.index,policy.source_index=null==policy.source_index?sourceIndex++:policy.source_index,stats=that.policyStats.map[policy.policyid]||{},that.policyStats.KEYS.forEach(function(key){policy[key]=stats[key]}),["srcaddr","dstaddr"].forEach(function(key){var addresses=policy[key];addresses&&Array.isArray(addresses)&&(policy[key]=processAddresses(addresses))}),policy.devices&&policy.devices.forEach(function(device){processDevice(device)}),policy.warnings=[],policy.oversize&&policy.warnings.push("oversize"),hasScheduleExpired(policy.schedule)&&policy.warnings.push("expired_sch"),((policy.srcaddr||{}).hasInvalidFqdn||(policy.dstaddr||{}).hasInvalidFqdn)&&policy.warnings.push("invalid_fqdn"),((policy.srcaddr||{}).hasInvalidDynamic||(policy.dstaddr||{}).hasInvalidDynamic)&&policy.warnings.push("invalid_dynamic"),POLICY_INTF_KEYS.forEach(function(key){var intfs=policy[key];intfs&&(intfs=angular.isFunction(intfs.every)?intfs:[intfs],intfs.every(interfaceEmtpy)?policy.warnings.push(key+"_empty"):intfs.every(interfaceDown)&&policy.warnings.push(key+"_down"))});var poolMeta=Omniselect.getSourceMetaDataSync("firewall.ippool");return(poolMeta&&policy["nat-ippool"]||policy.ippool&&"disable"!==policy.ippool&&policy.poolname)&&(policy.poolname||policy["nat-ippool"]).forEach(function(pool){var poolStats=poolMeta&&poolMeta.poolStats[pool.name];poolStats&&poolStats.available<10&&policy.warnings.push(0===poolStats.available?"ip_pool_exhausted":"ip_pool_nearing_exhaustion")}),this.meta.map[getPolicyMkey(policy)]=policy,this.meta.nameMap[policy.name]=policy,this.collectConfiguredDatasourceTypes(policy),policy.index+1<=this.policies.length?this.policies[policy.index]=policy:this.policies.push(policy),!0},ProcessPolicyService.prototype.processPolicies=function(policies){return this.policies=[],this.meta={interfacesSectionable:!0,map:{},nameMap:{},count:0,configuredDatasourceTypes:{}},index=0,sourceIndex=0,policies.forEach(function(policy){this.processPolicy(policy)&&this.meta.count++}.bind(this)),{policies:this.policies,meta:this.meta}},ProcessPolicyService.prototype.postChangeSuccess=function(){notify.post(this.lang("changes_saved").toString(),"success")},ProcessPolicyService.prototype.postChangeFailure=function(reason){return notify.post(this.lang("Failed to save some changes").toString(),"error"),this.$q.reject(reason)},function(providers){providers.$provide.service("processPolicy",ProcessPolicyService)}}),define("ng/firewall/policy/services/select_config",["angular","jquery","fweb"],function(angular,$,fweb){"use strict";function OmniselectConfigService(_$routeParams_,_state_,_policyVWP_,_$q_,_$http_){$routeParams=_$routeParams_,state=_state_,policyVWP=_policyVWP_,$q=_$q_,$http=_$http_}var $routeParams,state,policyVWP,$q,$http,VALUE_SPLIT_MAP={source:{"firewall.address":"srcaddr","firewall.addrgrp":"srcaddr","firewall.address6":"srcaddr","firewall.addrgrp6":"srcaddr","user.device":"devices","user.device-category":"devices","user.device-group":"devices","user.group":"groups","user.local":"users"},destination:{"firewall.address":"dstaddr","firewall.addrgrp":"dstaddr","firewall.vip":"dstaddr","firewall.vipgrp":"dstaddr","firewall.internet-service":"internet-service-id","firewall.internet-service-custom":"internet-service-custom"},profile:{"firewall.profile-group":"profile-group","antivirus.profile":"av-profile","webfilter.profile":"webfilter-profile","dnsfilter.profile":"dnsfilter-profile","application.list":"application-list","ips.sensor":"ips-sensor","spamfilter.profile":"spamfilter-profile","dlp.sensor":"dlp-sensor","voip.profile":"voip-profile","icap.profile":"icap-profile","waf.profile":"waf-profile","firewall.mms-profile":"mms-profile","firewall.profile-protocol-options":"profile-protocol-options","firewall.ssl-ssh-profile":"ssl-ssh-profile"},"proxy-source":{"firewall.address":"srcaddr","firewall.addrgrp":"srcaddr","firewall.proxy-address":"srcaddr","firewall.proxy-addrgrp":"srcaddr","firewall.address6":"srcaddr6","firewall.addrgrp6":"srcaddr6","user.group":"groups","user.local":"users"},"proxy-destination":{"firewall.address":"dstaddr","firewall.addrgrp":"dstaddr","firewall.proxy-address":"dstaddr","firewall.proxy-addrgrp":"dstaddr","firewall.vip":"dstaddr","firewall.vipgrp":"dstaddr","firewall.vip46":"dstaddr","firewall.vipgrp46":"dstaddr","firewall.address6":"dstaddr6","firewall.addrgrp6":"dstaddr6","firewall.vip6":"dstaddr6","firewall.vipgrp6":"dstaddr6","firewall.vip64":"dstaddr6","firewall.vipgrp64":"dstaddr6","firewall.internet-service":"internet-service-id","firewall.internet-service-custom":"internet-service-custom"},applications:{"application.name":"application","application.custom":"application","application.category":"app-category"}},DEFAULT_UTM_PROFILE="default",SNIFFER_UTM_PROFILE="sniffer-profile",CERTIFICATE_INSPECTION_UTM_PROFILE="certificate-inspection",ONE_ADDRESS_MESSAGE=$.getInfo("One address or address group must be selected"),ONE_USER_MESSAGE=$.getInfo("One user or group is required"),CMDB_URI="/api/v2/cmdb/",PROXY_PROFILES=["antivirus.profile","webfilter.profile","dnsfilter.profile","spamfilter.profile","dlp.sensor","icap.profile","waf.profile"],cmdbGet=function(path,name,mkey){var uri=CMDB_URI+path+"/"+name+(mkey?"/"+mkey:"")+"?with_meta=1&datasource=1";return $http.get(uri).then(function(result){return result.data.results},function(err){fweb.log("Failed to fetch "+path+"."+name+"."+mkey+" for: "+err.message)})},mapArray=function(entries,key){return entries.reduce(function(map,entry){return map[entry[key]]=entry,map},{})},required=function(selected){if(!selected||Array.isArray(selected)&&!selected.length)return $.getInfo("One entry must be selected")},createOneOfRequired=function(types,message){return function(selected){var oneSelected=selected.some(function(entry){var type=entry.datasource||entry.q_path+"."+entry.q_name;return types.indexOf(type)>=0});if(!oneSelected)return message}},protocolOptionsRequired=function(selected,policy){var selectedProxyProfiles=selected.filter(function(entry){var type=entry.datasource||entry.q_path+"."+entry.q_name;return PROXY_PROFILES.indexOf(type)>=0});if("proxy-policy"===policy.q_name||selectedProxyProfiles.length&&state.getInspectionMode()===state.INSPECTION_MODE.PROXY){var fn=createOneOfRequired(["firewall.profile-protocol-options"],$.getInfo("Proxy Options Profile must be selected"));return fn(selected)}},SSLProfileRequired=function(selected,policy){if("proxy-policy"!==policy.q_name||"ftp"!==policy.proxy){var isNgfwPolicyMode=state.isNgfwPolicyMode(),fn=createOneOfRequired(["firewall.ssl-ssh-profile"],$.getInfo("SSL/SSH Inspection Profile must be selected"));return isNgfwPolicyMode?void 0:fn(selected)}},validateProfiles=function(policy){return function(entries){var message,messages=[];if(entries.length&&(message=protocolOptionsRequired(entries,policy),message&&messages.push(message),message=SSLProfileRequired(entries,policy),message&&messages.push(message)),messages.length)return messages.join(" ")}},validateVIPMixedAddr=function(selected){var requiredError=required(selected);if(requiredError)return requiredError;if(Array.isArray(selected)){var addressTypeCount=0,vipTypes=["firewall.vip","firewall.vipgrp","firewall.vip6","firewall.vipgrp6","firewall.vip46","firewall.vipgrp46","firewall.vip64","firewall.vipgrp64"];if(selected.forEach(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;vipTypes.indexOf(datasource)>=0&&addressTypeCount++}),addressTypeCount&&addressTypeCount!==selected.length)return $.getInfo("Addresses/groups cannot be mixed with Virtual IPs")}},validateIPv4orProxyDestination=function(selected,meta){var hasDestinationAddress=!1,hasInternetService=!1,requiredError=required(selected);if(requiredError)return requiredError;if(Array.isArray(selected)){var addressTypes=["firewall.address","firewall.addrgrp","firewall.proxy-address","firewall.proxy-addrgrp","firewall.vip","firewall.vipgrp","firewall.vip46","firewall.vipgrp46","firewall.address6","firewall.addrgrp6","firewall.vip6","firewall.vipgrp6","firewall.vip64","firewall.vipgrp64"];hasDestinationAddress=selected.some(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;return addressTypes.indexOf(datasource)>=0}),hasInternetService=selected.some(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name,internetServiceTypes=["firewall.internet-service","firewall.internet-service-custom"];return internetServiceTypes.indexOf(datasource)>=0})}if(hasDestinationAddress){var vipMixedAddrError=validateVIPMixedAddr(selected);if(vipMixedAddrError)return vipMixedAddrError}return"enable"===meta.policy["internet-service"]&&hasDestinationAddress?$.getInfo("This policy has Internet Service enabled. Internet Services must be used for destination."):"disable"===meta.policy["internet-service"]&&hasInternetService?$.getInfo("This policy has Internet Service disabled. Internet Services cannot be used for destination."):void 0},hidden=function(entry,meta,selector){var selected,originals=meta.policy.$original[selector];return selected=Array.isArray(originals)?originals.some(function(original){return entry.q_origin_key===original.q_origin_key}):entry.q_origin_key===originals&&originals.q_origin_key,!selected&&"disable"===entry.visibility},isWildcardFQDN=function(addr){var isAddress=(addr.q_name||addr.datasource).indexOf("address")>=0;return isAddress?(addr.type||addr["css-class"]).indexOf("wildcard-fqdn")>=0:(addr.member||[]).some(function(memberAddr){return isWildcardFQDN(memberAddr)})},associateWithInterface=function(entry,meta,relatedInterfaceKey){var associated,related,isAssociated=!0;return entry["associated-interface"]&&relatedInterfaceKey&&(associated=entry["associated-interface"],related=meta.policy[relatedInterfaceKey],related&&!Array.isArray(related)&&(related=[related]),related&&1===related.length&&related[0].name===associated.name||(isAssociated=!1)),isAssociated},filterIPv4Address=function(entry,meta,relatedInterfaceKey,selector){return!(isWildcardFQDN(entry)||!associateWithInterface(entry,meta,relatedInterfaceKey)||hidden(entry,meta,selector))},filterNatIPv4Address=function(entry,meta,relatedInterfaceKey,selector){return filterIPv4Address(entry,meta,relatedInterfaceKey,selector)},isWebProxyPolicy=function(policy){return"explicit-web"===policy.proxy||"transparent-web"===policy.proxy},filterProxyPolicyIPv4DstAddress=function(entry,meta){return!(!isWebProxyPolicy(meta.policy)&&isWildcardFQDN(entry)||!associateWithInterface(entry,meta,"dstintf")||hidden(entry,meta,"dstaddr"))},filterUserGroup=function(entry,meta){return"ipsec"!==meta.policy.action},filterGroup=function(entry,meta){var groupType,isDatasourceEntry,srcIntf=meta.policy.srcintf;return!!filterUserGroup(entry,meta)&&(!srcIntf||1!==srcIntf.length||srcIntf[0].name!==meta.sslVPNInterface||(groupType=entry["group-type"],isDatasourceEntry=null==groupType&&null==entry.member,isDatasourceEntry||"firewall"===groupType))},filterIPv6Address=function(entry,meta,selector){return!hidden(entry,meta,selector)},filterAddressGroup=function(entry,meta,selector){return!hidden(entry,meta,selector)&&!isWildcardFQDN(entry)},filterAddressGroupIntf=function(entry,meta,relatedInterfaceKey,selector,addressMap,addressGroupMap){var groupAssociateWithInterface=!entry.member||entry.member.every(function memberAssociated(member){var memberEntry,associated=!0;return"firewall.address"===member.datasource&&addressMap?(memberEntry=addressMap[member.name],associated=associateWithInterface(memberEntry,meta,relatedInterfaceKey)):addressGroupMap&&(memberEntry=addressGroupMap[member.name],associated=memberEntry.member.every(memberAssociated)),associated});return!(!filterAddressGroup(entry,meta,selector)||!groupAssociateWithInterface)},filterProxyPolicyIPv4DstAddressGroup=function(entry,meta){return!(hidden(entry,meta,"dstaddr")||!isWebProxyPolicy(meta.policy)&&isWildcardFQDN(entry))},filterProxyPolicyIPv6Address=function(entry,meta,includeIPv6Address,selector){return includeIPv6Address&&isWebProxyPolicy(meta.policy)&&filterIPv6Address(entry,meta,selector)},filterProxyPolicyIPv6AddressGroup=function(entry,meta,includeIPv6Address,selector){return includeIPv6Address&&isWebProxyPolicy(meta.policy)&&filterAddressGroup(entry,meta,selector)},filterVIP=function(entry,meta){var valid=!0,restricted=(entry.extintf||entry.interface||{}).name||"any";return state.centralNatEnabled()?valid=!1:"any"!==restricted&&Array.isArray(meta.policy.srcintf)&&(valid=meta.policy.srcintf.some(function(intf){return intf.is_zone||intf.is_virtual_wan_link?intf.members.some(function(member){return member===restricted}):!intf.status||intf.name===restricted})),valid},isVIPGroup=function(entry){return(entry.q_name||entry.datasource).indexOf("vipgrp")>=0},isAddressNegated=function(meta,selector){return selector.indexOf("-negate")<0&&(selector+="-negate"),"enable"===meta.policy[selector]},filterProxyPolicyVIP=function(entry,meta){if(!isWebProxyPolicy(meta.policy)||isAddressNegated(meta,"dstaddr"))return!1;var datasource=entry.q_name||entry.datasource;if(!isVIPGroup(entry))if(datasource.indexOf("vip46")>=0||datasource.indexOf("vip64")>=0){if("disable"!==entry.portforward&&"any"!==entry.protocol&&"tcp"!==entry.protocol)return!1}else if(datasource.indexOf("vip6")>=0){if("static-nat"!==entry.type||"disable"!==entry.portforward&&"any"!==entry.protocol&&"tcp"!==entry.protocol)return!1}else if("static-nat"!==entry.type||"disable"!==entry.portforward&&("1-to-1"!==entry["portmapping-type"]||"any"!==entry.protocol&&"tcp"!==entry.protocol))return!1;return!0},filterProxyPolicyIPv6VIP=function(entry,meta,includeIPv6Address){return includeIPv6Address&&filterProxyPolicyVIP(entry,meta)},filterMulticast=function(entry,meta,relatedInterfaceKey){return!(!associateWithInterface(entry,meta,relatedInterfaceKey)||hidden(entry,meta,"dstaddr"))},filterProxyPolicyAddress=function(entry,meta,selector){if(!isWebProxyPolicy(meta.policy)||hidden(entry,meta,selector))return!1;var validDstaddrType=["host-regex","url","category","dst-advanced"];return!entry.type||("srcaddr"===selector?validDstaddrType.indexOf(entry.type)<0:validDstaddrType.indexOf(entry.type)>=0)},filterProxyPolicyAddressGroup=function(entry,meta,selector){return!(!isWebProxyPolicy(meta.policy)||hidden(entry,meta,selector))&&(!entry.type||("srcaddr"===selector?"src"===entry.type:"dst"===entry.type))},filterProxyPolicyUTMProfile=function(entry,meta,selector){var exempted=["voip-profile","spamfilter-profile","mms-profile"],allowed=["profile-protocol-options","av-profile","dlp-sensor"],webOnly=["waf-profile","webfilter-profile","application-list","ips-sensor","icap-profile","ssl-ssh-profile"],webproxy=isWebProxyPolicy(meta.policy);return meta.policy.$cmdb.name.indexOf("proxy-policy")<0||("profile-group"===selector?!entry.hasOwnProperty("profile-protocol-options")||!!entry["profile-protocol-options"]:!(exempted.indexOf(selector)>=0)&&(allowed.indexOf(selector)>=0||!!(webproxy&&webOnly.indexOf(selector)>=0)))},filterUTMProfile=function(entry,meta,selector){var cmdbName=meta.policy.$cmdb.name,original=meta.policy.$$original[selector];if("ssl-ssh-profile"!==selector||!state.isNgfwPolicyMode()||"policy"!==cmdbName&&"policy6"!==cmdbName){if(selector&&original&&entry.name===original.q_origin_key)return!0;if("flow-based"===entry["inspection-mode"]&&state.getInspectionMode()===state.INSPECTION_MODE.PROXY)return!1;if(filterProxyPolicyUTMProfile(entry,meta,selector)){var actionValid=cmdbName.indexOf("proxy-policy")>=0||"deny"!==meta.policy.action&&"enable"!==meta.policy["learning-mode"];if(!state.featureEnabled("gui-multiple-utm-profiles")){var profileDefault="ssl-ssh-profile"!==entry.q_name?DEFAULT_UTM_PROFILE:CERTIFICATE_INSPECTION_UTM_PROFILE;return entry.name===profileDefault&&actionValid}return entry.name!==SNIFFER_UTM_PROFILE&&actionValid}return!1}return!1},utmGenericFilter=function(entry,meta){var path=entry.datasource||entry.q_path+"."+entry.q_name,selector=VALUE_SPLIT_MAP.profile[path];return filterUTMProfile(entry,meta,selector)},filterNgfwSslSshProfile=function(entry){return entry.name===state.getVdomSslSshProfile()},fitlerLearningModeInterface=function(entry,target){return"any"!==entry.name&&!(!entry.supports_device_id&&"srcintf"===target)},filterInterface=function(entry,meta,target){target=target||"srcintf";var selected,originalInterface=meta.policy.$$original[target];if(selected=Array.isArray(originalInterface)?originalInterface.some(function(intf){return entry.q_origin_key===intf.q_origin_key}):entry.q_origin_key===originalInterface.q_origin_key)return!0;if(!entry.valid_in_policy||entry.is_zone_member||entry.is_switchctl_interface_mode)return!1;if("policy"===meta.policyType){if(entry.is_virtual_wan_link_member)return!1;if("enable"===meta.policy["learning-mode"]&&!fitlerLearningModeInterface(entry,target))return!1}else if("proxy-policy"===meta.policyType){if(entry.is_virtual_wan_link_member)return!1}else if(entry.is_virtual_wan_link)return!1;return!(!meta.virtualWirePolicy&&entry.is_virtual_wire_pair_member)&&!(!state.featureEnabled("gui-multiple-interface-policy")&&"any"===entry.name&&!meta.policy.implicit)},filterDestinationInterface=function(entry,meta){return filterInterface(entry,meta,"dstintf")},filterMulticastInterface=function(entry,meta,target){target=target||"srcintf";var selected,counterpart="srcintf"===target?"dstintf":"srcintf",originalInterface=meta.policy.$$original[target];return selected=Array.isArray(originalInterface)?originalInterface.some(function(intf){return entry.q_origin_key===intf.q_origin_key}):entry.q_origin_key===originalInterface.q_origin_key,!!selected||!(!entry.valid_in_policy||entry.is_modem_hidden||entry.used_by_composite||entry.is_zone||entry.is_switchctl_interface_mode)&&(!entry.is_virtual_wan_link&&(meta.policy[counterpart].name!==entry.name||"any"===entry.name))},filterProxyPolicyDstInterface=function(entry,meta){return!!filterDestinationInterface(entry,meta)&&(state.getOperationMode()!==state.OPERATION_MODE.TRANSPARENT||"any"===entry.name)},filterDeviceCategory=function(entry,meta){if("collected-emails"===entry.name){var inUse=meta.policy.devices.some(function(device){return"collected-emails"===device.name});return inUse||state.featureEnabled("gui-email-collection")}return!0},filterProxyPolicyWebService=function(entry,meta){return(null==entry.visibility||!hidden(entry,meta,"service"))&&"disable"!==entry.proxy},filterApplication=function(entry,meta){return!meta.policy["url-category"].length||entry.technology.indexOf("Browser-Based")>=0},filterApplicationCategory=function(entry){var meta=Omniselect.getSourceMetaDataSync("application.category");if(meta&&meta.categoryIdsWithApps)return meta.categoryIdsWithApps[entry.id]};return OmniselectConfigService.$inject=["$routeParams","state","policyVWP","$q","$http"],OmniselectConfigService.prototype.init=function(){var SSLVPN_INTERFACE="ssl."+state.getOperatingVDOM(),BASE_POLICY={},BASE_MULTICAST_POLICY={},IPv4_POLICY={},NGFW_POLICY={},PROXY_POLICY={};BASE_MULTICAST_POLICY.srcintf=BASE_POLICY.srcintf={sources:["firewallInterfaces"],filterFunction:filterInterface,solitaryEntries:{any:!0},validateFunction:required},BASE_POLICY.srcintf.solitaryEntries[SSLVPN_INTERFACE]=!0,BASE_MULTICAST_POLICY.dstintf=BASE_POLICY.dstintf={sources:["firewallInterfaces"],filterFunction:filterDestinationInterface,validateFunction:required},BASE_POLICY.dstaddr={sources:["firewall.address","firewall.addrgrp"],filterFunction:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,"dstintf","dstaddr")},"firewall.addrgrp":function(entry,meta){return filterAddressGroup(entry,meta,"dstaddr")}},validateFunction:required},BASE_POLICY.schedule={sources:["firewall.schedule.recurring","firewall.schedule.onetime","firewall.schedule.group"],singleSelect:!0,validateFunction:required},BASE_POLICY.service={sources:["firewall.service.custom","firewall.service.group"],validateFunction:required,filterFunction:{"firewall.service.custom":function(entry,meta){return!(hidden(entry,meta,"service")||entry.proxy&&filterProxyPolicyWebService(entry,meta))},"firewall.service.group":function(entry,meta){return!entry.proxy||!filterProxyPolicyWebService(entry,meta)}}},BASE_POLICY.users={sources:["user.local"]},BASE_POLICY.groups={sources:["user.group"],filterFunction:filterGroup},BASE_POLICY.devices={sources:["user.device-category","user.device","user.device-group"]},BASE_POLICY["traffic-shaper"]={sources:["firewall.shaper.traffic-shaper"],singleSelect:!0},BASE_POLICY["per-ip-shaper"]={sources:["firewall.shaper.per-ip-shaper"],singleSelect:!0};var POLICY_WITH_UTM={};POLICY_WITH_UTM["profile-group"]={sources:"firewall.profile-group",singleSelect:!0,filterFunction:utmGenericFilter},POLICY_WITH_UTM["av-profile"]={sources:"antivirus.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["webfilter-profile"]={sources:"webfilter.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["dnsfilter-profile"]={sources:"dnsfilter.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["waf-profile"]={sources:"waf.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["application-list"]={sources:"application.list",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["ips-sensor"]={sources:"ips.sensor",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["spamfilter-profile"]={sources:"spamfilter.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["dlp-sensor"]={sources:"dlp.sensor",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["voip-profile"]={sources:"voip.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["icap-profile"]={sources:"icap.profile",filterFunction:utmGenericFilter,singleSelect:!0},POLICY_WITH_UTM["profile-protocol-options"]={filterFunction:utmGenericFilter,sources:"firewall.profile-protocol-options",singleSelect:!0},POLICY_WITH_UTM["ssl-ssh-profile"]={filterFunction:utmGenericFilter,sources:"firewall.ssl-ssh-profile",singleSelect:!0},POLICY_WITH_UTM["mms-profile"]={sources:"firewall.mms-profile",singleSelect:!0},NGFW_POLICY["url-category"]={sources:["webfilter.ftgd-cat","webfilter.ftgd-local-cat"]},NGFW_POLICY.applications={sources:{},filterFunction:{"application.name":filterApplication,"application.custom":filterApplication,"application.category":filterApplicationCategory}},NGFW_POLICY.applications.sources[$.getInfo("app")]=["application.name","application.custom"],NGFW_POLICY.applications.sources[$.getInfo("appcat")]=["application.category"],NGFW_POLICY.ngfwSslSshProfile={sources:"firewall.ssl-ssh-profile",filterFunction:filterNgfwSslSshProfile,singleSelect:!0},IPv4_POLICY=angular.extend({},BASE_POLICY,POLICY_WITH_UTM,NGFW_POLICY),IPv4_POLICY["internet-service-id"]={sources:"firewall.internet-service"},IPv4_POLICY["internet-service-custom"]={sources:"firewall.internet-service-custom"},PROXY_POLICY=angular.extend({},BASE_POLICY,POLICY_WITH_UTM),PROXY_POLICY["internet-service-id"]={sources:"firewall.internet-service"},PROXY_POLICY["internet-service-custom"]={sources:"firewall.internet-service-custom"};var config,type=$routeParams.type,contextPromises=[cmdbGet("web-proxy","explicit"),cmdbGet("application","custom"),cmdbGet("webfilter","ftgd-local-cat")];return $q.all(contextPromises).then(function(contexts){var proxySetting=contexts[0];this.customApps=mapArray(contexts[1],"id"),this.localFtgdCats=mapArray(contexts[2],"id");var validateAddress,validateUser=createOneOfRequired(["user.group","user.local"],ONE_USER_MESSAGE);if("policy"===type)config=angular.copy(IPv4_POLICY),validateAddress=createOneOfRequired(["firewall.address","firewall.addrgrp"],ONE_ADDRESS_MESSAGE),config.source={sources:{},preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,"srcintf","srcaddr")},"firewall.addrgrp":function(entry,meta){var addrMap,groupMap;try{addrMap=this.getSourceResults("firewall.address").mapping,groupMap=this.getSourceResults("firewall.addrgrp").mapping}catch(e){}return filterAddressGroupIntf(entry,meta,"srcintf","srcaddr",addrMap,groupMap)},"user.device-category":filterDeviceCategory,"user.group":filterGroup,"user.local":filterUserGroup},validateFunction:function(selected,meta){return(meta.policy.srcintf[0]||{}).is_sslvpn?validateUser(selected)||validateAddress(selected):validateAddress(selected)}},config.srcaddr={preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,"srcintf","srcaddr")}},validateFunction:required},config.srcaddr.sources=config.source.sources[$.getInfo("Address")]=["firewall.address","firewall.addrgrp"],config.source.sources[$.getInfo("user")]=["user.local","user.group"],config.source.sources[$.getInfo("Device")]=["user.device-category","user.device","user.device-group"],config.dstaddr={sources:["firewall.address","firewall.addrgrp","firewall.vip","firewall.vipgrp"],preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,"dstintf","dstaddr")},"firewall.addrgrp":function(entry,meta){var addrMap,groupMap;try{addrMap=this.getSourceResults("firewall.address").mapping,groupMap=this.getSourceResults("firewall.addrgrp").mapping}catch(e){}return filterAddressGroupIntf(entry,meta,"dstintf","dstaddr",addrMap,groupMap)},"firewall.vip":filterVIP,"firewall.vipgrp":filterVIP},validateFunction:validateVIPMixedAddr},config.destination={sources:{},preProcessSelected:!0,filterFunction:{"firewall.internet-service-custom":function(entry){return!entry["master-service-id"]}},validateFunction:validateIPv4orProxyDestination},config.destination.sources[$.getInfo("Address")]=config.dstaddr.sources,config.destination.sources[$.getInfo("Internet Service")]=["firewall.internet-service","firewall.internet-service-custom"],angular.extend(config.destination.filterFunction,config.dstaddr.filterFunction),config.poolname={sources:["firewall.ippool"]},config.vpntunnel={sources:["vpn.ipsec.phase1","vpn.ipsec.manualkey"],extraData:function(){return Omniselect.getSourceData("system.zone").then(function(zones){return zones.mapping})},filterFunction:function(entry,meta,zoneMap){var destInterface,zone,tunnelInterface=(entry.interface||{}).name;return!(!meta.policy.dstintf||1!==meta.policy.dstintf.length)&&(destInterface=meta.policy.dstintf[0]||{},tunnelInterface&&destInterface.is_virtual_wan_link?(destInterface.members||[]).some(function(memberName){return memberName===tunnelInterface}):!tunnelInterface||!zoneMap||(zone=zoneMap[destInterface.name],zone?zone.interface.some(function(intf){return intf["interface-name"]===tunnelInterface}):tunnelInterface===destInterface.name))},singleSelect:!0},config["wanopt-profile"]={sources:["wanopt.profile"],singleSelect:!0},config["wanopt-peer"]={sources:["wanopt.peer"],singleSelect:!0},config.gtp={sources:["firewall.gtp"],singleSelect:!0};else if("policy6"===type)config=angular.extend({},BASE_POLICY,POLICY_WITH_UTM,NGFW_POLICY),validateAddress=createOneOfRequired(["firewall.address6","firewall.addrgrp6"],ONE_ADDRESS_MESSAGE),config.source={sources:{},filterFunction:{"firewall.address6":function(entry,meta){return filterIPv6Address(entry,meta,"srcaddr")},"firewall.addrgrp6":function(entry,meta){return filterAddressGroup(entry,meta,"srcaddr")},"user.device-category":filterDeviceCategory,"user.group":filterGroup,"user.local":filterUserGroup},validateFunction:function(selected,meta){return(meta.policy.srcintf[0]||{}).is_sslvpn?validateUser(selected)||validateAddress(selected):validateAddress(selected)}},config.srcaddr={filterFunction:{"firewall.address6":function(entry,meta){return filterIPv6Address(entry,meta,"srcaddr")}},validateFunction:required},config.srcaddr.sources=config.source.sources[$.getInfo("Address")]=["firewall.address6","firewall.addrgrp6"],config.source.sources[$.getInfo("user")]=["user.local","user.group"],config.source.sources[$.getInfo("Device")]=["user.device-category","user.device","user.device-group"],config.dstaddr={sources:["firewall.address6","firewall.addrgrp6","firewall.vip6","firewall.vipgrp6"],filterFunction:{"firewall.address6":function(entry,meta){return filterIPv6Address(entry,meta,"dstaddr")},"firewall.addrgrp6":function(entry,meta){return filterAddressGroup(entry,meta,"dstaddr")}},validateFunction:validateVIPMixedAddr},config.poolname={sources:["firewall.ippool6"]};else if("policy46"===type)config=angular.copy(BASE_POLICY),config.srcintf.singleSelect=config.dstintf.singleSelect=!0,config.srcaddr={sources:["firewall.address","firewall.addrgrp"],preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterNatIPv4Address(entry,meta,"srcintf","srcaddr")},"firewall.addrgrp":function(entry,meta){var addrMap,groupMap;try{addrMap=this.getSourceResults("firewall.address").mapping,groupMap=this.getSourceResults("firewall.addrgrp").mapping}catch(e){}return filterAddressGroupIntf(entry,meta,"srcintf","srcaddr",addrMap,groupMap)}},validateFunction:required},config.dstaddr={sources:["firewall.vip46","firewall.vipgrp46"],validateFunction:required};else if("policy64"===type)config=angular.copy(BASE_POLICY),config.srcintf.singleSelect=config.dstintf.singleSelect=!0,config.srcaddr={sources:["firewall.address6","firewall.addrgrp6"],filterFunction:{"firewall.address6":function(entry,meta){return filterIPv6Address(entry,meta,"srcaddr")},"firewall.addrgrp6":function(entry,meta){
return filterAddressGroup(entry,meta,"srcaddr")}},validateFunction:required},config.dstaddr={sources:["firewall.address","firewall.addrgrp","firewall.vip64","firewall.vipgrp64"],preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterNatIPv4Address(entry,meta,"dstintf","dstaddr")&&!("geography"===entry.type||"fqdn"===entry.type||"wildcard"===entry.type)},"firewall.addrgrp":function(entry,meta){var addrMap,groupMap;try{addrMap=this.getSourceResults("firewall.address").mapping,groupMap=this.getSourceResults("firewall.addrgrp").mapping}catch(e){}return filterAddressGroupIntf(entry,meta,"dstintf","dstaddr",addrMap,groupMap)}},validateFunction:validateVIPMixedAddr},config.poolname={sources:["firewall.ippool"]};else if("multicast-policy"===type)config=angular.copy(BASE_MULTICAST_POLICY),config.srcintf.singleSelect=config.dstintf.singleSelect=!0,config.srcintf.filterFunction=function(entry,meta){return filterMulticastInterface(entry,meta)},config.dstintf.filterFunction=function(entry,meta){return filterMulticastInterface(entry,meta,"dstintf")},config.srcaddr={sources:["firewall.address","firewall.addrgrp"],preProcessSelected:!0,filterFunction:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,"srcintf","srcaddr")},"firewall.addrgrp":function(entry,meta){var addrMap,groupMap;try{addrMap=this.getSourceResults("firewall.address").mapping,groupMap=this.getSourceResults("firewall.addrgrp").mapping}catch(e){}return filterAddressGroupIntf(entry,meta,"srcintf","srcaddr",addrMap,groupMap)}},validateFunction:required},config.dstaddr={sources:["firewall.multicast-address"],validateFunction:required,filterFunction:{"firewall.multicast-address":function(entry,meta){return filterMulticast(entry,meta,"dstintf")}},preProcessSelected:!0},config.protocol={options:[{id:0,name:$.getInfo("any")},{id:1,name:$.getInfo("icmp")},{id:2,name:$.getInfo("IGMP")},{id:6,name:$.getInfo("tcp")},{id:17,name:$.getInfo("udp")},{id:89,name:$.getInfo("ospf")},{id:-1,name:$.getInfo("other")}]};else if("proxy-policy"===type){var srcaddrSources,dstaddrSources,includeIPv6Address="enable"===proxySetting["ipv6-status"],srcaddr4Sources=["firewall.address","firewall.addrgrp","firewall.proxy-address","firewall.proxy-addrgrp"],dstaddr4Sources=["firewall.address","firewall.addrgrp","firewall.proxy-address","firewall.proxy-addrgrp","firewall.vip","firewall.vipgrp","firewall.vip46","firewall.vipgrp46"],srcaddr6Sources=["firewall.address6","firewall.addrgrp6"],dstaddr6Sources=["firewall.address6","firewall.addrgrp6","firewall.vip6","firewall.vipgrp6","firewall.vip64","firewall.vipgrp64"],internetServiceSources=["firewall.internet-service","firewall.internet-service-custom"];includeIPv6Address&&state.featureEnabled("gui-ipv6")?(srcaddrSources=srcaddr4Sources.concat(srcaddr6Sources),dstaddrSources=dstaddr4Sources.concat(dstaddr6Sources)):(srcaddrSources=srcaddr4Sources,dstaddrSources=dstaddr4Sources);var filterFunctions={srcaddr:{"firewall.address":function(entry,meta){return filterIPv4Address(entry,meta,null,"srcaddr")},"firewall.addrgrp":function(entry,meta){return filterAddressGroup(entry,meta,"srcaddr")},"firewall.proxy-address":function(entry,meta){return filterProxyPolicyAddress(entry,meta,"srcaddr")},"firewall.proxy-addrgrp":function(entry,meta){return filterProxyPolicyAddressGroup(entry,meta,"srcaddr")}},srcaddr6:{"firewall.address6":function(entry,meta){return filterProxyPolicyIPv6Address(entry,meta,includeIPv6Address,"srcaddr6")},"firewall.addrgrp6":function(entry,meta){return filterProxyPolicyIPv6AddressGroup(entry,meta,includeIPv6Address,"srcaddr6")}},dstaddr:{"firewall.address":filterProxyPolicyIPv4DstAddress,"firewall.addrgrp":filterProxyPolicyIPv4DstAddressGroup,"firewall.proxy-address":function(entry,meta){return filterProxyPolicyAddress(entry,meta,"dstaddr")},"firewall.proxy-addrgrp":function(entry,meta){return filterProxyPolicyAddressGroup(entry,meta,"dstaddr")},"firewall.vip":filterProxyPolicyVIP,"firewall.vipgrp":filterProxyPolicyVIP,"firewall.vip46":filterProxyPolicyVIP,"firewall.vipgrp46":filterProxyPolicyVIP},dstaddr6:{"firewall.address6":function(entry,meta){return filterProxyPolicyIPv6Address(entry,meta,includeIPv6Address,"dstaddr6")},"firewall.addrgrp6":function(entry,meta){return filterProxyPolicyIPv6AddressGroup(entry,meta,includeIPv6Address,"dstaddr6")},"firewall.vip6":function(entry,meta){return filterProxyPolicyIPv6VIP(entry,meta,includeIPv6Address)},"firewall.vipgrp6":function(entry,meta){return filterProxyPolicyIPv6VIP(entry,meta,includeIPv6Address)},"firewall.vip64":function(entry,meta){return filterProxyPolicyIPv6VIP(entry,meta,includeIPv6Address)},"firewall.vipgrp64":function(entry,meta){return filterProxyPolicyIPv6VIP(entry,meta,includeIPv6Address)}},internetService:{"firewall.internet-service-custom":function(entry){return!entry["master-service-id"]}}};config=angular.copy(PROXY_POLICY),config.srcaddr={filterFunction:filterFunctions.srcaddr},config.srcaddr6={filterFunction:filterFunctions.srcaddr6},config["proxy-source"]={sources:{},filterFunction:angular.extend({},filterFunctions.srcaddr,filterFunctions.srcaddr6)},config.srcaddr.sources=config["proxy-source"].sources[$.getInfo("Address")]=srcaddr4Sources,config.srcaddr6.sources=config["proxy-source"].sources[$.getInfo("firewall.address6")]=srcaddr6Sources,config.srcaddr.preProcessSelected=config.srcaddr6.preProcessSelected=config["proxy-source"].preProcessSelected=!0,config.srcaddr.validateFunction=config.srcaddr6.validateFunction=config["proxy-source"].validateFunction=createOneOfRequired(srcaddrSources,ONE_ADDRESS_MESSAGE),config["proxy-source"].sources[$.getInfo("user")]=["user.local","user.group"],config.dstaddr={filterFunction:filterFunctions.dstaddr},config.dstaddr6={filterFunction:filterFunctions.dstaddr6},config["proxy-destination"]={sources:{},filterFunction:angular.extend({},filterFunctions.dstaddr,filterFunctions.dstaddr6,filterFunctions.internetService)},config.dstaddr.sources=config["proxy-destination"].sources[$.getInfo("Address")]=dstaddr4Sources,config.dstaddr6.sources=config["proxy-destination"].sources[$.getInfo("firewall.address6")]=dstaddr6Sources,config["proxy-destination"].sources[$.getInfo("Internet Service")]=internetServiceSources,config.dstaddr.preProcessSelected=config.dstaddr6.preProcessSelected=config["proxy-destination"].preProcessSelected=!0,config.dstaddr.validateFunction=config.dstaddr6.validateFunction=config["proxy-destination"].validateFunction=validateIPv4orProxyDestination,config.dstintf.filterFunction=filterProxyPolicyDstInterface,config.service.filterFunction={"firewall.service.custom":filterProxyPolicyWebService,"firewall.service.group":filterProxyPolicyWebService},config["webproxy-forward-server"]={sources:["web-proxy.forward-server","web-proxy.forward-server-group"],singleSelect:!0}}else config={};this.type=type,this.config=config,this.sslVPNInterface=SSLVPN_INTERFACE}.bind(this))},OmniselectConfigService.prototype.checkExists=function(selector){return!(policyVWP.isVirtualWirePolicy()&&["srcintf","dstintf"].indexOf(selector)>=0)&&!!this.config[selector]},OmniselectConfigService.prototype.get=function(selector,policy,processFn){var settings=this.config[selector];return settings?(settings=angular.extend({},settings),settings.meta||(settings.meta={}),settings.meta.policy=policy,settings.meta.policyType=this.type,settings.meta.virtualWirePolicy=policyVWP.isVirtualWirePolicy(),settings.meta.sslVPNInterface=this.sslVPNInterface,processFn&&(settings=processFn(settings))):fweb.log("No omniselect config for "+selector),settings},OmniselectConfigService.prototype.isProxyPolicy=function(){return"proxy-policy"===this.type},OmniselectConfigService.prototype.getProfilesSettings=function(selectors,policy){var profileIndex,settings={allSolitary:!0,solitaryLevel:"source",meta:{policy:policy},filterFunction:utmGenericFilter,sources:[]};return state.featureEnabled("gui-dynamic-profile-display")&&"group"===policy["profile-type"]?selectors=["profile-group"]:(profileIndex=selectors.indexOf("profile-group"),profileIndex>=0&&(selectors=selectors.slice(),selectors.splice(selectors.indexOf("profile-group"),1)),settings.validateFunction=validateProfiles(policy)),selectors.forEach(function(selector){settings.sources=settings.sources.concat(this.config[selector].sources)}.bind(this)),settings},OmniselectConfigService.prototype.splitValues=function(selector,values,singleSelect){var updated={},splitMap=VALUE_SPLIT_MAP[selector];return Object.keys(splitMap).forEach(function(key){updated[splitMap[key]]=singleSelect?null:[]}),values.forEach(function(entry){var sourceID=entry.datasource||entry.q_path+"."+entry.q_name,dest=splitMap[sourceID];singleSelect?updated[dest]=entry:updated[dest].push(entry)}),updated},OmniselectConfigService.prototype.splitKeys=function(selector){var splitMap=VALUE_SPLIT_MAP[selector];return new Set(fweb.util.objects.values(splitMap))},OmniselectConfigService.prototype.postProcessSelect=function(settings,selector){var policy=settings.meta.policy;if(!state.featureEnabled("gui-multiple-interface-policy")&&("srcintf"===selector||"dstintf"===selector)&&Array.isArray(settings.meta.policy[selector])&&settings.meta.policy[selector].length<=1&&(settings.singleSelect=!0),"destination"===selector||"proxy-destination"===selector){var internetServices=policy["internet-service-id"]||[],customInternetServices=policy["internet-service-custom"]||[];internetServices.forEach(function(internetService){internetService.datasource="firewall.internet-service"}),customInternetServices.forEach(function(customInternetService){customInternetService.datasource="firewall.internet-service-custom"})}if("applications"===selector){var applications=policy.application||[],appCategories=policy["app-category"]||[];applications.forEach(function(app){var customApp=this.customApps[app.id];app.datasource=customApp?"application.custom":"application.name"}.bind(this)),appCategories.forEach(function(cat){cat.datasource="application.category"})}if("url-category"===selector){var urlCategories=policy["url-category"];urlCategories.forEach(function(cat){var localFtgdCat=this.localFtgdCats[cat.id];cat.datasource=localFtgdCat?"webfilter.ftgd-local-cat":"webfilter.ftgd-cat"}.bind(this))}return settings},function(providers){providers.$provide.service("policyOmniselectConfig",OmniselectConfigService)}}),define("ng/firewall/policy/services/qlist_config",["angular","jquery","ng/services/loader","fweb","notify"],function(angular,$,loader,fweb){"use strict";var COLUMNS,$q,$compile,$templateCache,CMDB,$route,$window,$timeout,$scope,state,policyStats,processPolicy,policyListViewType,policyOmniselectConfig,policyInit,dragEntry,PARTIALS="/ng/firewall/policy/partials/",COMPARE_TIP_TEMPLATE=loader.base_path(PARTIALS+"compare_qtip.html"),POLICY_WARNINGS_TEMPLATE=loader.base_path(PARTIALS+"firewall_policy_warnings.html"),INFO_DEFAULT_CSF_LOGGING_MODE="Security Fabric is enabled so logging will exempt traffic from downstream FortiGates.",INFO_NGFW_SNAT="NGFW mode is policy-based so NAT settings from matching Central SNAT policies will be applied.",OBJECT_TIP_CLASS="omniselect-object-tip",LAZY_TEMPLATE_TIP_CLASS="lazy-tip",SIMPLE_TIP_CLASS="simple-tip",TIP_TEMPLATE="qtipTemplate",OBJECT_CLASS="object",OBJECT_DATA="objectData",TIP_DATA=OBJECT_DATA,TIP_CONFIG="tipConfig",POLICY_ACTION_BASE_KEY="Firewall::policyAction.",PROFILE_GROUP_SELECTOR="profile-group",UTM_PROFILE_SELECTORS=["av-profile","spamfilter-profile","webfilter-profile","dnsfilter-profile","waf-profile","application-list","ips-sensor","dlp-sensor","icap-profile","voip-profile","mms-profile","profile-protocol-options","ssl-ssh-profile","ngfwSslSshProfile",PROFILE_GROUP_SELECTOR],CONSOLIDATED_UTM_PROFILE_SELECTOR="profile",SUPPORTED_COMPARE_TOOLTIP_KEYS=["bytes","packets","last_used","first_used","active_sessions","hit_count","packets_dropped","software_bytes","software_packets","asic_bytes","asic_packets","nturbo_bytes","nturbo_packets"],tipScopes=[],omniselects={},formattersCleanUp=function(){policyStats.clearListeners(),tipScopes.forEach(function(scope){scope.$destroy()}),Object.keys(omniselects).forEach(function(policyKey){var map=omniselects[policyKey];Object.keys(map).forEach(function(key){map[key].destroy()}),delete omniselects[policyKey]})},COLUMN_DEPENDENCY_CHECKS={carrier:function(){return state.carrier_mode},proxyVDOM:function(){return state.getInspectionMode()===state.INSPECTION_MODE.PROXY},natMode:function(){var policyType=$route.current.params.type,showNAT=state.getOperationMode()===state.OPERATION_MODE.NAT&&"virtual-wire"!==$route.current.params.subType;return"central-snat-map"===policyType&&(showNAT=showNAT&&state.isNgfwPolicyMode()),showNAT},ngfwPolicyMode:function(){return state.isNgfwPolicyMode()},ngfwProfileMode:function(){return!state.isNgfwPolicyMode()},haveNetNpu:function(){return fweb.BUILD.PLATFORM.HAVE_NET_NPU},haveNturbo:function(){return fweb.BUILD.PLATFORM.HAVE_NTURBO_NP6},policyAction:function(){var policyType=$route.current.params.type;return"central-snat-map"!==policyType||state.isNgfwPolicyMode()}},columnMeetsDependencies=function(column){var value=!0;return column&&(column.types.indexOf($route.current.params.type)<0&&(value=!1),value&&Array.isArray(column.features)&&(value=column.features.every(function(feature){return state.featureEnabled(feature)})),value&&Array.isArray(column.dependencies)&&(value=column.dependencies.every(function(check){if(!COLUMN_DEPENDENCY_CHECKS[check])throw new Error('Dependency check "'+check+"\" isn't defined");return COLUMN_DEPENDENCY_CHECKS[check]()}))),value},entryMeetsDependencies=function(entry,dependenciesMap){return!dependenciesMap||Object.keys(dependenciesMap).every(function(key){return entry[key]===dependenciesMap[key]})},spanFormat=function($td,column,entry){var value=entry[column.selector];return null!=value&&(value="<span>"+value+"</span>"),value},portFormat=function($td,column,entry){var value=entry[column.selector];return value=0===Number(value)?"":spanFormat($td,column,entry)},collectObjects=function(selectors,column,policy){var objects=[],filteredSelectors=(selectors||[column.selector]).filter(function(selector){return columnMeetsDependencies(COLUMNS[selector])});return filteredSelectors.forEach(function(selector){var value=policy[selector];Array.isArray(value)?(value.forEach(function(v){v.selector=selector}),objects=objects.concat(value)):value&&(value.selector=selector,objects.push(value))}),{objects:objects,filteredSelectors:filteredSelectors}},getPolicyOmniselectMap=function(policy){var key=policy.source_index;return omniselects[key]=omniselects[key]||{}},reProcessOmniselects=function(policy){var map=getPolicyOmniselectMap(policy);Object.keys(map).forEach(function(key){map[key].destroy(),delete map[key]})},getPolicyOmniselect=function(policy,selector,collected){var settings,omniselect,policyOmniselects=getPolicyOmniselectMap(policy),subKey=selector;return omniselect=policyOmniselects[subKey],omniselect||(settings=selector===CONSOLIDATED_UTM_PROFILE_SELECTOR?policyOmniselectConfig.getProfilesSettings(collected.filteredSelectors,policy):policyOmniselectConfig.get(selector,policy,function(settings){return policyOmniselectConfig.postProcessSelect(settings,selector)}),settings.preProcessSelected=!1,omniselect=new Omniselect({settings:settings,selected:collected.objects.filter(function(entry){return!entry.placeholder})}),policyOmniselects[subKey]=omniselect),omniselect},dragStart=function(){angular.element("body").addClass("drag-in-progress")},dragStop=function(){angular.element("body").removeClass("drag-in-progress")},isOmniselectSupported=function(selectDisabled,entry,column){var defaultChecks={selectConfigExists:function(){return column.selector===CONSOLIDATED_UTM_PROFILE_SELECTOR||policyOmniselectConfig.checkExists(column.selector)}},checks={proxyPolicy:function(){return!policyOmniselectConfig.isProxyPolicy()},learningPolicy:function(){return"enable"!==entry["learning-mode"]},denyPolicy:function(){return"deny"!==entry.action},internetServicePolicy:function(){return"enable"!==entry["internet-service"]},ngfwPolicyMode:function(){return!state.isNgfwPolicyMode()}};selectDisabled||(selectDisabled={});var supported=Object.keys(defaultChecks).every(function(key){return defaultChecks[key]()});return supported&&Object.keys(selectDisabled).every(function(key){return!angular.isFunction(checks[key])||checks[key]()})},createCollectionFormatting=function(selectors,fallbackFormatter,validCollectionFunction,checkOmniselectSupportPerObject){var getMeta=function(row,column){return row.dataSourceFormatFnMeta||(row.dataSourceFormatFnMeta={}),row.dataSourceFormatFnMeta[column.selector]||(row.dataSourceFormatFnMeta[column.selector]={}),row.dataSourceFormatFnMeta[column.selector]},getOmniselect=function(row,column){var meta=getMeta(row,column);return getPolicyOmniselect(row.entry,column.selector,meta.collected)},collectEntries=function(entry,column){var row=this,meta=getMeta(row,column),selectDisabled=COLUMNS[column.selector].omniselectDisabled;return meta.collected=collectObjects(selectors,column,entry),meta.omniselectSupported=isOmniselectSupported(selectDisabled,entry,column),meta.isProfiles=column.selector===CONSOLIDATED_UTM_PROFILE_SELECTOR,meta.collected.objects.forEach(function(object){if(object.omniselectSupported=meta.omniselectSupported,checkOmniselectSupportPerObject){var selectDisabled=COLUMNS[object.selector].omniselectDisabled,column={lang_key:COLUMNS[object.selector].config.lang_key,selector:object.selector};object.omniselectSupported=object.omniselectSupported&&isOmniselectSupported(selectDisabled,entry,column)}object.omniselectSupported&&(meta.someObjectSupportsOmniselect=!0)}),meta.collected.objects.length&&meta.someObjectSupportsOmniselect||entry.implicit||!meta.omniselectSupported||$scope.ADMIN_RO||meta.collected.objects.push({placeholder:'<f-icon class="fa-plus icon-sm"></f-icon>',omniselectSupported:meta.omniselectSupported}),meta.collected.objects},saveSelected=function(row,column,selection){var noProfileSelected,omniselect=getOmniselect(row,column),meta=getMeta(row,column),settings=omniselect._settings,groupType="group"===row.entry["profile-type"],updatedEntry=angular.copy(row.entry);if(selection.forEach(function(entry){entry.name=entry.name||entry.q_origin_key}),null!=updatedEntry[column.selector])settings.singleSelect&&!Array.isArray(settings.meta.policy[column.selector])?updatedEntry[column.selector]=selection[0]||null:updatedEntry[column.selector]=selection;else{var update=policyOmniselectConfig.splitValues(column.selector,selection,settings.singleSelect||settings.allSolitary);angular.extend(updatedEntry,update)}if(selection.length&&(meta.isProfiles||UTM_PROFILE_SELECTORS.indexOf(column.selector)>=0)){updatedEntry["utm-status"]="enable",column.selector===PROFILE_GROUP_SELECTOR?updatedEntry["profile-type"]="group":meta.isProfiles||(updatedEntry["profile-type"]="single");var proxyProfileSelected=Object.keys(policyInit.PROXY_PROFILES).some(function(key){var source=policyInit.PROXY_PROFILES[key].source,proxyProfilePath=source.path+"."+source.name;return!!selection.some(function(profile){return(profile.datasource||profile.q_path+"."+profile.q_name)===proxyProfilePath})});proxyProfileSelected&&(updatedEntry["profile-protocol-options"]=updatedEntry["profile-protocol-options"]||"default")}else!selection.length&&(meta.isProfiles||UTM_PROFILE_SELECTORS.indexOf(column.selector)>=0)&&(updatedEntry["profile-type"]="single",policyOmniselectConfig.isProxyPolicy()&&(updatedEntry["profile-protocol-options"]=updatedEntry["profile-protocol-options"]||"default"));selection.length||"poolname"!==column.selector||(updatedEntry.ippool="disable"),noProfileSelected=!selection.length&&meta.isProfiles||UTM_PROFILE_SELECTORS.every(function(profile){return!updatedEntry[profile]}),noProfileSelected&&!groupType&&(updatedEntry["ssl-ssh-profile"]="",updatedEntry["profile-protocol-options"]="",updatedEntry["utm-status"]="disable"),processPolicy.savePolicy(updatedEntry,row).finally(function(){var updatedObjects=collectObjects(selectors,column,row.entry).objects;omniselect.update({selected:updatedObjects,reProcess:!0}),reProcessOmniselects(row.entry),policyListViewType.update()})},openOmniselect=function(row,column,event){var omniselect=getOmniselect(row,column),promise=omniselect.openChooser(event),cellElement=row.getRenderedCellForColumnID(column.selector),removeEditing=function(){cellElement.classList.remove("editing")};promise.then(function(selected){saveSelected(row,column,selected),removeEditing()},function(){removeEditing()}),$timeout(function(){$scope.$root.$broadcast("clearQlistSelection")}),window.setTimeout(function(){cellElement.classList.add("editing")},100)},onCellRendered=function(row,column,innerCellElement){var canAddDragEntry,meta=getMeta(row,column),$innerCellElement=$(innerCellElement),$cellElement=$innerCellElement.parent();meta.omniselectSupported&&!row.entry.implicit&&($innerCellElement.data("selectEntries",function(){openOmniselect(row,column,event)}).addClass("drop-area"),$innerCellElement.on("dragenter",function(event){var omniselect,dataTransfer;$innerCellElement.hasClass("drop-area")&&(omniselect=getOmniselect(row,column),dataTransfer=event.originalEvent.dataTransfer,canAddDragEntry=Omniselect.drag.supportedType(dataTransfer)&&omniselect.canAdd(dragEntry),canAddDragEntry&&($cellElement.addClass("drop-support"),event.preventDefault()))}),$innerCellElement.on("dragover",function(event){canAddDragEntry&&event.preventDefault()}),$innerCellElement.on("drop",function(event){var omniselect=getOmniselect(row,column);omniselect.add(dragEntry),saveSelected(row,column,omniselect._selected),$cellElement.removeClass("drop-support"),event.preventDefault()}),$innerCellElement.on("dragleave",function(){$cellElement.removeClass("drop-support")}))},formatObject=function(row,column,object){var $object,$content,classes,iconClass=object.icon||object["css-class"],placeholder=object.placeholder;return object.omniselectSupported&&!$scope.ADMIN_RO?(classes=placeholder?"show-on-hover show-on-select":OBJECT_TIP_CLASS,$object=$('<div class="button-style no-margin '+classes+'" tabindex="0" draggable="true"></div>'),$content=$('<div class="flex-button-content"></div>').addClass(placeholder?"":"tooltip-hint").appendTo($object),row.entry.implicit&&$object.addClass("disabled"),placeholder||($object.on("dragstart",function(event){var dataTransfer=event.originalEvent.dataTransfer,cellElement=row.getRenderedCellForColumnID(column.selector);dataTransfer.effectAllowed="copy",Omniselect.drag.setData(dataTransfer,object.name),dragEntry=object,$object.ftip("hide"),requestAnimationFrame(function(){cellElement.classList.remove("drop-area"),dragStart()})}),$object.on("dragend",function(){var cellElement=row.getRenderedCellForColumnID(column.selector);cellElement.classList.add("drop-area"),dragStop()}))):($object=$content=$('<div class="'+OBJECT_TIP_CLASS+'"></div>'),checkOmniselectSupportPerObject?$object.toggleClass("disabled",!object.omniselectSupported):$object.removeClass("disabled")),"enable"===row.entry[object.selector+"-negate"]?(object.negated=!0,$content.append('<f-icon class="fa-negate"></f-icon>')):iconClass&&iconClass.indexOf("profile")>0?$content.append('<span class="'+iconClass+'"></span>'):iconClass&&$content.append('<f-icon class="'+iconClass+'"></f-icon>'),$content.append("<span>"+(placeholder||object.label||object.name)+"</span>"),$object.addClass(OBJECT_CLASS),placeholder||$object.data(OBJECT_DATA,object),!object.omniselectSupported||row.entry.implicit||$scope.ADMIN_RO||$object.click(function(event){openOmniselect(row,column,event)}),$object};return{type:"cell-collection",get_entries:collectEntries,format_item:function(_,column,item){var row=this;return formatObject(row,column,item)},on_cell_rendered:function(innerCellElement,entry,column){var row=this;onCellRendered(row,column,innerCellElement.parentElement)},entry_matches_search:function(entry,search){var sourceID,ALIASES={"system.interface":"firewallInterfaces","system.virtual-wan-link":"firewallInterfaces","system.zone":"firewallInterfaces"},matched=!1;if(!entry.placeholder){sourceID=ALIASES[entry.datasource]||entry.datasource;try{matched=Omniselect.queryMatchesEntrySync(search,entry,sourceID)}catch(e){fweb.log.warn('Source data "'+sourceID+"\" wasn't pre-loaded for synchronous searching. Ignoring.")}return matched}},valid_collection_function:validCollectionFunction,format_fallback:fallbackFormatter}},defaultCollectionFormatting=createCollectionFormatting(),createIconMappingFormatFn=function(iconMapping,valueProcessFn,dependencies){return function($td,column,entry){if(!entryMeetsDependencies(entry,dependencies))return"";var value=entry[column.selector],icon=angular.isFunction(iconMapping)?iconMapping(value,entry):(iconMapping||{})[value],iconHtml="";return icon&&(iconHtml+='<f-icon class="'+icon+'"></f-icon>&nbsp;'),value=angular.isFunction(valueProcessFn)?valueProcessFn(value,entry):$.getInfo(value),"<span>"+iconHtml+value+"</span>"}},enableDisableFormatFn=createIconMappingFormatFn({enable:"fa-enabled",disable:"fa-disabled"},function(value){return value=value?$.getInfo(value+"d"):""}),aclActionFormatFn=function($td,column,entry){return createIconMappingFormatFn({deny:"fa-denied"})($td,column,{acl_action:"deny"})},natEnabledIsCollection=function(entry,column){var policyType=$route.current.params.type,natOption="multicast-policy"===policyType?entry.snat:entry.nat;return"deny"!==entry.action&&("multicast-policy"!==policyType&&"disable"!==natOption&&!("disable"===entry.ippool||!entry[column.selector]))},natEnabledFallback=function($td,column,entry){if("deny"===entry.action)return"";var template,$object,policyType=$route.current.params.type,natOption="multicast-policy"===policyType?entry.snat:entry.nat;return"multicast-policy"===policyType||"disable"===natOption?(template='<span><f-icon class="{{ iconClass }}"></f-icon>&nbsp;{{ status }}</span>',fweb.util.dom.renderTemplate(template,{status:$.getInfo(natOption+"d"),iconClass:"fa-"+natOption+"d"})):"disable"!==entry.ippool&&entry[column.selector]?void 0:(template='<span class="{{ class }}"><f-icon class="{{ iconClass }}"></f-icon>&nbsp;{{ status }}</span>',$object=$(fweb.util.dom.renderTemplate(template,{class:SIMPLE_TIP_CLASS+" tooltip-hint",status:$.getInfo("enabled"),iconClass:"fa-enabled"})),$object.data(TIP_CONFIG,{content:$('<table class="table key-value"><tbody><tr><td>'+$.getInfo("IP Pool Configuration")+"</td><td>"+$.getInfo("natdstintf")+"</td></tr></tbody></table>")}),$object)},natEnabledFormatting=createCollectionFormatting(null,natEnabledFallback,natEnabledIsCollection),processAction=function(value,entry){return"enable"===entry["learning-mode"]&&(value="learn"),value},policyStatsCellRendered=function(cellContentElement,entry,column){var row=this,$tooltipTarget=$(cellContentElement.querySelector(".compare-bar-caption-text")||cellContentElement),supportedKeys={};SUPPORTED_COMPARE_TOOLTIP_KEYS.forEach(function(key){columnMeetsDependencies(COLUMNS[key])&&(supportedKeys[key]=!0)}),$tooltipTarget.addClass("tooltip-hint "+LAZY_TEMPLATE_TIP_CLASS),$tooltipTarget.data(TIP_TEMPLATE,COMPARE_TIP_TEMPLATE),$tooltipTarget.data(TIP_DATA,{entry:entry,selector:column.selector,supportedKeys:supportedKeys}),policyStats.addListener(entry.policyid,function(){row.updateEntry({})})},AGGREGATE_COLUMNS={source:["srcaddr","groups","users","devices"],profile:UTM_PROFILE_SELECTORS,"proxy-source":["srcaddr","srcaddr6","groups","users"],"proxy-destination":["dstaddr","dstaddr6","internet-service-id","internet-service-custom"],destination:["dstaddr","internet-service-id","internet-service-custom"],applications:["application","app-category"]},columnsConfig=function(){return{name:{types:["policy","policy6"],config:{lang_key:"field_name"}},policyid:{types:["policy","policy6","policy46","policy64","DoS-policy","DoS-policy6","multicast-policy","proxy-policy","central-snat-map","acl","acl6"],config:{lang_key:"field_policyid"},format_fn:function($td,column,entry){entry.implicit&&$td.addClass("disabled"),$td.addClass(LAZY_TEMPLATE_TIP_CLASS),$td.data(TIP_TEMPLATE,POLICY_WARNINGS_TEMPLATE),$td.data(TIP_DATA,{entry:entry,warnings:entry.warnings});var $label=$('<label class="inline-flex-row-centered tooltip-hint"></label>'),value=entry.policyid||entry.id||"0";return $label.append(value),"disable"===entry.status&&$label.append('<f-icon class="fa-disabled"></f-icon>&nbsp;'),entry.warnings&&entry.warnings.length>0&&$label.append('<f-icon class="fa-warning"></f-icon>&nbsp;'),$label}},proxy:{types:["proxy-policy"],config:{values:["explicit-web","transparent-web","ftp"],fld_max:1,lang_key:"field_proxy"},format_fn:function($td,column,entry){var value=entry[column.selector];return null!=value&&(value="<span>"+$.getInfo("proxy_type_"+value)+"</span>"),value}},srcintf:{types:["policy","policy6","policy46","policy64","multicast-policy","central-snat-map"],config:{lang_key:"field_srcintf"},format_fn:defaultCollectionFormatting},dstintf:{types:["policy","policy6","policy46","policy64","multicast-policy","proxy-policy","central-snat-map"],config:{lang_key:"field_dstintf"},format_fn:defaultCollectionFormatting},interface:{types:["DoS-policy","DoS-policy6","acl","acl6"],config:{lang_key:"field_interface"},format_fn:defaultCollectionFormatting},srcaddr:{types:["policy","policy6","policy46","policy64","DoS-policy","DoS-policy6","multicast-policy","proxy-policy","acl","acl6"],config:{lang_key:"src_addr"},format_fn:defaultCollectionFormatting},"orig-addr":{types:["central-snat-map"],config:{lang_key:"src_addr"},format_fn:defaultCollectionFormatting},dstaddr:{types:["policy","policy6","policy46","policy64","DoS-policy","DoS-policy6","multicast-policy","proxy-policy","acl","acl6"],config:{lang_key:"field_dstaddr"},format_fn:defaultCollectionFormatting},"dst-addr":{types:["central-snat-map"],config:{lang_key:"field_dstaddr"},format_fn:defaultCollectionFormatting},"nat-ippool":{types:["central-snat-map"],config:{lang_key:"trnsaddr"},format_fn:natEnabledFormatting},schedule:{types:["policy","policy6","policy46","policy64","proxy-policy"],config:{lang_key:"field_schedule"},format_fn:defaultCollectionFormatting},service:{types:["policy","policy6","policy46","policy64","DoS-policy","DoS-policy6","proxy-policy","acl","acl6"],config:{lang_key:"field_service"},format_fn:defaultCollectionFormatting,omniselectDisabled:{internetServicePolicy:!0}},applications:{types:["policy","policy6"],dependencies:["ngfwPolicyMode"],config:{lang_key:"field_application"},omniselectDisabled:{learningPolicy:!0},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS.applications)},"url-category":{types:["policy","policy6"],dependencies:["ngfwPolicyMode"],config:{lang_key:"URL Category"},omniselectDisabled:{learningPolicy:!0},format_fn:defaultCollectionFormatting},action:{types:["policy","policy6","policy46","policy64","proxy-policy","multicast-policy"],config:{values:[[$.getInfo(POLICY_ACTION_BASE_KEY+"accept")],[$.getInfo(POLICY_ACTION_BASE_KEY+"deny")]],fld_max:1,lang_key:"field_action"},format_fn:function($td,column,entry){function formatOneAction(icon,action,title){return icon='<f-icon class="'+icon+'"></f-icon>&nbsp;',action=action?$.getInfo(POLICY_ACTION_BASE_KEY+action):"",title?"<div>"+$.getInfo(title)+": "+icon+action+"</div>":"<span>"+icon+action+"</span>"}var icon,iconMapping={accept:"fa-accepted",deny:"fa-denied",authenticate:"ftnt-ipsec-vpn-custom",learn:"fa-graduation-cap",permit:"fa-accepted"},value=processAction(entry[column.selector],entry),actionHtml="";return Array.isArray(value)?value.forEach(function(action){icon=(iconMapping||{})[action.value],actionHtml+=formatOneAction(icon,action.value,action.title)}):(icon=(iconMapping||{})[value],actionHtml=formatOneAction(icon,value)),actionHtml}},acl_action:{types:["acl","acl6"],config:{lang_key:"field_action"},format_fn:aclActionFormatFn},logtraffic:{types:["policy","policy6","policy46","policy64","multicast-policy","proxy-policy"],config:{
lang_key:"field_logtraffic"},format_fn:function($td,col,entry){var iconHtml="",icon="",text="",value=entry[col.selector],isOverriddenByCsf=entry.$systemCsf&&entry.$systemCsf.isDefaultLoggingMode();if(isOverriddenByCsf?(icon="fa-help-info",text=$.getInfo("all")):(icon={all:"fa-enabled",enable:"fa-enabled",utm:"fa-shield",disable:"fa-disabled",unknown:"fa-unknown"}[value],text=$.getInfo({enable:"enabled",disable:"disabled",utm:"UTM"}[value]||value)),iconHtml+='<f-icon class="'+icon+'"></f-icon>&nbsp;',iconHtml+="<span>"+text+"</span>",isOverriddenByCsf){var template='<span title="{{ title }}" class="{{ class }}">{{ content }}</span>';iconHtml=fweb.util.dom.renderTemplate(template,{title:$.getInfo(INFO_DEFAULT_CSF_LOGGING_MODE),class:SIMPLE_TIP_CLASS,content:iconHtml})}return iconHtml}},status:{types:["policy","policy6","policy46","policy64","DoS-policy","DoS-policy6","multicast-policy","proxy-policy","central-snat-map"],config:{values:[$.getInfo("enabled"),$.getInfo("disabled")],fld_max:1,lang_key:"field_status"},format_fn:enableDisableFormatFn},source:{types:["policy","policy6"],config:{lang_key:"field_source"},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS.source)},destination:{types:["policy"],config:{lang_key:"field_destination"},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS.destination)},"proxy-source":{types:["proxy-policy"],config:{lang_key:"field_source"},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS["proxy-source"])},"proxy-destination":{types:["proxy-policy"],config:{lang_key:"field_destination"},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS["proxy-destination"])},groups:{types:["policy","policy6","proxy-policy"],config:{lang_key:"field_groups"},format_fn:defaultCollectionFormatting},users:{types:["policy","policy6","proxy-policy"],config:{lang_key:"field_users"},format_fn:defaultCollectionFormatting},devices:{types:["policy","policy6"],config:{lang_key:"field_devices"},format_fn:defaultCollectionFormatting},vpntunnel:{types:["policy","policy6"],features:["gui-vpn"],config:{lang_key:"field_vpntunnel"},format_fn:defaultCollectionFormatting},comments:{types:["policy","policy6","policy46","policy64","proxy-policy","DoS-policy","DoS-policy6","acl","acl6"]},poolname:{types:["policy","policy6","policy46","policy64","central-snat-map"],dependencies:["natMode"],config:{lang_key:"field_nat"},format_fn:createCollectionFormatting(null,function($td,column,entry){var policyType=$route.current.params.type;if(state.isNgfwPolicyMode()&&"policy"===policyType){if("deny"===entry.action)return"";var template='<span title="{{ title }}" class="{{ class}}"><f-icon class="fa-help-info"></f-icon><span>'+$.getInfo("Custom")+"</span></span>";return fweb.util.dom.renderTemplate(template,{title:$.getInfo(INFO_NGFW_SNAT),class:SIMPLE_TIP_CLASS})}return natEnabledFallback($td,column,entry)},function(entry,column){var policyType=$route.current.params.type;return(!state.isNgfwPolicyMode()||"policy"!==policyType)&&natEnabledIsCollection(entry,column)})},snat:{types:["multicast-policy"],config:{values:[$.getInfo("enabled"),$.getInfo("disabled")],fld_max:1,lang_key:"field_snat"},format_fn:natEnabledFormatting},dnat:{types:["multicast-policy"],config:{lang_key:"field_dnat"},format_fn:spanFormat},"orig-port":{types:["central-snat-map"],config:{fld_type:"int",number_type:"unformatted",lang_key:"srcport"},format_fn:portFormat},"nat-port":{types:["central-snat-map"],config:{lang_key:"trnsport"},format_fn:portFormat},"av-profile":{types:["policy","policy6","proxy-policy"],features:["gui-antivirus"],config:{lang_key:"field_av-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"spamfilter-profile":{types:["policy","policy6"],features:["gui-spamfilter"],dependencies:["proxyVDOM"],config:{lang_key:"field_spamfilter-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"webfilter-profile":{types:["policy","policy6","proxy-policy"],features:["gui-webfilter"],dependencies:["ngfwProfileMode"],config:{lang_key:"field_webfilter-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"dnsfilter-profile":{types:["policy"],features:["gui-dnsfilter"],config:{lang_key:"field_dnsfilter-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"waf-profile":{types:["policy","proxy-policy"],features:["gui-waf-profile"],dependencies:["proxyVDOM"],config:{lang_key:"field_waf-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"application-list":{types:["policy","policy6","proxy-policy"],features:["gui-application-control"],dependencies:["ngfwProfileMode"],config:{lang_key:"field_application-list"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"ips-sensor":{types:["policy","policy6","proxy-policy"],features:["gui-ips"],config:{lang_key:"field_ips-sensor"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"dlp-sensor":{types:["policy","policy6","proxy-policy"],features:["gui-dlp"],dependencies:["proxyVDOM"],config:{lang_key:"field_dlp-sensor"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"icap-profile":{types:["policy","policy6","proxy-policy"],features:["gui-icap"],dependencies:["proxyVDOM"],config:{lang_key:"field_icap-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"voip-profile":{types:["policy","policy6"],features:["gui-voip-profile"],dependencies:["proxyVDOM"],config:{lang_key:"field_voip-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"mms-profile":{types:["policy","policy6"],dependencies:["carrier"],config:{lang_key:"field_mms-profile"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"profile-protocol-options":{types:["policy","policy6","proxy-policy"],dependencies:["proxyVDOM"],config:{lang_key:"field_profile-protocol-options"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"ssl-ssh-profile":{types:["policy","policy6","proxy-policy"],config:{lang_key:"field_ssl-ssh-profile"},dependencies:["ngfwProfileMode"],format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},ngfwSslSshProfile:{types:["policy","policy6"],config:{lang_key:"field_ssl-ssh-profile"},dependencies:["ngfwPolicyMode"],format_fn:defaultCollectionFormatting,omniselectDisabled:{parentPolicy:!0,denyPolicy:!0,learningPolicy:!0,ngfwPolicyMode:!0}},profile:{types:["policy","policy6","proxy-policy"],config:{lang_key:"field_profile"},format_fn:createCollectionFormatting(AGGREGATE_COLUMNS.profile,null,null,!0),omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"profile-group":{types:["policy","policy6","proxy-policy"],features:["gui-dynamic-profile-display"],config:{lang_key:"field_profile-group"},format_fn:defaultCollectionFormatting,omniselectDisabled:{denyPolicy:!0,learningPolicy:!0}},"gtp-profile":{types:["policy","policy6"],dependencies:["carrier","ngfwProfileMode"],config:{lang_key:"field_gtp-profile"},format_fn:defaultCollectionFormatting},protocol:{types:["multicast-policy","central-snat-map"],config:{lang_key:"field_protocol",type:"int"},format_fn:spanFormat},bytes:{types:["policy","policy6","proxy-policy"],config:{fld_type:"int",number_type:"metricBytes",number_compare_bar:!0,on_cell_rendered:policyStatsCellRendered,lang_key:"field_bytes"}},packets:{types:["policy","policy6"],config:{fld_type:"int",number_compare_bar:!0,on_cell_rendered:policyStatsCellRendered,lang_key:"packets"}},software_bytes:{types:["policy","policy6"],dependencies:["haveNetNpu"],config:{fld_type:"int",number_type:"metricBytes",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.bytes},on_cell_rendered:policyStatsCellRendered,lang_key:"Software Bytes"}},software_packets:{types:["policy","policy6"],dependencies:["haveNetNpu"],config:{fld_type:"int",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.packets},on_cell_rendered:policyStatsCellRendered,lang_key:"Software Packets"}},asic_bytes:{types:["policy","policy6"],dependencies:["haveNetNpu"],config:{fld_type:"int",number_type:"metricBytes",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.bytes},on_cell_rendered:policyStatsCellRendered,lang_key:"SPU Bytes"}},asic_packets:{types:["policy","policy6"],dependencies:["haveNetNpu"],config:{fld_type:"int",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.packets},on_cell_rendered:policyStatsCellRendered,lang_key:"SPU Packets"}},nturbo_bytes:{types:["policy","policy6"],dependencies:["haveNturbo"],config:{fld_type:"int",number_type:"metricBytes",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.bytes},on_cell_rendered:policyStatsCellRendered,lang_key:"nTurbo Bytes"}},nturbo_packets:{types:["policy","policy6"],dependencies:["haveNturbo"],config:{fld_type:"int",number_compare_bar:!0,get_compare_bar_max:function(entry){return entry.packets},on_cell_rendered:policyStatsCellRendered,lang_key:"nTurbo Packets"}},last_used:{types:["policy","policy6","proxy-policy"],config:{fld_type:"datetime",date_type:"fromNow",cell_value_function:function(entry){if(entry.last_used)return 1e3*entry.last_used},on_cell_rendered:policyStatsCellRendered,lang_key:"last_used"}},first_used:{types:["policy","policy6","proxy-policy"],config:{fld_type:"datetime",date_type:"fromNow",cell_value_function:function(entry){if(entry.first_used)return 1e3*entry.first_used},on_cell_rendered:policyStatsCellRendered,lang_key:"first_used"}},active_sessions:{types:["policy","policy6","proxy-policy"],config:{fld_type:"int",number_compare_bar:!0,on_cell_rendered:policyStatsCellRendered,lang_key:"active_sessions"}},hit_count:{types:["policy","policy6","proxy-policy"],config:{fld_type:"int",number_compare_bar:!0,on_cell_rendered:policyStatsCellRendered,lang_key:"hit_count"}},packets_dropped:{types:["acl","acl6"],config:{fld_type:"int",number_compare_bar:!0,on_cell_rendered:policyStatsCellRendered,lang_key:"Packets Dropped"}}}},BASE_CONFIG={reordering:{enable:!0,items:"tr.qlist_row:not(.implicit)"},row_gen:function(index,entry){var TIP_DEFAULT_CONFIG={options:{showDelay:!0}},$row=$(this);$row.toggleClass("disabled","disable"===entry.status),$row.toggleClass("error",!!entry.error),$row.toggleClass("implicit",!!entry.implicit),$row.find("."+SIMPLE_TIP_CLASS).each(function(){var tipConfig=$(this).data(TIP_CONFIG);$(this).ftip(angular.extend({},TIP_DEFAULT_CONFIG,tipConfig))}),$row.find("."+OBJECT_TIP_CLASS).each(function(){var object=$(this).data(OBJECT_DATA);fweb.util.dom.setupObjectTooltip({element:this,mkey:object.q_origin_key,datasource:object._overrideDatasource||object.datasource||object.q_path+"."+object.q_name,tooltipHint:!1})}),$row.find("."+LAZY_TEMPLATE_TIP_CLASS).each(function(){var visible=!1,$content=$("<div></div>"),$datasource=$(this);$datasource.ftip(angular.extend({},TIP_DEFAULT_CONFIG,{content:$content,onShow:function(){var scope,$element,templateUrl,template;if(!visible){if(scope=$scope.$new(),tipScopes.push(scope),scope.data=$datasource.data(TIP_DATA),templateUrl=$datasource.data(TIP_TEMPLATE),template=$templateCache.get(templateUrl),!template)throw new Error('Template "'+templateUrl+"\" doesn't exist in $templateCache");$element=$compile(template)(scope),$content.append($element),scope.$apply(),visible=!0}}}))})},options:{automatic_mkey_column:!1,click_ignore:function(event){var $button=$(event.target).closest(".button-style");return $button.length>0}},search:{search_obj:{}},rowHeight:fweb.util.browser.isMobile()?void 0:25},TYPES={policy:{default_columns:["policyid","name","srcintf","dstintf","source","destination","schedule","service","applications","url-category","action","poolname","profile","logtraffic","bytes"]},policy6:{default_columns:["policyid","name","srcintf","dstintf","source","dstaddr","schedule","service","applications","url-category","action","poolname","profile","logtraffic","bytes"]},policy46:{default_columns:["policyid","srcintf","dstintf","srcaddr","dstaddr","schedule","service","action","logtraffic"]},"DoS-policy":{default_columns:["policyid","interface","srcaddr","dstaddr","service"]},acl:{default_columns:["policyid","interface","srcaddr","dstaddr","service","acl_action","packets_dropped"]},"multicast-policy":{default_columns:["policyid","srcintf","dstintf","srcaddr","dstaddr","protocol","action","logtraffic","snat"]},"proxy-policy":{default_columns:["policyid","proxy","dstintf","proxy-source","proxy-destination","schedule","action","profile","logtraffic","bytes"]},"central-snat-map":{default_columns:["policyid","srcintf","dstintf","orig-addr","dst-addr","nat-ippool","orig-port","nat-port","poolname"]}};return TYPES.policy64=TYPES.policy46,TYPES["DoS-policy6"]=TYPES["DoS-policy"],TYPES.acl6=TYPES.acl,Omniselect.drag.onDrag("policylist",function(entry){dragEntry=entry,dragStart()},dragStop),function(providers){providers.$provide.factory("policyListQlistConfig",["$compile","$templateCache","CMDB","$route","$window","$timeout","state","policyStats","policyListViewType","processPolicy","policyOmniselectConfig","policyInit","$q",function(_$compile_,_$templateCache_,_CMDB_,_$route_,_$window_,_$timeout_,_state_,_policyStats_,_policyListViewType_,_processPolicy_,_policyOmniselectConfig_,_policyInit_,_$q_){$compile=_$compile_,$templateCache=_$templateCache_,CMDB=_CMDB_,$route=_$route_,$window=_$window_,$timeout=_$timeout_,state=_state_,policyStats=_policyStats_,processPolicy=_processPolicy_,policyOmniselectConfig=_policyOmniselectConfig_,policyListViewType=_policyListViewType_,policyInit=_policyInit_,$q=_$q_,COLUMNS=columnsConfig();var service={};return service.OBJECT_DATA=OBJECT_DATA,service.OBJECT_CLASS=OBJECT_CLASS,service.reProcessOmniselects=reProcessOmniselects,service.create=function(type,subType,scope,defaultColumnsOverride){$scope=scope;var viewType=policyListViewType.value,interfacePair=viewType===policyListViewType.VIEW_TYPE.INTERFACE_PAIR,interfacePairKeys="proxy-policy"===type?["proxy","dstintf"]:["srcintf","dstintf"],config=angular.merge({},BASE_CONFIG,TYPES[type]);Array.isArray(defaultColumnsOverride)&&defaultColumnsOverride.length&&(config.default_columns=defaultColumnsOverride.map(function(id){return{"#":"policyid"}[id]||id})),config.notQlist=!0,config.vertical_collection_limit=30,config.columns=[],config.format_fn={},config.sort_fns={},$scope.ADMIN_RO&&(config.reordering={enable:!1});var getActionColumnValues=function(){var options=[[$.getInfo(POLICY_ACTION_BASE_KEY+"accept")],[$.getInfo(POLICY_ACTION_BASE_KEY+"deny")]];return"policy"===policyOmniselectConfig.type&&state.featureEnabled("gui-policy-based-ipsec")?options.push([$.getInfo(POLICY_ACTION_BASE_KEY+"ipsec")]):policyOmniselectConfig.isProxyPolicy()&&options.push([$.getInfo(POLICY_ACTION_BASE_KEY+"authenticate")]),options};return COLUMNS.action.config.values=getActionColumnValues(),Object.keys(COLUMNS).forEach(function(key){var processed,column=COLUMNS[key];columnMeetsDependencies(column)&&(column.config?(processed=angular.extend({selector:key},column.config),config.columns.push(processed),config.format_fn[key]=column.format_fn):config.columns.push(key),interfacePair&&interfacePairKeys.indexOf(key)>=0&&(processed.hidden=!0))}),config.prefix="policyList-"+type+"-"+subType+"-"+viewType,interfacePair?(interfacePairKeys="proxy-policy"===type?["proxy","dstintf"]:["srcintf","dstintf"],config.columns.push({selector:"intfpair",hidden:!0}),config.format_fn.intfpair=function($td,column,entry){return entry.implicit?$.getInfo("implicit"):interfacePairKeys.map(function(key){var objects,icon,label;return"proxy"===key?entry.proxy+" proxy":(objects=entry[key],Array.isArray(objects)||(objects=[objects]),icon=objects[0].icon||objects[0]["css-class"],label=objects[0].label||objects[0].name,'<f-icon class="'+icon+'"></f-icon><span>'+label+"</span>")}).join(" →")},config.sections=["intfpair"],config.sort_fns.intfpair=function(valueA,valueB,entryA,entryB){return entryA.implicit?1:entryB.implicit?-1:valueA.compareTo(valueB)}):policyListViewType.SECTIONS_ENABLED[type]&&(config.custom_sequence_grouping=!0,config.implicit_sequence_grouping_value_function=function(entry){if(entry.implicit)return"Implicit"}),$scope.$on("$destroy",formattersCleanUp),config},service}])}}),define("ng/firewall/policy/services/view_type",["fweb.util/browser"],function(browser){"use strict";function PolicyListViewType($routeParams,processPolicy,persistentStorage){this._$routeParams=$routeParams,this._processPolicy=processPolicy,this._persistentStorage=persistentStorage,this.value=null}var BASE_KEY="policyViewType-",INTERFACE_PAIR_VIEW_SUPPORT={policy:!0,policy6:!0,policy46:!0,policy64:!0,"multicast-policy":!0,"proxy-policy":!0};return PolicyListViewType.prototype.VIEW_TYPE={SEQUENTIAL:"sequential",INTERFACE_PAIR:"interface-pair"},PolicyListViewType.prototype.SECTIONS_ENABLED={policy:!0,policy6:!0,"explicit-proxy-policy":!0},PolicyListViewType.prototype._validViewType=function(value){var validValues=Object.keys(this.VIEW_TYPE).map(function(key){return this.VIEW_TYPE[key]}.bind(this));return validValues.indexOf(value)>=0},PolicyListViewType.prototype.update=function(){if(browser.isMobile())return void(this.value=this.VIEW_TYPE.INTERFACE_PAIR);var policiesMeta=this._processPolicy.meta;this._key=BASE_KEY+this._$routeParams.type+this._$routeParams.subType,this.value=this._persistentStorage.get(this._key),this.supported=INTERFACE_PAIR_VIEW_SUPPORT[this._$routeParams.type],this._validViewType(this.value)||(this.value=this.VIEW_TYPE.INTERFACE_PAIR),this.supported&&policiesMeta.interfacesSectionable?this.supportInterfacePairView=!0:(this.supportInterfacePairView=!1,this.value=this.VIEW_TYPE.SEQUENTIAL)},PolicyListViewType.prototype.set=function(value){if(!this._validViewType(value))throw new Error("Invalid view type value");this._persistentStorage.put(this._key,value),this.value=value},function(providers){providers.$provide.service("policyListViewType",PolicyListViewType)}}),define("ng/firewall/policy/services/virtual_wire_pair",[],function(){"use strict";function PolicyVirtualWirePair($http,$routeParams,persistentStorage){this._$http=$http,this._$routeParams=$routeParams,this._persistentStorage=persistentStorage,this._map={},this.current=null,this.all=[],this.currentInterfaces=[],this.currentInterfacesMap={}}var BASE_KEY="policyVirtualWirePair-";return PolicyVirtualWirePair.prototype.isVirtualWirePolicy=function(){return"virtual-wire"===this._$routeParams.subType},PolicyVirtualWirePair.prototype.init=function(){return this._key=BASE_KEY+this._$routeParams.type+this._$routeParams.subType,this._$http.get("/api/v2/cmdb/system/virtual-wire-pair").then(function(response){var current,map={},all=[],results=response.data.results;results.forEach(function(entry){map[entry.name]=entry,all.push(entry.name)}),this._map=map,this.all=all,current=this._persistentStorage.get(this._key),this._validVWP(current)?this.setCurrent(current,!0):this.setCurrent(results[0].name,!0)}.bind(this))},PolicyVirtualWirePair.prototype.setCurrent=function(value,dontPersist){var vwp,interfaces,interfaceMap;if(!this._validVWP(value))throw new Error("Invalid VWP value");dontPersist||this._persistentStorage.put(this._key,value),this.current=value,vwp=this._map[this.current],interfaces=[],interfaceMap={},vwp.member.forEach(function(member){var name=member["interface-name"];interfaces.push(name),interfaceMap[name]=!0}),this.currentInterfaces=interfaces,this.currentInterfacesMap=interfaceMap},PolicyVirtualWirePair.prototype._validVWP=function(value){return!!this._map[value]},PolicyVirtualWirePair.prototype.isBiDirection=function(policy){return Array.isArray(policy.srcintf)&&2===policy.srcintf.length&&Array.isArray(policy.dstintf)&&2===policy.dstintf.length},function(providers){providers.$provide.service("policyVWP",PolicyVirtualWirePair)}}),define("ng/firewall/policy/dialog/directives",[],function(){"use strict";var fRequireAddress=function(){var addressTypes=["firewall.address","firewall.address6","firewall.addrgrp","firewall.addrgrp6","firewall.proxy-address","firewall.proxy-addrgrp"];return{restrict:"A",require:"ngModel",link:function(scope,elem,attr,controller){controller.$validators.fRequireAddress=function(modelValue){var condition=attr.fRequireAddress||"true";return!(scope.$eval(condition)&&!controller.$isEmpty(modelValue))||modelValue.some(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;return addressTypes.indexOf(datasource)>=0})}}}},fRequireUserGroups=function(){return{restrict:"A",require:"ngModel",link:function(scope,elem,attr,controller){controller.$validators.fRequireUserGroups=function(modelValue){var condition=attr.fRequireUserGroups||"true";return!(scope.$eval(condition)&&!controller.$isEmpty(modelValue))||modelValue.some(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;return["user.local","user.group"].indexOf(datasource)>=0})}}}},fSingleAddressType=function(){return{restrict:"A",require:"ngModel",link:function(scope,elem,attr,controller){controller.$validators.fSingleAddressType=function(modelValue){var condition=attr.fSingleAddressType||"true",restrictTypes=scope.$eval(attr.restrictTypes),policyType=attr.policyType;if(!scope.$eval(condition)||controller.$isEmpty(modelValue))return!0;if(!restrictTypes)throw"Missing restrict address type(s).";var types=restrictTypes[policyType]||[],singleTypeCount=0;return modelValue.forEach(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;types.indexOf(datasource)>=0&&singleTypeCount++}),!singleTypeCount||singleTypeCount===modelValue.length}}}},fValidateAndToggleInternetService=function(){return{restrict:"A",require:"ngModel",link:function(scope,elem,attr,controller){controller.$validators.fValidateInternetService=function(modelValue){var hasDestinationAddress=!1,hasInternetService=!1,addressTypes=["firewall.address","firewall.addrgrp","firewall.proxy-address","firewall.proxy-addrgrp","firewall.vip","firewall.vipgrp","firewall.vip46","firewall.vipgrp46","firewall.address6","firewall.addrgrp6","firewall.vip6","firewall.vipgrp6","firewall.vip64","firewall.vipgrp64"],internetServiceTypes=["firewall.internet-service","firewall.internet-service-custom"];return modelValue.forEach(function(entry){var datasource=entry.datasource||entry.q_path+"."+entry.q_name;hasDestinationAddress=hasDestinationAddress||addressTypes.indexOf(datasource)>=0,hasInternetService=hasInternetService||internetServiceTypes.indexOf(datasource)>=0}),hasDestinationAddress&&!hasInternetService?(scope.policyDialog.policy["internet-service"]="disable",!0):hasInternetService&&!hasDestinationAddress?(scope.policyDialog.policy["internet-service"]="enable",!0):!hasDestinationAddress&&!hasInternetService}}}};return function(providers){providers.$compile.directive({fRequireAddress:fRequireAddress,fRequireUserGroups:fRequireUserGroups,fSingleAddressType:fSingleAddressType,fValidateAndToggleInternetService:fValidateAndToggleInternetService})}}),define("ng/firewall/policy/dialog/log-options",[],function(){"use strict";function logOptions(loader){return{restrict:"E",scope:{policy:"=",modalDialog:"=",select:"=",guiVisibility:"="},bindToController:!0,controller:function(){},controllerAs:"ctrl",templateUrl:loader.cache_path("dialog/partials/log-options.html")}}return function(providers){providers.$compile.directive({fLogOptions:logOptions})}}),define("ng/firewall/policy/dialog/policy-dialog",["module","angular","fweb","notify","ng/services/injector"],function(module,angular,fweb,notify,inject){"use strict";function policyDialog(loader){return{restrict:"E",bindToController:!0,controllerAs:"policyDialog",controller:PolicyDialogController,templateUrl:loader.cache_path("dialog/partials/policy-dialog.html")}}function PolicyDialogController($scope,injector,firewallPolicy){injector.injectMarked(this,{$scope:$scope}),this._loadData(),$scope.$on("$destroy",function(){firewallPolicy.clearCache()}.bind(this))}return PolicyDialogController.prototype.select={},PolicyDialogController.prototype.guiVisibility={},PolicyDialogController.prototype.dialogContext={},PolicyDialogController.prototype.dependencies={},PolicyDialogController.prototype.dialogTitle=inject.mark(function($routeParams){return $routeParams.mkey?"edit_policy":"new_policy"}),PolicyDialogController.prototype.policy={},PolicyDialogController.prototype.vwp={},PolicyDialogController.prototype.directions={},PolicyDialogController.prototype.lang={},PolicyDialogController.prototype.actions=[],PolicyDialogController.prototype.uniquePolicyidParams=[],PolicyDialogController.prototype.addressRestrictTypes={},PolicyDialogController.prototype.proxyTypes=[],PolicyDialogController.prototype.broadcastEvent=inject.mark(function($scope){return function(eventName){$scope.$broadcast(eventName)}}),PolicyDialogController.prototype._initConfig=function(){function createPolicyKeyFn(dialogKey){return function(policy,originKey){return policy[dialogKey]||policy[originKey]}}this.policySourceKeyFn=createPolicyKeyFn("source"),this.policyDestinationKeyFn=createPolicyKeyFn("destination"),this.uniquePolicyidParams=[{path:"firewall",name:"policy",format:"policyid"}],this.addressRestrictTypes={policy:["firewall.vip","firewall.vipgrp"],policy64:["firewall.vip64","firewall.vipgrp64"],"proxy-policy":["firewall.vip","firewall.vipgrp","firewall.vip6","firewall.vipgrp6","firewall.vip46","firewall.vipgrp46","firewall.vip64","firewall.vipgrp64"]}},PolicyDialogController.prototype.submit=inject.mark(function($scope,$routeParams,$location,structure,lang,CMDB){return function(){return this.form.$valid?(this.dialogContext.wanOptEnabled=this.guiVisibility.wanOptEnabled,void this.policy.prepareForSave(this.dialogContext).then(function(){this.policy.save().then(function(){var redir=$routeParams.redir||"/ng/firewall/policy/"+$routeParams.type+"/"+$routeParams.subType;structure.dialogSaveSuccessRedirect(redir)},CMDB.notifyFailureMessage("Failed to save some changes: {ERROR}"))}.bind(this),function(message){if(message){var translated=lang(message);notify.post(translated.trusted?translated.toString():message,notify.LEVEL.ERROR)}})):void $scope.$broadcast("validation-msg_show")}}),PolicyDialogController.prototype._getPolicyOmniselectConfig=inject.mark(function(policyOmniselectConfig){return function(selector,processFn){return policyOmniselectConfig.get(selector,this.policy,processFn)}}),PolicyDialogController.prototype._loadData=inject.mark(function(firewallPolicy,policyVWP,$q,policyOmniselectConfig,state,lang,policyShared,$scope){return function(){this.modalDialog="dialog";var policyData=firewallPolicy.get();this.policy=policyData.policy,this.vwp=policyVWP,this.directions=policyShared.DIRECTION,this.state=state,this.lang=lang,this.loading=!0,this.readOnly=$scope.$root.ADMIN_RO,this._initConfig(),$q.all([policyData.promise,policyOmniselectConfig.init()]).then(function(){this.guiVisibility=policyData.guiVisibility||{},this.dialogContext=policyData.dialogContext||{},this.dependencies=policyData.dependencies||{},this._selectSetup(),this._generalGuiVisibilitySetup(),this._actionSetup(),this._securityProfileSetup(),this._logTrafficSetup(),this.loading=!1}.bind(this))}}),PolicyDialogController.prototype._wanOptSetup=inject.mark(function(state){return function(){this.guiVisibility.isProxyVdom="proxy"===state.admin.vdom_info[state.current_vdom].inspection_mode,this.guiVisibility.wanOptEnabled=state.featureEnabled("gui-wanopt-cache")&&("policy"===this.policy.policyType||this.policy.isProxyPolicy)&&this.guiVisibility.isProxyVdom,this.guiVisibility.wanOptEnabled&&"policy"===this.policy.policyType&&this.dependencies.wanopt.read&&(this.select["wanopt-profile"]=this._getPolicyOmniselectConfig("wanopt-profile"),this.select["wanopt-peer"]=this._getPolicyOmniselectConfig("wanopt-peer"))}}),PolicyDialogController.prototype._selectSetup=inject.mark(function($scope,state,policyOmniselectConfig){return function(){var SHARED_SELECT=["dstintf","dstaddr"],NGFW_SELECT=["applications","url-category","ngfwSslSshProfile"],UTM_SELECT=["profile-group","av-profile","webfilter-profile","dnsfilter-profile","application-list","ips-sensor","spamfilter-profile","dlp-sensor","voip-profile","icap-profile","waf-profile","profile-protocol-options","ssl-ssh-profile"];state.carrier_mode&&UTM_SELECT.push("mms-profile");var COMMON_POLICY_SELECT=SHARED_SELECT.concat(["srcintf","source","schedule","service","poolname","traffic-shaper","per-ip-shaper","vpntunnel"]).concat(UTM_SELECT),NAT_SELECT=SHARED_SELECT.concat(["srcintf","srcaddr","schedule","service","poolname","traffic-shaper","per-ip-shaper"]),MULTICAST_SELECT=SHARED_SELECT.concat(["srcintf","srcaddr","protocol"]),PROXY_POLICY_SELECT=SHARED_SELECT.concat(["proxy-source","srcintf","proxy-destination","schedule","service","webproxy-forward-server"]).concat(UTM_SELECT),IPv4_POLICY_SELECT=COMMON_POLICY_SELECT.concat(["destination"],NGFW_SELECT),IPV6_POLICY_SELECT=COMMON_POLICY_SELECT.concat(NGFW_SELECT),selects=this.policy.isNatPolicy?NAT_SELECT:this.policy.isMulticastPolicy?MULTICAST_SELECT:this.policy.isProxyPolicy?PROXY_POLICY_SELECT:"policy"===this.policy.policyType?IPv4_POLICY_SELECT:"policy6"===this.policy.policyType?IPV6_POLICY_SELECT:COMMON_POLICY_SELECT;if(selects.forEach(function(entry){this.select[entry]=this._getPolicyOmniselectConfig(entry,function(settings){return policyOmniselectConfig.postProcessSelect(settings,entry)})}.bind(this)),"policy"===this.policy.policyType&&state.carrier_mode&&(this.select.gtp=this._getPolicyOmniselectConfig("gtp")),this.policy.isMulticastPolicy){var hasOption=this.select.protocol&&!!this.select.protocol.options.some(function(protocol){return protocol.id===this.policy.protocol}.bind(this));hasOption?this.policy.otherProtocol=0:(this.policy.otherProtocol=this.policy.protocol,this.policy.protocol=-1)}this._wanOptSetup()}}),PolicyDialogController.prototype._proxyPolicyGuiSetup=function(){this.proxyTypes=[{name:"explicit-web",text:"proxy_type_explicit-web",disabled:!this.guiVisibility.proxyEnabled.web},{name:"transparent-web",text:"proxy_type_transparent-web"},{name:"ftp",text:"proxy_type_ftp",disabled:!this.guiVisibility.proxyEnabled.ftp}]},PolicyDialogController.prototype._generalGuiVisibilitySetup=inject.mark(function($scope,state){return function(){this.guiVisibility.showTrafficShaping=state.featureEnabled("gui-traffic-shaping")&&(this.guiVisibility.trafficShapers["traffic-shaper"]||this.guiVisibility.trafficShapers["traffic-shaper-reverse"]||this.guiVisibility.trafficShapers["per-ip-shaper"]),this.guiVisibility.trafficShapers.showTrafficShaper=this.guiVisibility.trafficShapers["traffic-shaper"],this.guiVisibility.trafficShapers.showTrafficShaperReverse=this.guiVisibility.trafficShapers["traffic-shaper-reverse"],this.guiVisibility.trafficShapers.showPerIPShaper=this.guiVisibility.trafficShapers["per-ip-shaper"],this.policy.natType?this.uniquePolicyidParams[0].name+=this.policy.natType:this.policy.isIPv6&&(this.uniquePolicyidParams[0].name+="6"),this.guiVisibility.isTransparentMode=state.getOperationMode()===state.OPERATION_MODE.TRANSPARENT,this.guiVisibility.showNatPool=(!state.centralNatEnabled()||this.policy.isIPv6)&&!this.policy.isNatPolicy||this.policy.isNatPolicy&&"64"===this.policy.natType,this.guiVisibility.showUseDstIntfAddrOnly=!this.guiVisibility.showNatPool&&!state.centralNatEnabled()||this.policy.isNatPolicy&&"46"===this.policy.natType,this.guiVisibility.showFixedPort=!state.centralNatEnabled()||this.policy.isIPv6,this.policy.isProxyPolicy&&this._proxyPolicyGuiSetup(),$scope.$watch(function(){return this.policy.isProxyPolicy&&"ftp"===this.policy.proxy}.bind(this),function(ftpProxy){this.guiVisibility.ftpProxy=ftpProxy}.bind(this))}}),PolicyDialogController.prototype._actionSetup=inject.mark(function(state,$scope){
return function(){var BASE_ACTIONS=[{name:"accept",iconClass:"fa-accepted"},{name:"deny",iconClass:"fa-denied"}];"policy"!==this.policy.policyType||!state.featureEnabled("gui-policy-learning")&&"enable"!==this.policy["learning-mode"]||BASE_ACTIONS.push({name:"learn",iconClass:"fa-graduation-cap"}),this.policy.implicit||$scope.$watch("policyDialog.policy.action",function(action,oldAction){"learn"!==action&&"learn"!==oldAction||(this.policy["learning-mode"]="learn"===action?"enable":"disable"),"deny"===action&&"deny"!==oldAction&&(this.policy.logtraffic="disable",this.policy.logTrafficConfig.enabled=!1)}.bind(this));var guiIPSecEnabled=state.featureEnabled("gui-vpn")&&state.featureEnabled("gui-policy-based-ipsec");this.actions=BASE_ACTIONS,$scope.$watch(function(){return"policy"===this.policy.policyType&&!this.policy.isVirtualWire&&!this.policy.isSSLVPNInterface()&&(guiIPSecEnabled||"ipsec"===this.policy.action)}.bind(this),function(ipSecSupported){this.actions=BASE_ACTIONS.slice(),ipSecSupported?this.actions.push({name:"ipsec",iconClass:"ftnt-ipsec-vpn-custom"}):"ipsec"===this.policy.action&&(this.policy.action="accept")}.bind(this))}}),PolicyDialogController.prototype._securityProfileSetup=inject.mark(function(firewallPolicy,$scope,state){return function(){firewallPolicy.securityProfileGuiSetup($scope,this.policy,this.guiVisibility,"policyDialog");var policyType=this.policy.policyType,supportsNgfwPolicyMode="policy"===policyType||"policy6"===policyType;state.isNgfwPolicyMode()&&supportsNgfwPolicyMode&&firewallPolicy.ngfwSecurityProfileGuiSetup($scope,this.policy,this.guiVisibility,"policyDialog")}}),PolicyDialogController.prototype._logTrafficSetup=inject.mark(function(state){return function(){this.policy.logTrafficConfig&&(this.policy.logTrafficConfig.supportPacketCapture=!this.policy.implicit&&"policy"===this.policy.policyType&&fweb.BUILD.PLATFORM.HAVE_PACKET_CAPTURE&&state.adminHasWritePermission(state.ACCESS_GROUP.FIREWALL_PACKET_CAPTURE)&&(this.dialogContext.is_ssd_available||fweb.BUILD.CONFIG.CONFIG_HYPERVISOR),this.policy.logTrafficConfig.supportLogtrafficStart=!this.policy.implicit&&"policy"===this.policy.policyType&&fweb.BUILD.PLATFORM.GUI_SHOW_LOG_TRAFFIC_START)}}),function(providers,loader){providers.$compile.directive({fPolicyDialog:policyDialog});var policyServices=["/ng/firewall/policy/services/policy_init","/ng/firewall/policy/services/policy_shared","/ng/firewall/policy/services/select_config","/ng/firewall/policy/services/virtual_wire_pair"],policyTemplates=["/ng/firewall/policy/templates"],dialogModules=["/ng/firewall/policy/dialog/directives","/ng/firewall/policy/dialog/services","/ng/firewall/policy/dialog/proxy-disclaimer","/ng/firewall/policy/dialog/utm-profiles","/ng/firewall/policy/dialog/log-options","/ng/firewall/policy/dialog/warning-pane","/ng/firewall/policy/dialog/ngfw-nat-options"];return loader.initModules(policyServices.concat(policyTemplates).concat(dialogModules),module)}}),define("ng/firewall/policy/dialog/proxy-disclaimer",["jquery","fweb","module_js/replacement_message"],function($,fweb,ReplacementMessage){"use strict";function proxyDisclaimer(loader){return{restrict:"E",scope:{policy:"=",modalDialog:"=",select:"=",guiVisibility:"="},bindToController:!0,controller:function(){this.guiVisibility["replacemsg-override-group"]=!!this.policy["replacemsg-override-group"],this.editDisclaimer=function(){var msgOverride=this.policy["replacemsg-override-group"];this.policy["replacemsg-override-group"]=msgOverride&&msgOverride.name||msgOverride||"auth-proxy-policy-"+Date.now(),ReplacementMessage.show({type:"auth",name:this.policy["replacemsg-override-group"],msgTypes:["auth-disclaimer-page"]})}},controllerAs:"ctrl",templateUrl:loader.cache_path("dialog/partials/proxy-disclaimer.html")}}return function(providers){providers.$compile.directive({fProxyDisclaimer:proxyDisclaimer})}}),define("ng/firewall/policy/dialog/services",["angular","fweb","jquery","fweb.util/firewallInterfaces","jquery.util"],function(angular,fweb,$,firewallInterfaces){"use strict";function FirewallPolicyService(_CMDB_,_$q_,_$http_,_policyOmniselectConfig_,_policyInit_,_policyVWP_,$routeParams,_state_,_loader_,_slide_,_policyShared_,_csfTopology_){CMDB=_CMDB_,$q=_$q_,$http=_$http_,policyOmniselectConfig=_policyOmniselectConfig_,policyInit=_policyInit_,policyVWP=_policyVWP_,state=_state_,loader=_loader_,slide=_slide_,policyShared=_policyShared_,csfTopology=_csfTopology_,this.routeParams=$routeParams}var $q,$http,CMDB,policyOmniselectConfig,policyInit,policyVWP,state,loader,slide,policyShared,csfTopology,CMDB_URI="/api/v2/cmdb/",CONTEXT_URI="/p/firewall/policy/context_json/",TRAFFIC_SHAPERS=["traffic-shaper","traffic-shaper-reverse","per-ip-shaper"],guiVisibility={utmProfiles:{},trafficShapers:{}},TCP_PROTOCOL=6,UDP_PROTOCOL=17,dependencies={},availableInterfaces={},defaultUtmProfiles={},logError=function(error,customLog){var errorMsg;errorMsg="string"==typeof error?error:error?error.message:"",fweb.log.error(customLog+" "+errorMsg)},cmdbGet=function(path,name,mkey){var uri=CMDB_URI+path+"/"+name+(mkey?"/"+encodeURIComponent(mkey):"")+"?with_meta=1&datasource=1";return $http.get(uri).then(function(result){return result.data.results},function(err){logError(err,"Failed to fetch "+path+"."+name+"."+mkey+" for: ")})},getDialogContext=function(){return $http.get(CONTEXT_URI).then(function(results){return results.data})},firstOf=function(all){return Array.isArray(all)?all[0]:angular.isObject(all)?all:null},setupOmniselectModel=function(aggregateKey){return function(){var values=[];policyOmniselectConfig.splitKeys(aggregateKey).forEach(function(key){values=values.concat(this[key])}.bind(this)),this[aggregateKey]=values}},DEFAULT_SCHEDULE={q_origin_key:"always",datasource:"firewall.schedule.recurring","css-class":"ftnt-schedule-recurring ftnt-color-0",name:"always"},BASE_PROTOTYPE={newPolicySetup:function(){this.isNew=!0,this.nat=this._natMode()?"enable":"disable",this.action="accept",this.schedule=DEFAULT_SCHEDULE},setupSource:setupOmniselectModel("source"),prepareForSave:function(dialogContext){if(this.updateLogTraffic(),this.isVirtualWire&&this._preProcessVirtualWire(),!this.implicit){if(!(this.isNatPolicy||this.isMulticastPolicy||this.isProxyPolicy))return this._preProcessCommonPolicy(),this._checkCommonPolicy(dialogContext);this.isMulticastPolicy&&this._preprocessMulticastPolicy(),this.isProxyPolicy&&this._preProcessProxyPolicy()}return $q.resolve()},save:function(){var promise;return promise=this.implicit?this._saveImplicitPolicy():this._savePolicy()},_natMode:function(){return state.getOperationMode()===state.OPERATION_MODE.NAT&&!this.isVirtualWire},_setNull:function(keys){keys.forEach(function(key){this[key]=null}.bind(this))},_saveImplicitPolicy:function(){return this.logSetting&&this.logPath&&dependencies.logSetting.write?(this.logSetting[this.logPath]=this.logTrafficConfig.enabled?"enable":"disable",this.logSetting.$save().$promise.then(angular.noop,function(err){return logError(err,"Failed to save log settings for: "),$q.reject(err)})):(logError("Missing write permission for log settings or missing log path"),$q.resolve())},_savePolicy:function(){return this.$save().$promise.then(angular.noop,function(err){return logError(err,"Failed to save policy for: "),$q.reject(err)})},_isUtmProfileSet:function(){return Object.keys(policyInit.UTM_PROFILES).some(function(profile){return!!this[profile]}.bind(this))},_isProxyProfileSet:function(){return Object.keys(policyInit.PROXY_PROFILES).some(function(profile){return!!this[profile]}.bind(this))},preProcessUtmProfiles:function(){"deny"!==this.action?"group"===this["profile-type"]?(this._setNull(Object.keys(policyInit.UTM_PROFILES)),this["utm-status"]="enable"):(this["profile-group"]=null,state.getInspectionMode()===state.INSPECTION_MODE.FLOW&&(this._isProxyProfileSet()?this["profile-protocol-options"]=this["profile-protocol-options"]||defaultUtmProfiles["profile-protocol-options"]:this["profile-protocol-options"]=""),this._isUtmProfileSet()||this.$original["profile-type"]!==this["profile-type"]?this["utm-status"]="enable":this["utm-status"]="disable"):this["utm-status"]="disable"},preProcessGuiVisibility:function(){["gtp-profile"].forEach(function(key){guiVisibility[key]||(this[key]="")}.bind(this))},_preProcessCommonPolicy:function(){var srcVals=policyOmniselectConfig.splitValues("source",this.source);if(angular.extend(this,srcVals),this.applications&&angular.extend(this,policyOmniselectConfig.splitValues("applications",this.applications)),this.destination){var dstVals=policyOmniselectConfig.splitValues("destination",this.destination);angular.extend(this,dstVals)}this.preProcessUtmProfiles(),this.preProcessGuiVisibility()},_preprocessMulticastPolicy:function(){return this.protocol===-1&&(null!=this.otherProtocol?this.protocol=this.otherProtocol:fweb.log.warn("Invalid custom protocol number")),!0},_preProcessProxyPolicy:function(){angular.extend(this,policyOmniselectConfig.splitValues("proxy-source",this["proxy-source"])),angular.extend(this,policyOmniselectConfig.splitValues("proxy-destination",this["proxy-destination"])),"explicit-web"!==this.proxy&&"transparent-web"!==this.proxy||this.service.length||(this.service=[{name:"webproxy"}]),this.preProcessUtmProfiles(),this._updateBasedOnGuiVisibility()},_preProcessVirtualWire:function(){var first=availableInterfaces.mapping[policyVWP.currentInterfaces[0]],second=availableInterfaces.mapping[policyVWP.currentInterfaces[1]];Array.isArray(this.srcintf)&&Array.isArray(this.dstintf)&&(first=[first],second=[second]),this.virtualWireDirection===policyShared.DIRECTION.FORWARD?(this.srcintf=first,this.dstintf=second):this.virtualWireDirection===policyShared.DIRECTION.BACKWARD?(this.srcintf=second,this.dstintf=first):this.virtualWireDirection===policyShared.DIRECTION.BIDIRECTION&&(this.srcintf=this.dstintf=Array.isArray(first)?first.concat(second):[first,second])},preProcessLogTraffic:function(logSetting){this.logTrafficConfig={},this.logSetting=logSetting,this.implicit?(this.logPath=policyInit.IMPLICIT_POLICY_LOG_PROPERTY[this.policyType],null!=logSetting[this.logPath]?(this.logTrafficConfig.show=!0,this.logTrafficConfig.enabled="enable"===logSetting[this.logPath]):this.logTrafficConfig.show=!1):(this.logTrafficConfig.show=null!=this.logtraffic,this.logTrafficConfig.enabled="disable"!==this.logtraffic,this.logTrafficConfig.enabled||this.isNatPolicy||this.isMulticastPolicy||(this.logtraffic="utm"));var isOverriddenByCSF=!this.implicit&&csfTopology.csfEnabled&&"default"===csfTopology.csfLoggingMode;isOverriddenByCSF&&(this.logTrafficConfig.show=!0,this.logTrafficConfig.enabled=!0,this.logtraffic="all"),this.logTrafficConfig.isOverriddenByCSF=isOverriddenByCSF},updateLogTraffic:function(){this.isNatPolicy||this.isMulticastPolicy?this.logtraffic=this.logTrafficConfig.enabled?"enable":"disable":this.implicit||("deny"!==this.action?this.logtraffic=this.logTrafficConfig.enabled?this.logtraffic:"disable":this.logtraffic=this.logTrafficConfig.enabled?"all":"disable")},preProcessWanOpt:function(peers,authGroups){null!=this["wanopt-detection"]&&this.isNew&&(this["wanopt-detection"]="active"),guiVisibility.wanOpt={peerConfigured:(peers||[]).length>0||(authGroups||[]).some(function(group){return"any"===group["peer-accept"]})}},_dataFetchOnSave:function(){var cmdbLocal=new CMDB("user","local"),cmdbGroup=new CMDB("user","group"),promises=[],users={},groups={};return(this.users||[]).forEach(function(pUser){var user=cmdbLocal.get(pUser.name);promises.push(user.$promise),user.$promise.then(function(){users[pUser.name]={type:user.type||""}},function(err){logError(err,"Failed to fetch user cmdb.")})}),(this.groups||[]).forEach(function(pGroup){var group=cmdbGroup.get(pGroup.name);promises.push(group.$promise),group.$promise.then(function(){groups[pGroup.name]={"group-type":group["group-type"]||"firewall"}},function(err){logError(err,"Failed to fetch user group cmdb.")})}),$q.all(promises).then(function(){return{usersMap:users,groupsMap:groups}})},hasDeepInspectionProfile:function(){function isDeep(protocol){var entry=sslSSHProfile[protocol];return entry&&"deep-inspection"===entry.status}var sslSSHProfile=this["ssl-ssh-profile"]||this.ngfwSslSshProfile,hasDeepInspection=!1,sslProtocols=["https","smtps","ftps","imaps","pop3s"];if(sslSSHProfile&&sslSSHProfile.ssl){var iterator=Array.prototype.some;hasDeepInspection="deep-inspection"===sslSSHProfile.ssl["inspect-all"]||"disable"===sslSSHProfile.ssl["inspect-all"]&&iterator.call(sslProtocols,isDeep)}return hasDeepInspection},isSSLVPNInterface:function(){return(firstOf(this.srcintf)||{}).is_sslvpn},_checkSSLVPN:function(dialogContext){var VPN_CHECK_URI="/p/vpn/ssl/check/",validity={isValid:!0,warnKey:""};return this.isSSLVPNInterface()&&dialogContext.sslvpn_using_default_server_crt&&(validity.warnKey="sslvpn_policy_default_certificate_confirm",validity.isValid=!1,validity.resolution=function(){function genNameValueList(sources){return Array.isArray(sources)?sources.map(function(source){return{name:source.name}}):angular.isObject(sources)?[{name:sources.name}]:[]}var serialized=JSON.stringify({policy:{srcintf:genNameValueList(this.srcintf),srcaddr:genNameValueList(this.srcaddr),dstaddr:genNameValueList(this.dstaddr),users:genNameValueList(this.users),groups:genNameValueList(this.groups)},policy_type:this.isIPv6?"ipv6":"ipv4"});return $http.post(VPN_CHECK_URI,serialized).then(function(response){if(!response.data.valid)return $q.reject(response.data.message)})}.bind(this)),validity},_checkDeviceIdentification:function(){var BASE_WARN_KEY="Firewall::policyInterface::deviceIdentification::",validity={isValid:!0,warnKey:"",relatedItems:[]},genChangeList=function(intf){var changes=[];return Array.isArray(intf)?intf.forEach(function(entry){changes=changes.concat(genChangeList(entry))}):angular.isObject(intf)?intf.is_zone?changes=genChangeList(intf.members):intf.supports_device_id&&!intf.device_id_enabled&&changes.push(intf.name):"string"==typeof intf&&changes.push(intf),changes},enableDeviceIdentification=function(){function cmdbEnableDeviceId(intfName){return $http.put(CMDB_URI+"system/interface/"+intfName,{json:{"device-identification":"enable"}}).catch(function(){fweb.log.error('Failed to enable device identification for "'+intfName+'"')})}return $q.all(validity.relatedItems.map(function(intfName){return cmdbEnableDeviceId(intfName)}))},isDeviceIdEnabled=function(){var enabled=function(intf){return intf.supports_device_id&&(intf.device_id_enabled||intf.is_zone&&!intf.members.length)};return Array.isArray(this.srcintf)?this.srcintf.every(enabled):enabled(this.srcintf)}.bind(this);return isDeviceIdEnabled()||("enable"===this["learning-mode"]||"learn"===this.action?(validity.warnKey=BASE_WARN_KEY+"learningMode",validity.isValid=!1):this.devices.length>0&&(validity.warnKey=BASE_WARN_KEY+"device",validity.isValid=!1),validity.isValid||(validity.resolution=enableDeviceIdentification,validity.relatedItems=genChangeList(this.srcintf))),validity},_preSaveChecks:function(dialogContext){var validities=[this._checkDeviceIdentification(),this._checkSSLVPN(dialogContext)].filter(function(validity){return!validity.isValid}),warnResolutionMapping={},PROMPT_WIDTH=500;validities.forEach(function(validity){warnResolutionMapping[validity.warnKey]={resolution:validity.resolution,relatedItems:validity.relatedItems}});var warnKeys=Object.keys(warnResolutionMapping);return warnKeys.length?slide.open(policyShared.WARNING_PANE_ID,{template:"<f-warning-pane></f-warning-pane>",data:{warns:validities},options:{title:$.getInfo("confirm_title"),width:PROMPT_WIDTH,buttons:!0}}).then(function(){var promises=[];return warnKeys.forEach(function(warnKey){var resolution=warnResolutionMapping[warnKey].resolution;"function"==typeof resolution&&(promises=promises.concat(resolution.apply()))}),$q.all(promises)}):$q.resolve(!0)},_checkCommonPolicy:function(dialogContext){return $q.all([this._dataFetchOnSave()].concat(this._preSaveChecks(dialogContext))).then(function(results){var data=results[0];this._updateSSO(data.usersMap,data.groupsMap),this._updateWanOpt(dialogContext.wanOptEnabled),this._updateBasedOnGuiVisibility(),this._updateLearningMode(),null!=this["auto-asic-offload"]&&delete this["auto-asic-offload"],this.vpntunnel&&(this.outbound="disable"===this.inbound?"enable":this.outbound)}.bind(this),function(message){return logError(message,"Failed on common policy checks."),$q.reject(message)})},_updateSSO:function(usersMap,groupsMap){var idx,ssoTypes={rsso:!1,"fsso-service":!1,ldap:!1};for(idx=0;idx<this.users.length;idx++){var userName=this.users[idx].name;if(userName&&usersMap[userName]&&"ldap"===usersMap[userName].type){ssoTypes.ldap=!0;break}}for(idx=0;idx<this.groups.length;idx++){var groupName=this.groups[idx].name;for(var type in ssoTypes)!ssoTypes[type]&&groupName&&groupsMap[groupName]&&groupsMap[groupName]["group-type"]===type&&(ssoTypes[type]=!0);if(ssoTypes.rsso&&ssoTypes["fsso-service"])break}this.rsso=ssoTypes.rsso?"enable":"disable",this.fsso=ssoTypes["fsso-service"]||ssoTypes.ldap?"enable":"disable"},_resetWanOpt:function(){this.wanopt="disable",this["wanopt-detection"]="active",this._setNull(["wanopt-profile","wanopt-peer","wanopt-passive-opt"])},_updateWanOpt:function(wanOptEnabled){if(wanOptEnabled&&"enable"===this.wanopt){var wanoptDetection=this["wanopt-detection"];"active"===wanoptDetection?this._setNull(["wanopt-peer","wanopt-passive-opt"]):"passive"===wanoptDetection?this._setNull(["wanopt-peer","wanopt-profile"]):this._setNull(["wanopt-passive-opt"])}else this._resetWanOpt()},_updateBasedOnGuiVisibility:function(){function updateBasedOnGuiVisibility(visibilities){angular.forEach(visibilities,function(visibility,profile){!visibility&&exempts.indexOf(profile)<0&&(that[profile]="")})}var that=this,exempts=["profile-protocol-options"];updateBasedOnGuiVisibility(guiVisibility.utmProfiles),updateBasedOnGuiVisibility(guiVisibility.trafficShapers),this.isProxyPolicy&&(guiVisibility["replacemsg-override-group"]||(this["replacemsg-override-group"]=""),guiVisibility["webproxy-forward-server"]||(this["webproxy-forward-server"]=""))},_updateLearningMode:function(){"learn"===this.action?this["learning-mode"]="enable":this.hasOwnProperty("learning-mode")&&(this["learning-mode"]="disable")},preProcessNatOptions:function(){this.nat||(this.ippool="disable")},tcpOrUdpProtocol:function(){var hasProtocol=this.protocol===TCP_PROTOCOL||this.protocol===UDP_PROTOCOL;return this.otherProtocol&&(hasProtocol=hasProtocol||this.otherProtocol===TCP_PROTOCOL||this.otherProtocol===UDP_PROTOCOL),hasProtocol},preProcessAction:function(){"policy"===this.policyType&&"enable"===this["learning-mode"]&&(this.action="learn")},actionValidForIPPool:function(){return"accept"===this.action||"learn"===this.action}},implicitPolicySetup=function(type,override){angular.extend(this,policyInit.implicitPolicy(type)),override&&Object.keys(override).forEach(function(key){this[key]=override[key]}.bind(this))},PROTOTYPES={policy:{implicitPolicySetup:implicitPolicySetup,setupGuiVisibility:function(){guiVisibility["gtp-profile"]=!!this["gtp-profile"]},setupDestination:setupOmniselectModel("destination"),setupApplications:setupOmniselectModel("applications")},policy6:{implicitPolicySetup:implicitPolicySetup,setupApplications:setupOmniselectModel("applications")},"proxy-policy":{implicitPolicySetup:implicitPolicySetup,newPolicySetup:function(proxyEnabled){this.isNew=!0,this.action="accept",this.schedule=DEFAULT_SCHEDULE,this.proxy=proxyEnabled.web?"explicit-web":proxyEnabled.ftp?"ftp":"transparent-web"},setupSource:setupOmniselectModel("proxy-source"),setupDestination:setupOmniselectModel("proxy-destination"),setupListenOnInterfaces:function(interfaces){this.listenOnInterfaces={"explicit-web":[],ftp:[]},(interfaces||[]).forEach(function(intf){intf.explicit_ftp_proxy_enabled&&this.listenOnInterfaces.ftp.push(intf),intf.explicit_web_proxy_enabled&&this.listenOnInterfaces["explicit-web"].push(intf)}.bind(this))},setupUserContext:function(users){this.fssoUsers=users[0],this.rssoUsers=users[1]},setupGuiVisibility:function(){guiVisibility["replacemsg-override-group"]=!!this["replacemsg-override-group"],guiVisibility.service=this.service.length>1||1===this.service.length&&"webproxy"!==this.service[0].name,guiVisibility["webproxy-forward-server"]=!!this["webproxy-forward-server"]},postPolicyLoadPromises:function(){var availableInterfacesPromise=firewallInterfaces.get().then(function(interfaces){this.setupListenOnInterfaces(interfaces),availableInterfaces=interfaces}.bind(this));return[availableInterfacesPromise]}}};return FirewallPolicyService.$inject=["CMDB","$q","$http","policyOmniselectConfig","policyInit","policyVWP","$routeParams","state","loader","slide","policyShared","csfTopology"],FirewallPolicyService.prototype.firstOf=firstOf,FirewallPolicyService.prototype.get=function(){var routeParams=this.routeParams,type=routeParams.type,mkey=routeParams.mkey,vwpFilterName=routeParams.vwpname;if("proxy-policy"===type)return this.getProxyPolicy();angular.extend(dependencies,{logSetting:{write:state.adminHasWritePermission(state.ACCESS_GROUP.LOG)},wanopt:{read:state.adminHasReadPermission(state.ACCESS_GROUP.WANOPT)}});var policy,logSetting,wanOptPeer,wanOptAuthGroup,enhance=function(policy){["policy46","policy64"].indexOf(type)>=0&&(policy.nat="enable",policy.isNatPolicy=!0,policy.natType="policy46"===type?"46":"64","46"===policy.natType&&(policy.ippool="disable"),["srcintf","dstintf"].forEach(function(intf){"any"===policy[intf]&&(policy[intf]={name:"any",q_origin_key:"any"})})),policy.isVirtualWire=policyVWP.isVirtualWirePolicy();var ipv6Types=["policy6","policy46","policy64"];policy.isIPv6=ipv6Types.indexOf(type)>=0,policy.isMulticastPolicy="multicast-policy"===type,policy.policyType=type},idKey="multicast-policy"===type?"id":"policyid",proto=angular.extend({},BASE_PROTOTYPE,PROTOTYPES[type]),model=new CMDB.Model("firewall",type,proto,enhance),cmdbPolicy=new CMDB("firewall",type,{model:model,datasource:1}),dialogContextPromise=getDialogContext(),that=this,onLoadPromises=[dialogContextPromise,csfTopology.buildIfNecessary()],additionalPromises=[];"implicit"===mkey?(policy=cmdbPolicy.defaults(),dependencies.logSetting.write?(logSetting=new CMDB("log","setting").fetch(),onLoadPromises.push(logSetting.$promise)):fweb.log.warn("No log settings permissions.")):(policy=mkey?cmdbPolicy.get(parseInt(mkey,10),{key:idKey}):cmdbPolicy.defaults(),"policy"===type&&(dependencies.wanopt.read?(wanOptPeer=new CMDB("wanopt","peer").fetch(),wanOptAuthGroup=new CMDB("wanopt","auth-group").fetch(),onLoadPromises.push(wanOptPeer.$promise),onLoadPromises.push(wanOptAuthGroup.$promise)):fweb.log.warn("No WAN Opt. permissions.")));var availableInterfacesPromise=firewallInterfaces.get().then(function(interfaces){availableInterfaces=interfaces});onLoadPromises=onLoadPromises.concat([policy.$promise,availableInterfacesPromise]),$q.all(onLoadPromises).then(function(){if(routeParams.srcintf){var definedSrcintf={name:routeParams.srcintf,q_origin_key:routeParams.srcintf,datasource:"system.interface"};policy.srcintf=Array.isArray(policy.srcintf)?[definedSrcintf]:definedSrcintf}mkey?"implicit"===mkey&&policy.implicitPolicySetup(type):policy.newPolicySetup(),policy.isNatPolicy||policy.setupSource(),"policy"===type&&policy.setupDestination(),"policy"!==type&&"policy6"!==type||policy.setupApplications(),policy.isVirtualWire&&additionalPromises.push(policyVWP.init().then(function(){vwpFilterName&&policyVWP.setCurrent(vwpFilterName);var interfaceMatched=(firstOf(policy.srcintf)||{}).name===policyVWP.currentInterfaces[0];policy.virtualWireDirection=!mkey||policyVWP.isBiDirection(policy)?policyShared.DIRECTION.BIDIRECTION:interfaceMatched?policyShared.DIRECTION.FORWARD:policyShared.DIRECTION.BACKWARD})),additionalPromises=that.configSecurityProfiles(policy,guiVisibility),!state.isNgfwPolicyMode()||"policy"!==type&&"policy6"!==type||(additionalPromises=additionalPromises.concat(that.configNgfwSslSshProfile(policy,guiVisibility))),that.configShapers(policy,guiVisibility),policy.preProcessLogTraffic(logSetting),policy.preProcessNatOptions(),"policy"===type&&dependencies.wanopt.read&&policy.preProcessWanOpt(wanOptPeer,wanOptAuthGroup),policy.preProcessAction(),angular.isFunction(policy.setupGuiVisibility)&&policy.setupGuiVisibility()});var resolved={policy:policy,guiVisibility:guiVisibility,dependencies:dependencies,promise:$q.all(onLoadPromises).then(function(){return $q.all(additionalPromises)})};return dialogContextPromise.then(function(data){resolved.dialogContext=data}),resolved},FirewallPolicyService.prototype.getProxyPolicy=function(){var type=this.routeParams.type,mkey=this.routeParams.mkey,enhance=function(policy){policy.isProxyPolicy=!0,policy.policyType=type,policy.fssoUsers=[],policy.rssoUsers=[]};angular.extend(dependencies,{logSetting:{write:state.adminHasWritePermission(state.ACCESS_GROUP.LOG)}});var policy,logSetting,currentDefaultAction,multipleDefaultAction,proto=angular.extend({},BASE_PROTOTYPE,PROTOTYPES[type]),model=new CMDB.Model("firewall",type,proto,enhance),cmdbPolicy=new CMDB("firewall",type,{model:model,datasource:1}),implicitDefaultAction=[],PROXY_POLICY_PROTOCOL_KEY="ProxyPolicy::protocol.",IMPLICIT_ACTION_CLASS={accept:"fa-accepted",deny:"fa-denied"},onLoadPromises=[csfTopology.buildIfNecessary()];"implicit"===mkey?(policy=cmdbPolicy.defaults(),dependencies.logSetting.write?(logSetting=new CMDB("log","setting").fetch(),onLoadPromises.push(logSetting.$promise)):fweb.log.warn("No log settings permissions.")):policy=mkey?cmdbPolicy.get(parseInt(mkey,10),{key:"policyid"}):cmdbPolicy.defaults();var additionalPromises=[],that=this;if(onLoadPromises.push(policy.$promise),angular.extend(dependencies,{user:{read:state.adminHasReadPermission(state.ACCESS_GROUP.USER_DEVICE)},network:{read:state.adminHasReadPermission(state.ACCESS_GROUP.NETWORK)}}),dependencies.user.read){var cmdbUser=$q.all([cmdbGet("user","fsso"),cmdbGet("user","radius")]).then(function(users){policy.setupUserContext(users)});onLoadPromises.push(cmdbUser)}else fweb.log.warn("No user permissions.");guiVisibility.proxyEnabled={},dependencies.network.read?["web","ftp"].forEach(function(proxyType){var cmdbProxy=cmdbGet(proxyType+"-proxy","explicit").then(function(settings){guiVisibility.proxyEnabled[proxyType]="enable"===settings.status,["accept","deny"].indexOf(settings["sec-default-action"])>=0?(implicitDefaultAction.push({title:PROXY_POLICY_PROTOCOL_KEY+proxyType,value:{name:settings["sec-default-action"],iconClass:IMPLICIT_ACTION_CLASS[settings["sec-default-action"]]}}),currentDefaultAction?currentDefaultAction!==settings["sec-default-action"]&&(multipleDefaultAction=!0):(currentDefaultAction=settings["sec-default-action"],multipleDefaultAction=!1)):fweb.log.warn("Invalid default action.")});onLoadPromises.push(cmdbProxy)}):fweb.log.warn("No network permission for loading ftp-proxy.explicit or web-proxy.explicit"),$q.all(onLoadPromises).then(function(){mkey?"implicit"===mkey&&policy.implicitPolicySetup(type,implicitDefaultAction.length&&multipleDefaultAction?{actions:implicitDefaultAction,multipleAction:multipleDefaultAction}:{action:currentDefaultAction}):policy.newPolicySetup(guiVisibility.proxyEnabled),policy.setupSource(),policy.setupDestination(),additionalPromises=that.configSecurityProfiles(policy,guiVisibility),additionalPromises=additionalPromises.concat(policy.postPolicyLoadPromises()),policy.preProcessLogTraffic(logSetting),policy.setupGuiVisibility()});var resolved={policy:policy,guiVisibility:guiVisibility,promise:$q.all(onLoadPromises).then(function(){return $q.all(additionalPromises)})};return resolved},FirewallPolicyService.prototype.configSecurityProfiles=function(policy,guiVisibility){var promises=[];return angular.forEach(policyInit.UTM_PROFILES,function(value,key){function promiseFactory(){var profileName,profilePromise;return profileName=policy[key].name,profilePromise=cmdbGet(value.source.path,value.source.name,profileName),profilePromise.then(function(profile){policy[key]=profile&&profile[0]}),profilePromise}if(guiVisibility.utmProfiles[key]="enable"===policy["utm-status"]&&!!policy[key],policy[key]?(policyInit.PROXY_PROFILES[key]||"ssl-ssh-profile"===key)&&promises.push(promiseFactory()):"ssl-ssh-profile"===key&&policy["application-list"]&&promises.push(promiseFactory()),policy.hasOwnProperty(key)&&"mms-profile"!==key){var defaultName="ssl-ssh-profile"!==key?"default":"certificate-inspection",defaultPromise=cmdbGet(value.source.path,value.source.name,defaultName);defaultPromise.then(function(profile){defaultUtmProfiles[key]=profile&&profile[0]}),promises.push(defaultPromise)}}),promises},FirewallPolicyService.prototype.configNgfwSslSshProfile=function(policy,guiVisibility){var promises=[],configSSL=!1;angular.forEach(policyInit.UTM_PROFILES,function(value,key){policy[key]&&policyInit.PROXY_PROFILES[key]&&(configSSL=!0)}),configSSL=configSSL||["application","app-category","url-category"].some(function(key){return Array.isArray(policy[key])&&policy[key].length}),guiVisibility.ngfwSslSshProfile=configSSL;var profileName=state.getVdomSslSshProfile(),promise=cmdbGet("firewall","ssl-ssh-profile",profileName);return promise.then(function(profile){policy.ngfwSslSshProfile=profile&&profile[0]}),promises.push(promise),promises},FirewallPolicyService.prototype.configShapers=function(policy,guiVisibility){TRAFFIC_SHAPERS.forEach(function(shaper){guiVisibility.trafficShapers[shaper]=!!policy[shaper]})},FirewallPolicyService.prototype.securityProfileGuiSetup=function(scope,policy,guiVisibility,controllerKey){var enableProxyOption=function(){guiVisibility.proxyProfileSelected&&!policy["profile-protocol-options"]&&(policy["profile-protocol-options"]=defaultUtmProfiles["profile-protocol-options"]),guiVisibility.utmProfiles["profile-protocol-options"]||(guiVisibility.utmProfiles["profile-protocol-options"]=guiVisibility.proxyProfileSelected)};if(!policy.isProxyPolicy){var watchGroup=[];angular.forEach(policyInit.PROXY_PROFILES,function(value,key){var expr=controllerKey+'.policy["'+key+'"]';watchGroup.push(expr)}),scope.$watchGroup(watchGroup,function(values){guiVisibility.proxyProfileSelected=(values||[]).some(function(value){return value}),enableProxyOption()})}scope.$watchCollection(controllerKey+".guiVisibility.utmProfiles",function(values){var enableSSL=!1,enableProxy=!1;angular.forEach(values,function(value,key){policy.hasOwnProperty(key)&&value?policy[key]||(policy[key]=defaultUtmProfiles[key]):policy[key]="","profile-protocol-options"!==key&&"ssl-ssh-profile"!==key&&(enableSSL=enableSSL||!!value),"profile-protocol-options"!==key&&policy.isProxyPolicy&&(enableProxy=enableProxy||!!value)}),guiVisibility.sslSshProfileRequired=enableSSL,guiVisibility.utmProfiles["ssl-ssh-profile"]||(guiVisibility.utmProfiles["ssl-ssh-profile"]=enableSSL),policy.isProxyPolicy&&(guiVisibility.proxyProfileSelected=enableProxy,enableProxyOption())})},FirewallPolicyService.prototype.ngfwSecurityProfileGuiSetup=function(scope,policy,guiVisibility){function showNgfwSslSshProfile(){var show=Object.keys(guiVisibility.utmProfiles).some(function(key){var value=guiVisibility.utmProfiles[key];return policy.hasOwnProperty(key)&&value&&"ssl-ssh-profile"!==key});return show=show||["applications","url-category"].some(function(key){return Array.isArray(policy[key])&&policy[key].length})}scope.$watch(showNgfwSslSshProfile,function(show){guiVisibility.ngfwSslSshProfile=show}.bind(this))},FirewallPolicyService.prototype.clearCache=function(){guiVisibility={utmProfiles:{},trafficShapers:{},ngfwSslSshProfile:null},dependencies={},availableInterfaces={},defaultUtmProfiles={}},function(providers){providers.$provide.service("firewallPolicy",FirewallPolicyService)}}),define("ng/firewall/policy/dialog/utm-profiles",["fweb"],function(fweb){"use strict";function utmProfiles(loader){return{restrict:"E",scope:{policy:"=",modalDialog:"=",select:"=",guiVisibility:"="},
bindToController:!0,controller:function(state){this.state=state,this.BUILD=fweb.BUILD},controllerAs:"ctrl",templateUrl:loader.cache_path("dialog/partials/utm-profiles.html")}}return function(providers){providers.$compile.directive({fUtmProfiles:utmProfiles})}}),define("ng/firewall/policy/dialog/warning-pane",["angular"],function(angular){"use strict";function WarningPane(slide,policyShared){var current=slide.get(policyShared.WARNING_PANE_ID);angular.extend(this,current.data)}function warningPane(loader){return{restrict:"E",controller:WarningPane,controllerAs:"ctrl",templateUrl:loader.cache_path("dialog/partials/warning-pane.html")}}return function(providers){providers.$compile.directive({fWarningPane:warningPane})}});